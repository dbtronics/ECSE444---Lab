
Lab 3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cb4  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001e70  08001e70  00011e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001eb0  08001eb0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001eb0  08001eb0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001eb0  08001eb0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001eb0  08001eb0  00011eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001eb4  08001eb4  00011eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  2000000c  08001ec4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000050  08001ec4  00020050  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000709b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000012a0  00000000  00000000  000270d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000680  00000000  00000000  00028378  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005d8  00000000  00000000  000289f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000286cc  00000000  00000000  00028fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005a0a  00000000  00000000  0005169c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f82db  00000000  00000000  000570a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014f381  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001878  00000000  00000000  0014f3fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08001e58 	.word	0x08001e58

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08001e58 	.word	0x08001e58

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b084      	sub	sp, #16
 8000200:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000202:	f000 fa1e 	bl	8000642 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000206:	f000 f883 	bl	8000310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020a:	f000 f913 	bl	8000434 <MX_GPIO_Init>
  MX_DAC1_Init();
 800020e:	f000 f8d1 	bl	80003b4 <MX_DAC1_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  Saw tooth wave increment
	sawTooth = 0;
 8000212:	4b39      	ldr	r3, [pc, #228]	; (80002f8 <main+0xfc>)
 8000214:	2200      	movs	r2, #0
 8000216:	801a      	strh	r2, [r3, #0]
	duration = HAL_GetTick();
 8000218:	f000 fa7c 	bl	8000714 <HAL_GetTick>
 800021c:	4602      	mov	r2, r0
 800021e:	4b37      	ldr	r3, [pc, #220]	; (80002fc <main+0x100>)
 8000220:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 0xFFFF; i++) {
 8000222:	2300      	movs	r3, #0
 8000224:	60fb      	str	r3, [r7, #12]
 8000226:	e008      	b.n	800023a <main+0x3e>
		sawTooth++;
 8000228:	4b33      	ldr	r3, [pc, #204]	; (80002f8 <main+0xfc>)
 800022a:	881b      	ldrh	r3, [r3, #0]
 800022c:	3301      	adds	r3, #1
 800022e:	b29a      	uxth	r2, r3
 8000230:	4b31      	ldr	r3, [pc, #196]	; (80002f8 <main+0xfc>)
 8000232:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < 0xFFFF; i++) {
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	3301      	adds	r3, #1
 8000238:	60fb      	str	r3, [r7, #12]
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000240:	4293      	cmp	r3, r2
 8000242:	ddf1      	ble.n	8000228 <main+0x2c>
	}
	duration = HAL_GetTick() - duration;
 8000244:	f000 fa66 	bl	8000714 <HAL_GetTick>
 8000248:	4602      	mov	r2, r0
 800024a:	4b2c      	ldr	r3, [pc, #176]	; (80002fc <main+0x100>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	1ad3      	subs	r3, r2, r3
 8000250:	4a2a      	ldr	r2, [pc, #168]	; (80002fc <main+0x100>)
 8000252:	6013      	str	r3, [r2, #0]
	frequencySaw = (float) 1/duration * 1000;
 8000254:	4b29      	ldr	r3, [pc, #164]	; (80002fc <main+0x100>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	ee07 3a90 	vmov	s15, r3
 800025c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000260:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000264:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000268:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000300 <main+0x104>
 800026c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000270:	4b24      	ldr	r3, [pc, #144]	; (8000304 <main+0x108>)
 8000272:	edc3 7a00 	vstr	s15, [r3]

	duration = HAL_GetTick();
 8000276:	f000 fa4d 	bl	8000714 <HAL_GetTick>
 800027a:	4602      	mov	r2, r0
 800027c:	4b1f      	ldr	r3, [pc, #124]	; (80002fc <main+0x100>)
 800027e:	601a      	str	r2, [r3, #0]
	for (int i = 2; i < 0xFFFF; i=i+2) {
 8000280:	2302      	movs	r3, #2
 8000282:	60bb      	str	r3, [r7, #8]
 8000284:	e008      	b.n	8000298 <main+0x9c>
		triangle = triangle + 2;
 8000286:	4b20      	ldr	r3, [pc, #128]	; (8000308 <main+0x10c>)
 8000288:	881b      	ldrh	r3, [r3, #0]
 800028a:	3302      	adds	r3, #2
 800028c:	b29a      	uxth	r2, r3
 800028e:	4b1e      	ldr	r3, [pc, #120]	; (8000308 <main+0x10c>)
 8000290:	801a      	strh	r2, [r3, #0]
	for (int i = 2; i < 0xFFFF; i=i+2) {
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	3302      	adds	r3, #2
 8000296:	60bb      	str	r3, [r7, #8]
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800029e:	4293      	cmp	r3, r2
 80002a0:	ddf1      	ble.n	8000286 <main+0x8a>
	}

	for (int  i= 2;  i< 0xFFFF; i=i+2) {
 80002a2:	2302      	movs	r3, #2
 80002a4:	607b      	str	r3, [r7, #4]
 80002a6:	e008      	b.n	80002ba <main+0xbe>
		triangle = triangle - 2;
 80002a8:	4b17      	ldr	r3, [pc, #92]	; (8000308 <main+0x10c>)
 80002aa:	881b      	ldrh	r3, [r3, #0]
 80002ac:	3b02      	subs	r3, #2
 80002ae:	b29a      	uxth	r2, r3
 80002b0:	4b15      	ldr	r3, [pc, #84]	; (8000308 <main+0x10c>)
 80002b2:	801a      	strh	r2, [r3, #0]
	for (int  i= 2;  i< 0xFFFF; i=i+2) {
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	3302      	adds	r3, #2
 80002b8:	607b      	str	r3, [r7, #4]
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80002c0:	4293      	cmp	r3, r2
 80002c2:	ddf1      	ble.n	80002a8 <main+0xac>
	}
	duration = HAL_GetTick() - duration;
 80002c4:	f000 fa26 	bl	8000714 <HAL_GetTick>
 80002c8:	4602      	mov	r2, r0
 80002ca:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <main+0x100>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	1ad3      	subs	r3, r2, r3
 80002d0:	4a0a      	ldr	r2, [pc, #40]	; (80002fc <main+0x100>)
 80002d2:	6013      	str	r3, [r2, #0]
	frequencyTri = (float) 1/duration * 1000;
 80002d4:	4b09      	ldr	r3, [pc, #36]	; (80002fc <main+0x100>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	ee07 3a90 	vmov	s15, r3
 80002dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80002e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80002e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80002e8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000300 <main+0x104>
 80002ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80002f0:	4b06      	ldr	r3, [pc, #24]	; (800030c <main+0x110>)
 80002f2:	edc3 7a00 	vstr	s15, [r3]
	sawTooth = 0;
 80002f6:	e78c      	b.n	8000212 <main+0x16>
 80002f8:	20000028 	.word	0x20000028
 80002fc:	20000040 	.word	0x20000040
 8000300:	447a0000 	.word	0x447a0000
 8000304:	20000044 	.word	0x20000044
 8000308:	2000002a 	.word	0x2000002a
 800030c:	20000048 	.word	0x20000048

08000310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b096      	sub	sp, #88	; 0x58
 8000314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000316:	f107 0314 	add.w	r3, r7, #20
 800031a:	2244      	movs	r2, #68	; 0x44
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f001 fd92 	bl	8001e48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000324:	463b      	mov	r3, r7
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]
 800032c:	609a      	str	r2, [r3, #8]
 800032e:	60da      	str	r2, [r3, #12]
 8000330:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000332:	2000      	movs	r0, #0
 8000334:	f000 fe16 	bl	8000f64 <HAL_PWREx_ControlVoltageScaling>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800033e:	f000 f891 	bl	8000464 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000342:	2310      	movs	r3, #16
 8000344:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000346:	2301      	movs	r3, #1
 8000348:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800034a:	2300      	movs	r3, #0
 800034c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800034e:	2360      	movs	r3, #96	; 0x60
 8000350:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000352:	2302      	movs	r3, #2
 8000354:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000356:	2301      	movs	r3, #1
 8000358:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800035a:	2301      	movs	r3, #1
 800035c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800035e:	233c      	movs	r3, #60	; 0x3c
 8000360:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000362:	2302      	movs	r3, #2
 8000364:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000366:	2302      	movs	r3, #2
 8000368:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800036a:	2302      	movs	r3, #2
 800036c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036e:	f107 0314 	add.w	r3, r7, #20
 8000372:	4618      	mov	r0, r3
 8000374:	f000 fe9a 	bl	80010ac <HAL_RCC_OscConfig>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800037e:	f000 f871 	bl	8000464 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000382:	230f      	movs	r3, #15
 8000384:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000386:	2303      	movs	r3, #3
 8000388:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038a:	2300      	movs	r3, #0
 800038c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800038e:	2300      	movs	r3, #0
 8000390:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000396:	463b      	mov	r3, r7
 8000398:	2105      	movs	r1, #5
 800039a:	4618      	mov	r0, r3
 800039c:	f001 faac 	bl	80018f8 <HAL_RCC_ClockConfig>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003a6:	f000 f85d 	bl	8000464 <Error_Handler>
  }
}
 80003aa:	bf00      	nop
 80003ac:	3758      	adds	r7, #88	; 0x58
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
	...

080003b4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b08a      	sub	sp, #40	; 0x28
 80003b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80003ba:	463b      	mov	r3, r7
 80003bc:	2228      	movs	r2, #40	; 0x28
 80003be:	2100      	movs	r1, #0
 80003c0:	4618      	mov	r0, r3
 80003c2:	f001 fd41 	bl	8001e48 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80003c6:	4b19      	ldr	r3, [pc, #100]	; (800042c <MX_DAC1_Init+0x78>)
 80003c8:	4a19      	ldr	r2, [pc, #100]	; (8000430 <MX_DAC1_Init+0x7c>)
 80003ca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80003cc:	4817      	ldr	r0, [pc, #92]	; (800042c <MX_DAC1_Init+0x78>)
 80003ce:	f000 fab4 	bl	800093a <HAL_DAC_Init>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80003d8:	f000 f844 	bl	8000464 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80003dc:	2300      	movs	r3, #0
 80003de:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80003e0:	2300      	movs	r3, #0
 80003e2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80003e4:	2300      	movs	r3, #0
 80003e6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80003e8:	2300      	movs	r3, #0
 80003ea:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80003ec:	2300      	movs	r3, #0
 80003ee:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80003f0:	2300      	movs	r3, #0
 80003f2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80003f4:	463b      	mov	r3, r7
 80003f6:	2200      	movs	r2, #0
 80003f8:	4619      	mov	r1, r3
 80003fa:	480c      	ldr	r0, [pc, #48]	; (800042c <MX_DAC1_Init+0x78>)
 80003fc:	f000 fac0 	bl	8000980 <HAL_DAC_ConfigChannel>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 8000406:	f000 f82d 	bl	8000464 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800040a:	2300      	movs	r3, #0
 800040c:	613b      	str	r3, [r7, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800040e:	463b      	mov	r3, r7
 8000410:	2210      	movs	r2, #16
 8000412:	4619      	mov	r1, r3
 8000414:	4805      	ldr	r0, [pc, #20]	; (800042c <MX_DAC1_Init+0x78>)
 8000416:	f000 fab3 	bl	8000980 <HAL_DAC_ConfigChannel>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_DAC1_Init+0x70>
  {
    Error_Handler();
 8000420:	f000 f820 	bl	8000464 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000424:	bf00      	nop
 8000426:	3728      	adds	r7, #40	; 0x28
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	2000002c 	.word	0x2000002c
 8000430:	40007400 	.word	0x40007400

08000434 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043a:	4b09      	ldr	r3, [pc, #36]	; (8000460 <MX_GPIO_Init+0x2c>)
 800043c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043e:	4a08      	ldr	r2, [pc, #32]	; (8000460 <MX_GPIO_Init+0x2c>)
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000446:	4b06      	ldr	r3, [pc, #24]	; (8000460 <MX_GPIO_Init+0x2c>)
 8000448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]

}
 8000452:	bf00      	nop
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	40021000 	.word	0x40021000

08000464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000468:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800046a:	e7fe      	b.n	800046a <Error_Handler+0x6>

0800046c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000472:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <HAL_MspInit+0x44>)
 8000474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000476:	4a0e      	ldr	r2, [pc, #56]	; (80004b0 <HAL_MspInit+0x44>)
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	6613      	str	r3, [r2, #96]	; 0x60
 800047e:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <HAL_MspInit+0x44>)
 8000480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000482:	f003 0301 	and.w	r3, r3, #1
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800048a:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <HAL_MspInit+0x44>)
 800048c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800048e:	4a08      	ldr	r2, [pc, #32]	; (80004b0 <HAL_MspInit+0x44>)
 8000490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000494:	6593      	str	r3, [r2, #88]	; 0x58
 8000496:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <HAL_MspInit+0x44>)
 8000498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800049a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800049e:	603b      	str	r3, [r7, #0]
 80004a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a2:	bf00      	nop
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	40021000 	.word	0x40021000

080004b4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08a      	sub	sp, #40	; 0x28
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004bc:	f107 0314 	add.w	r3, r7, #20
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
 80004c8:	60da      	str	r2, [r3, #12]
 80004ca:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a15      	ldr	r2, [pc, #84]	; (8000528 <HAL_DAC_MspInit+0x74>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d124      	bne.n	8000520 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80004d6:	4b15      	ldr	r3, [pc, #84]	; (800052c <HAL_DAC_MspInit+0x78>)
 80004d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004da:	4a14      	ldr	r2, [pc, #80]	; (800052c <HAL_DAC_MspInit+0x78>)
 80004dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80004e0:	6593      	str	r3, [r2, #88]	; 0x58
 80004e2:	4b12      	ldr	r3, [pc, #72]	; (800052c <HAL_DAC_MspInit+0x78>)
 80004e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80004ea:	613b      	str	r3, [r7, #16]
 80004ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ee:	4b0f      	ldr	r3, [pc, #60]	; (800052c <HAL_DAC_MspInit+0x78>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	4a0e      	ldr	r2, [pc, #56]	; (800052c <HAL_DAC_MspInit+0x78>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fa:	4b0c      	ldr	r3, [pc, #48]	; (800052c <HAL_DAC_MspInit+0x78>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000506:	2330      	movs	r3, #48	; 0x30
 8000508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800050a:	2303      	movs	r3, #3
 800050c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	2300      	movs	r3, #0
 8000510:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000512:	f107 0314 	add.w	r3, r7, #20
 8000516:	4619      	mov	r1, r3
 8000518:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800051c:	f000 fb70 	bl	8000c00 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000520:	bf00      	nop
 8000522:	3728      	adds	r7, #40	; 0x28
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	40007400 	.word	0x40007400
 800052c:	40021000 	.word	0x40021000

08000530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000534:	e7fe      	b.n	8000534 <NMI_Handler+0x4>

08000536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800053a:	e7fe      	b.n	800053a <HardFault_Handler+0x4>

0800053c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000540:	e7fe      	b.n	8000540 <MemManage_Handler+0x4>

08000542 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000546:	e7fe      	b.n	8000546 <BusFault_Handler+0x4>

08000548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800054c:	e7fe      	b.n	800054c <UsageFault_Handler+0x4>

0800054e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000552:	bf00      	nop
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr

0800056a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr

08000578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800057c:	f000 f8b6 	bl	80006ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000580:	bf00      	nop
 8000582:	bd80      	pop	{r7, pc}

08000584 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000588:	4b17      	ldr	r3, [pc, #92]	; (80005e8 <SystemInit+0x64>)
 800058a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800058e:	4a16      	ldr	r2, [pc, #88]	; (80005e8 <SystemInit+0x64>)
 8000590:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000594:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000598:	4b14      	ldr	r3, [pc, #80]	; (80005ec <SystemInit+0x68>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a13      	ldr	r2, [pc, #76]	; (80005ec <SystemInit+0x68>)
 800059e:	f043 0301 	orr.w	r3, r3, #1
 80005a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80005a4:	4b11      	ldr	r3, [pc, #68]	; (80005ec <SystemInit+0x68>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80005aa:	4b10      	ldr	r3, [pc, #64]	; (80005ec <SystemInit+0x68>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a0f      	ldr	r2, [pc, #60]	; (80005ec <SystemInit+0x68>)
 80005b0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80005b4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80005b8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80005ba:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <SystemInit+0x68>)
 80005bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005c0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005c2:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <SystemInit+0x68>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a09      	ldr	r2, [pc, #36]	; (80005ec <SystemInit+0x68>)
 80005c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005cc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80005ce:	4b07      	ldr	r3, [pc, #28]	; (80005ec <SystemInit+0x68>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005d4:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <SystemInit+0x64>)
 80005d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005da:	609a      	str	r2, [r3, #8]
#endif
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	e000ed00 	.word	0xe000ed00
 80005ec:	40021000 	.word	0x40021000

080005f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000628 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005f4:	f7ff ffc6 	bl	8000584 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80005f8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80005fa:	e003      	b.n	8000604 <LoopCopyDataInit>

080005fc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80005fc:	4b0b      	ldr	r3, [pc, #44]	; (800062c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80005fe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000600:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000602:	3104      	adds	r1, #4

08000604 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000604:	480a      	ldr	r0, [pc, #40]	; (8000630 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000606:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000608:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800060a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800060c:	d3f6      	bcc.n	80005fc <CopyDataInit>
	ldr	r2, =_sbss
 800060e:	4a0a      	ldr	r2, [pc, #40]	; (8000638 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000610:	e002      	b.n	8000618 <LoopFillZerobss>

08000612 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000612:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000614:	f842 3b04 	str.w	r3, [r2], #4

08000618 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000618:	4b08      	ldr	r3, [pc, #32]	; (800063c <LoopForever+0x16>)
	cmp	r2, r3
 800061a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800061c:	d3f9      	bcc.n	8000612 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800061e:	f001 fbef 	bl	8001e00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000622:	f7ff fdeb 	bl	80001fc <main>

08000626 <LoopForever>:

LoopForever:
    b LoopForever
 8000626:	e7fe      	b.n	8000626 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000628:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 800062c:	08001eb8 	.word	0x08001eb8
	ldr	r0, =_sdata
 8000630:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000634:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000638:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800063c:	20000050 	.word	0x20000050

08000640 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000640:	e7fe      	b.n	8000640 <ADC1_IRQHandler>

08000642 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000642:	b580      	push	{r7, lr}
 8000644:	b082      	sub	sp, #8
 8000646:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000648:	2300      	movs	r3, #0
 800064a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800064c:	2003      	movs	r0, #3
 800064e:	f000 f941 	bl	80008d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000652:	2000      	movs	r0, #0
 8000654:	f000 f80e 	bl	8000674 <HAL_InitTick>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d002      	beq.n	8000664 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800065e:	2301      	movs	r3, #1
 8000660:	71fb      	strb	r3, [r7, #7]
 8000662:	e001      	b.n	8000668 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000664:	f7ff ff02 	bl	800046c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000668:	79fb      	ldrb	r3, [r7, #7]
}
 800066a:	4618      	mov	r0, r3
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800067c:	2300      	movs	r3, #0
 800067e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000680:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <HAL_InitTick+0x6c>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d023      	beq.n	80006d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000688:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <HAL_InitTick+0x70>)
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <HAL_InitTick+0x6c>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	4619      	mov	r1, r3
 8000692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000696:	fbb3 f3f1 	udiv	r3, r3, r1
 800069a:	fbb2 f3f3 	udiv	r3, r2, r3
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f93f 	bl	8000922 <HAL_SYSTICK_Config>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d10f      	bne.n	80006ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2b0f      	cmp	r3, #15
 80006ae:	d809      	bhi.n	80006c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b0:	2200      	movs	r2, #0
 80006b2:	6879      	ldr	r1, [r7, #4]
 80006b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006b8:	f000 f917 	bl	80008ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006bc:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <HAL_InitTick+0x74>)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6013      	str	r3, [r2, #0]
 80006c2:	e007      	b.n	80006d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80006c4:	2301      	movs	r3, #1
 80006c6:	73fb      	strb	r3, [r7, #15]
 80006c8:	e004      	b.n	80006d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006ca:	2301      	movs	r3, #1
 80006cc:	73fb      	strb	r3, [r7, #15]
 80006ce:	e001      	b.n	80006d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006d0:	2301      	movs	r3, #1
 80006d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3710      	adds	r7, #16
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000008 	.word	0x20000008
 80006e4:	20000000 	.word	0x20000000
 80006e8:	20000004 	.word	0x20000004

080006ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <HAL_IncTick+0x20>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	461a      	mov	r2, r3
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <HAL_IncTick+0x24>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4413      	add	r3, r2
 80006fc:	4a04      	ldr	r2, [pc, #16]	; (8000710 <HAL_IncTick+0x24>)
 80006fe:	6013      	str	r3, [r2, #0]
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	20000008 	.word	0x20000008
 8000710:	2000004c 	.word	0x2000004c

08000714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  return uwTick;
 8000718:	4b03      	ldr	r3, [pc, #12]	; (8000728 <HAL_GetTick+0x14>)
 800071a:	681b      	ldr	r3, [r3, #0]
}
 800071c:	4618      	mov	r0, r3
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	2000004c 	.word	0x2000004c

0800072c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000734:	f7ff ffee 	bl	8000714 <HAL_GetTick>
 8000738:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000744:	d005      	beq.n	8000752 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <HAL_Delay+0x40>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	461a      	mov	r2, r3
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	4413      	add	r3, r2
 8000750:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000752:	bf00      	nop
 8000754:	f7ff ffde 	bl	8000714 <HAL_GetTick>
 8000758:	4602      	mov	r2, r0
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	68fa      	ldr	r2, [r7, #12]
 8000760:	429a      	cmp	r2, r3
 8000762:	d8f7      	bhi.n	8000754 <HAL_Delay+0x28>
  {
  }
}
 8000764:	bf00      	nop
 8000766:	3710      	adds	r7, #16
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000008 	.word	0x20000008

08000770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	f003 0307 	and.w	r3, r3, #7
 800077e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000786:	68ba      	ldr	r2, [r7, #8]
 8000788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800078c:	4013      	ands	r3, r2
 800078e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000798:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800079c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007a2:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <__NVIC_SetPriorityGrouping+0x44>)
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	60d3      	str	r3, [r2, #12]
}
 80007a8:	bf00      	nop
 80007aa:	3714      	adds	r7, #20
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007bc:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <__NVIC_GetPriorityGrouping+0x18>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	f003 0307 	and.w	r3, r3, #7
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	6039      	str	r1, [r7, #0]
 80007de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	db0a      	blt.n	80007fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	490c      	ldr	r1, [pc, #48]	; (8000820 <__NVIC_SetPriority+0x4c>)
 80007ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f2:	0112      	lsls	r2, r2, #4
 80007f4:	b2d2      	uxtb	r2, r2
 80007f6:	440b      	add	r3, r1
 80007f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007fc:	e00a      	b.n	8000814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4908      	ldr	r1, [pc, #32]	; (8000824 <__NVIC_SetPriority+0x50>)
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	f003 030f 	and.w	r3, r3, #15
 800080a:	3b04      	subs	r3, #4
 800080c:	0112      	lsls	r2, r2, #4
 800080e:	b2d2      	uxtb	r2, r2
 8000810:	440b      	add	r3, r1
 8000812:	761a      	strb	r2, [r3, #24]
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	e000e100 	.word	0xe000e100
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000828:	b480      	push	{r7}
 800082a:	b089      	sub	sp, #36	; 0x24
 800082c:	af00      	add	r7, sp, #0
 800082e:	60f8      	str	r0, [r7, #12]
 8000830:	60b9      	str	r1, [r7, #8]
 8000832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	f003 0307 	and.w	r3, r3, #7
 800083a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800083c:	69fb      	ldr	r3, [r7, #28]
 800083e:	f1c3 0307 	rsb	r3, r3, #7
 8000842:	2b04      	cmp	r3, #4
 8000844:	bf28      	it	cs
 8000846:	2304      	movcs	r3, #4
 8000848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	3304      	adds	r3, #4
 800084e:	2b06      	cmp	r3, #6
 8000850:	d902      	bls.n	8000858 <NVIC_EncodePriority+0x30>
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	3b03      	subs	r3, #3
 8000856:	e000      	b.n	800085a <NVIC_EncodePriority+0x32>
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800085c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000860:	69bb      	ldr	r3, [r7, #24]
 8000862:	fa02 f303 	lsl.w	r3, r2, r3
 8000866:	43da      	mvns	r2, r3
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	401a      	ands	r2, r3
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000870:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	fa01 f303 	lsl.w	r3, r1, r3
 800087a:	43d9      	mvns	r1, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000880:	4313      	orrs	r3, r2
         );
}
 8000882:	4618      	mov	r0, r3
 8000884:	3724      	adds	r7, #36	; 0x24
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
	...

08000890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3b01      	subs	r3, #1
 800089c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008a0:	d301      	bcc.n	80008a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008a2:	2301      	movs	r3, #1
 80008a4:	e00f      	b.n	80008c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008a6:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <SysTick_Config+0x40>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	3b01      	subs	r3, #1
 80008ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ae:	210f      	movs	r1, #15
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008b4:	f7ff ff8e 	bl	80007d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <SysTick_Config+0x40>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008be:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <SysTick_Config+0x40>)
 80008c0:	2207      	movs	r2, #7
 80008c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	e000e010 	.word	0xe000e010

080008d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff ff47 	bl	8000770 <__NVIC_SetPriorityGrouping>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b086      	sub	sp, #24
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	4603      	mov	r3, r0
 80008f2:	60b9      	str	r1, [r7, #8]
 80008f4:	607a      	str	r2, [r7, #4]
 80008f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008fc:	f7ff ff5c 	bl	80007b8 <__NVIC_GetPriorityGrouping>
 8000900:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	68b9      	ldr	r1, [r7, #8]
 8000906:	6978      	ldr	r0, [r7, #20]
 8000908:	f7ff ff8e 	bl	8000828 <NVIC_EncodePriority>
 800090c:	4602      	mov	r2, r0
 800090e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000912:	4611      	mov	r1, r2
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ff5d 	bl	80007d4 <__NVIC_SetPriority>
}
 800091a:	bf00      	nop
 800091c:	3718      	adds	r7, #24
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b082      	sub	sp, #8
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f7ff ffb0 	bl	8000890 <SysTick_Config>
 8000930:	4603      	mov	r3, r0
}
 8000932:	4618      	mov	r0, r3
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b082      	sub	sp, #8
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d101      	bne.n	800094c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000948:	2301      	movs	r3, #1
 800094a:	e014      	b.n	8000976 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	791b      	ldrb	r3, [r3, #4]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	2b00      	cmp	r3, #0
 8000954:	d105      	bne.n	8000962 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2200      	movs	r2, #0
 800095a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f7ff fda9 	bl	80004b4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2202      	movs	r2, #2
 8000966:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2201      	movs	r2, #1
 8000972:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000974:	2300      	movs	r3, #0
}
 8000976:	4618      	mov	r0, r3
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800098c:	2300      	movs	r3, #0
 800098e:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	795b      	ldrb	r3, [r3, #5]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d101      	bne.n	800099c <HAL_DAC_ConfigChannel+0x1c>
 8000998:	2302      	movs	r3, #2
 800099a:	e12a      	b.n	8000bf2 <HAL_DAC_ConfigChannel+0x272>
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	2201      	movs	r2, #1
 80009a0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	2202      	movs	r2, #2
 80009a6:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	2b04      	cmp	r3, #4
 80009ae:	d174      	bne.n	8000a9a <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80009b0:	f7ff feb0 	bl	8000714 <HAL_GetTick>
 80009b4:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d134      	bne.n	8000a26 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80009bc:	e011      	b.n	80009e2 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80009be:	f7ff fea9 	bl	8000714 <HAL_GetTick>
 80009c2:	4602      	mov	r2, r0
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	1ad3      	subs	r3, r2, r3
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d90a      	bls.n	80009e2 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	691b      	ldr	r3, [r3, #16]
 80009d0:	f043 0208 	orr.w	r2, r3, #8
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	2203      	movs	r2, #3
 80009dc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80009de:	2303      	movs	r3, #3
 80009e0:	e107      	b.n	8000bf2 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d1e6      	bne.n	80009be <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80009f0:	2001      	movs	r0, #1
 80009f2:	f7ff fe9b 	bl	800072c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	68ba      	ldr	r2, [r7, #8]
 80009fc:	69d2      	ldr	r2, [r2, #28]
 80009fe:	641a      	str	r2, [r3, #64]	; 0x40
 8000a00:	e01e      	b.n	8000a40 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000a02:	f7ff fe87 	bl	8000714 <HAL_GetTick>
 8000a06:	4602      	mov	r2, r0
 8000a08:	69bb      	ldr	r3, [r7, #24]
 8000a0a:	1ad3      	subs	r3, r2, r3
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d90a      	bls.n	8000a26 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	691b      	ldr	r3, [r3, #16]
 8000a14:	f043 0208 	orr.w	r2, r3, #8
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2203      	movs	r2, #3
 8000a20:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000a22:	2303      	movs	r3, #3
 8000a24:	e0e5      	b.n	8000bf2 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	dbe8      	blt.n	8000a02 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8000a30:	2001      	movs	r0, #1
 8000a32:	f7ff fe7b 	bl	800072c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	68ba      	ldr	r2, [r7, #8]
 8000a3c:	69d2      	ldr	r2, [r2, #28]
 8000a3e:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f003 0310 	and.w	r3, r3, #16
 8000a4c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000a50:	fa01 f303 	lsl.w	r3, r1, r3
 8000a54:	43db      	mvns	r3, r3
 8000a56:	ea02 0103 	and.w	r1, r2, r3
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	6a1a      	ldr	r2, [r3, #32]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	f003 0310 	and.w	r3, r3, #16
 8000a64:	409a      	lsls	r2, r3
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	430a      	orrs	r2, r1
 8000a6c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f003 0310 	and.w	r3, r3, #16
 8000a7a:	21ff      	movs	r1, #255	; 0xff
 8000a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a80:	43db      	mvns	r3, r3
 8000a82:	ea02 0103 	and.w	r1, r2, r3
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f003 0310 	and.w	r3, r3, #16
 8000a90:	409a      	lsls	r2, r3
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	430a      	orrs	r2, r1
 8000a98:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d11d      	bne.n	8000ade <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000aa8:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	f003 0310 	and.w	r3, r3, #16
 8000ab0:	221f      	movs	r2, #31
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	69fa      	ldr	r2, [r7, #28]
 8000aba:	4013      	ands	r3, r2
 8000abc:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f003 0310 	and.w	r3, r3, #16
 8000aca:	697a      	ldr	r2, [r7, #20]
 8000acc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad0:	69fa      	ldr	r2, [r7, #28]
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	69fa      	ldr	r2, [r7, #28]
 8000adc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ae4:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f003 0310 	and.w	r3, r3, #16
 8000aec:	2207      	movs	r2, #7
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	43db      	mvns	r3, r3
 8000af4:	69fa      	ldr	r2, [r7, #28]
 8000af6:	4013      	ands	r3, r2
 8000af8:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	685a      	ldr	r2, [r3, #4]
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	68db      	ldr	r3, [r3, #12]
 8000b02:	431a      	orrs	r2, r3
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	691b      	ldr	r3, [r3, #16]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f003 0310 	and.w	r3, r3, #16
 8000b12:	697a      	ldr	r2, [r7, #20]
 8000b14:	fa02 f303 	lsl.w	r3, r2, r3
 8000b18:	69fa      	ldr	r2, [r7, #28]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	69fa      	ldr	r2, [r7, #28]
 8000b24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	6819      	ldr	r1, [r3, #0]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f003 0310 	and.w	r3, r3, #16
 8000b32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	43da      	mvns	r2, r3
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	400a      	ands	r2, r1
 8000b42:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f003 0310 	and.w	r3, r3, #16
 8000b52:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	43db      	mvns	r3, r3
 8000b5c:	69fa      	ldr	r2, [r7, #28]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f003 0310 	and.w	r3, r3, #16
 8000b6e:	697a      	ldr	r2, [r7, #20]
 8000b70:	fa02 f303 	lsl.w	r3, r2, r3
 8000b74:	69fa      	ldr	r2, [r7, #28]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b82:	d104      	bne.n	8000b8e <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b8a:	61fb      	str	r3, [r7, #28]
 8000b8c:	e018      	b.n	8000bc0 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d104      	bne.n	8000ba0 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000b9c:	61fb      	str	r3, [r7, #28]
 8000b9e:	e00f      	b.n	8000bc0 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8000ba0:	f001 f860 	bl	8001c64 <HAL_RCC_GetHCLKFreq>
 8000ba4:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	4a14      	ldr	r2, [pc, #80]	; (8000bfc <HAL_DAC_ConfigChannel+0x27c>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d904      	bls.n	8000bb8 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bb4:	61fb      	str	r3, [r7, #28]
 8000bb6:	e003      	b.n	8000bc0 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000bbe:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	69fa      	ldr	r2, [r7, #28]
 8000bc6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	6819      	ldr	r1, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	f003 0310 	and.w	r3, r3, #16
 8000bd4:	22c0      	movs	r2, #192	; 0xc0
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	43da      	mvns	r2, r3
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	400a      	ands	r2, r1
 8000be2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	2201      	movs	r2, #1
 8000be8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	2200      	movs	r2, #0
 8000bee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3720      	adds	r7, #32
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	04c4b400 	.word	0x04c4b400

08000c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b087      	sub	sp, #28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c0e:	e166      	b.n	8000ede <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	2101      	movs	r1, #1
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f000 8158 	beq.w	8000ed8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d00b      	beq.n	8000c48 <HAL_GPIO_Init+0x48>
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	d007      	beq.n	8000c48 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c3c:	2b11      	cmp	r3, #17
 8000c3e:	d003      	beq.n	8000c48 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	2b12      	cmp	r3, #18
 8000c46:	d130      	bne.n	8000caa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	2203      	movs	r2, #3
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	68da      	ldr	r2, [r3, #12]
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c7e:	2201      	movs	r2, #1
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	43db      	mvns	r3, r3
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	091b      	lsrs	r3, r3, #4
 8000c94:	f003 0201 	and.w	r2, r3, #1
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	68db      	ldr	r3, [r3, #12]
 8000cae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	2203      	movs	r2, #3
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	43db      	mvns	r3, r3
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	689a      	ldr	r2, [r3, #8]
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d003      	beq.n	8000cea <HAL_GPIO_Init+0xea>
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2b12      	cmp	r3, #18
 8000ce8:	d123      	bne.n	8000d32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	08da      	lsrs	r2, r3, #3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3208      	adds	r2, #8
 8000cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	220f      	movs	r2, #15
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43db      	mvns	r3, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	691a      	ldr	r2, [r3, #16]
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	f003 0307 	and.w	r3, r3, #7
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	08da      	lsrs	r2, r3, #3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3208      	adds	r2, #8
 8000d2c:	6939      	ldr	r1, [r7, #16]
 8000d2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	2203      	movs	r2, #3
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43db      	mvns	r3, r3
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	4013      	ands	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 0203 	and.w	r2, r3, #3
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f000 80b2 	beq.w	8000ed8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d74:	4b61      	ldr	r3, [pc, #388]	; (8000efc <HAL_GPIO_Init+0x2fc>)
 8000d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d78:	4a60      	ldr	r2, [pc, #384]	; (8000efc <HAL_GPIO_Init+0x2fc>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	6613      	str	r3, [r2, #96]	; 0x60
 8000d80:	4b5e      	ldr	r3, [pc, #376]	; (8000efc <HAL_GPIO_Init+0x2fc>)
 8000d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d8c:	4a5c      	ldr	r2, [pc, #368]	; (8000f00 <HAL_GPIO_Init+0x300>)
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	089b      	lsrs	r3, r3, #2
 8000d92:	3302      	adds	r3, #2
 8000d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	f003 0303 	and.w	r3, r3, #3
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	220f      	movs	r2, #15
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000db6:	d02b      	beq.n	8000e10 <HAL_GPIO_Init+0x210>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a52      	ldr	r2, [pc, #328]	; (8000f04 <HAL_GPIO_Init+0x304>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d025      	beq.n	8000e0c <HAL_GPIO_Init+0x20c>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a51      	ldr	r2, [pc, #324]	; (8000f08 <HAL_GPIO_Init+0x308>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d01f      	beq.n	8000e08 <HAL_GPIO_Init+0x208>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a50      	ldr	r2, [pc, #320]	; (8000f0c <HAL_GPIO_Init+0x30c>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d019      	beq.n	8000e04 <HAL_GPIO_Init+0x204>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a4f      	ldr	r2, [pc, #316]	; (8000f10 <HAL_GPIO_Init+0x310>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d013      	beq.n	8000e00 <HAL_GPIO_Init+0x200>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a4e      	ldr	r2, [pc, #312]	; (8000f14 <HAL_GPIO_Init+0x314>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d00d      	beq.n	8000dfc <HAL_GPIO_Init+0x1fc>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a4d      	ldr	r2, [pc, #308]	; (8000f18 <HAL_GPIO_Init+0x318>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d007      	beq.n	8000df8 <HAL_GPIO_Init+0x1f8>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a4c      	ldr	r2, [pc, #304]	; (8000f1c <HAL_GPIO_Init+0x31c>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d101      	bne.n	8000df4 <HAL_GPIO_Init+0x1f4>
 8000df0:	2307      	movs	r3, #7
 8000df2:	e00e      	b.n	8000e12 <HAL_GPIO_Init+0x212>
 8000df4:	2308      	movs	r3, #8
 8000df6:	e00c      	b.n	8000e12 <HAL_GPIO_Init+0x212>
 8000df8:	2306      	movs	r3, #6
 8000dfa:	e00a      	b.n	8000e12 <HAL_GPIO_Init+0x212>
 8000dfc:	2305      	movs	r3, #5
 8000dfe:	e008      	b.n	8000e12 <HAL_GPIO_Init+0x212>
 8000e00:	2304      	movs	r3, #4
 8000e02:	e006      	b.n	8000e12 <HAL_GPIO_Init+0x212>
 8000e04:	2303      	movs	r3, #3
 8000e06:	e004      	b.n	8000e12 <HAL_GPIO_Init+0x212>
 8000e08:	2302      	movs	r3, #2
 8000e0a:	e002      	b.n	8000e12 <HAL_GPIO_Init+0x212>
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	e000      	b.n	8000e12 <HAL_GPIO_Init+0x212>
 8000e10:	2300      	movs	r3, #0
 8000e12:	697a      	ldr	r2, [r7, #20]
 8000e14:	f002 0203 	and.w	r2, r2, #3
 8000e18:	0092      	lsls	r2, r2, #2
 8000e1a:	4093      	lsls	r3, r2
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e22:	4937      	ldr	r1, [pc, #220]	; (8000f00 <HAL_GPIO_Init+0x300>)
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	089b      	lsrs	r3, r3, #2
 8000e28:	3302      	adds	r3, #2
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e30:	4b3b      	ldr	r3, [pc, #236]	; (8000f20 <HAL_GPIO_Init+0x320>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d003      	beq.n	8000e54 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e54:	4a32      	ldr	r2, [pc, #200]	; (8000f20 <HAL_GPIO_Init+0x320>)
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000e5a:	4b31      	ldr	r3, [pc, #196]	; (8000f20 <HAL_GPIO_Init+0x320>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	43db      	mvns	r3, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e7e:	4a28      	ldr	r2, [pc, #160]	; (8000f20 <HAL_GPIO_Init+0x320>)
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e84:	4b26      	ldr	r3, [pc, #152]	; (8000f20 <HAL_GPIO_Init+0x320>)
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4013      	ands	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d003      	beq.n	8000ea8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ea8:	4a1d      	ldr	r2, [pc, #116]	; (8000f20 <HAL_GPIO_Init+0x320>)
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000eae:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <HAL_GPIO_Init+0x320>)
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ed2:	4a13      	ldr	r2, [pc, #76]	; (8000f20 <HAL_GPIO_Init+0x320>)
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	3301      	adds	r3, #1
 8000edc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	f47f ae91 	bne.w	8000c10 <HAL_GPIO_Init+0x10>
  }
}
 8000eee:	bf00      	nop
 8000ef0:	371c      	adds	r7, #28
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	40021000 	.word	0x40021000
 8000f00:	40010000 	.word	0x40010000
 8000f04:	48000400 	.word	0x48000400
 8000f08:	48000800 	.word	0x48000800
 8000f0c:	48000c00 	.word	0x48000c00
 8000f10:	48001000 	.word	0x48001000
 8000f14:	48001400 	.word	0x48001400
 8000f18:	48001800 	.word	0x48001800
 8000f1c:	48001c00 	.word	0x48001c00
 8000f20:	40010400 	.word	0x40010400

08000f24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f28:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <HAL_PWREx_GetVoltageRange+0x3c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f34:	d102      	bne.n	8000f3c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8000f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f3a:	e00b      	b.n	8000f54 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <HAL_PWREx_GetVoltageRange+0x3c>)
 8000f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f4a:	d102      	bne.n	8000f52 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8000f4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f50:	e000      	b.n	8000f54 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8000f52:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	40007000 	.word	0x40007000

08000f64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d141      	bne.n	8000ff6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f72:	4b4b      	ldr	r3, [pc, #300]	; (80010a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f7e:	d131      	bne.n	8000fe4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f80:	4b47      	ldr	r3, [pc, #284]	; (80010a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f86:	4a46      	ldr	r2, [pc, #280]	; (80010a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f90:	4b43      	ldr	r3, [pc, #268]	; (80010a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f98:	4a41      	ldr	r2, [pc, #260]	; (80010a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000fa0:	4b40      	ldr	r3, [pc, #256]	; (80010a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2232      	movs	r2, #50	; 0x32
 8000fa6:	fb02 f303 	mul.w	r3, r2, r3
 8000faa:	4a3f      	ldr	r2, [pc, #252]	; (80010a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000fac:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb0:	0c9b      	lsrs	r3, r3, #18
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fb6:	e002      	b.n	8000fbe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fbe:	4b38      	ldr	r3, [pc, #224]	; (80010a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fca:	d102      	bne.n	8000fd2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1f2      	bne.n	8000fb8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fd2:	4b33      	ldr	r3, [pc, #204]	; (80010a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fde:	d158      	bne.n	8001092 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e057      	b.n	8001094 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000fe4:	4b2e      	ldr	r3, [pc, #184]	; (80010a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fea:	4a2d      	ldr	r2, [pc, #180]	; (80010a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ff0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000ff4:	e04d      	b.n	8001092 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ffc:	d141      	bne.n	8001082 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000ffe:	4b28      	ldr	r3, [pc, #160]	; (80010a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800100a:	d131      	bne.n	8001070 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800100c:	4b24      	ldr	r3, [pc, #144]	; (80010a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800100e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001012:	4a23      	ldr	r2, [pc, #140]	; (80010a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001018:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800101c:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001024:	4a1e      	ldr	r2, [pc, #120]	; (80010a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001026:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800102a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800102c:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2232      	movs	r2, #50	; 0x32
 8001032:	fb02 f303 	mul.w	r3, r2, r3
 8001036:	4a1c      	ldr	r2, [pc, #112]	; (80010a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001038:	fba2 2303 	umull	r2, r3, r2, r3
 800103c:	0c9b      	lsrs	r3, r3, #18
 800103e:	3301      	adds	r3, #1
 8001040:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001042:	e002      	b.n	800104a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3b01      	subs	r3, #1
 8001048:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001056:	d102      	bne.n	800105e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1f2      	bne.n	8001044 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800106a:	d112      	bne.n	8001092 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e011      	b.n	8001094 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001070:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001072:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001076:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800107c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001080:	e007      	b.n	8001092 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001082:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800108a:	4a05      	ldr	r2, [pc, #20]	; (80010a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800108c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001090:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	40007000 	.word	0x40007000
 80010a4:	20000000 	.word	0x20000000
 80010a8:	431bde83 	.word	0x431bde83

080010ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d102      	bne.n	80010c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	f000 bc16 	b.w	80018ec <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010c0:	4ba0      	ldr	r3, [pc, #640]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	f003 030c 	and.w	r3, r3, #12
 80010c8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010ca:	4b9e      	ldr	r3, [pc, #632]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 0310 	and.w	r3, r3, #16
 80010dc:	2b00      	cmp	r3, #0
 80010de:	f000 80e4 	beq.w	80012aa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d007      	beq.n	80010f8 <HAL_RCC_OscConfig+0x4c>
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	2b0c      	cmp	r3, #12
 80010ec:	f040 808b 	bne.w	8001206 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	f040 8087 	bne.w	8001206 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010f8:	4b92      	ldr	r3, [pc, #584]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d005      	beq.n	8001110 <HAL_RCC_OscConfig+0x64>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d101      	bne.n	8001110 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e3ed      	b.n	80018ec <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a1a      	ldr	r2, [r3, #32]
 8001114:	4b8b      	ldr	r3, [pc, #556]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0308 	and.w	r3, r3, #8
 800111c:	2b00      	cmp	r3, #0
 800111e:	d004      	beq.n	800112a <HAL_RCC_OscConfig+0x7e>
 8001120:	4b88      	ldr	r3, [pc, #544]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001128:	e005      	b.n	8001136 <HAL_RCC_OscConfig+0x8a>
 800112a:	4b86      	ldr	r3, [pc, #536]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 800112c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001130:	091b      	lsrs	r3, r3, #4
 8001132:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001136:	4293      	cmp	r3, r2
 8001138:	d223      	bcs.n	8001182 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6a1b      	ldr	r3, [r3, #32]
 800113e:	4618      	mov	r0, r3
 8001140:	f000 fd9c 	bl	8001c7c <RCC_SetFlashLatencyFromMSIRange>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e3ce      	b.n	80018ec <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800114e:	4b7d      	ldr	r3, [pc, #500]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a7c      	ldr	r2, [pc, #496]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 8001154:	f043 0308 	orr.w	r3, r3, #8
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	4b7a      	ldr	r3, [pc, #488]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6a1b      	ldr	r3, [r3, #32]
 8001166:	4977      	ldr	r1, [pc, #476]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 8001168:	4313      	orrs	r3, r2
 800116a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800116c:	4b75      	ldr	r3, [pc, #468]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	69db      	ldr	r3, [r3, #28]
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	4972      	ldr	r1, [pc, #456]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 800117c:	4313      	orrs	r3, r2
 800117e:	604b      	str	r3, [r1, #4]
 8001180:	e025      	b.n	80011ce <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001182:	4b70      	ldr	r3, [pc, #448]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a6f      	ldr	r2, [pc, #444]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 8001188:	f043 0308 	orr.w	r3, r3, #8
 800118c:	6013      	str	r3, [r2, #0]
 800118e:	4b6d      	ldr	r3, [pc, #436]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6a1b      	ldr	r3, [r3, #32]
 800119a:	496a      	ldr	r1, [pc, #424]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 800119c:	4313      	orrs	r3, r2
 800119e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011a0:	4b68      	ldr	r3, [pc, #416]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	69db      	ldr	r3, [r3, #28]
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	4965      	ldr	r1, [pc, #404]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 80011b0:	4313      	orrs	r3, r2
 80011b2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d109      	bne.n	80011ce <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a1b      	ldr	r3, [r3, #32]
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 fd5c 	bl	8001c7c <RCC_SetFlashLatencyFromMSIRange>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e38e      	b.n	80018ec <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80011ce:	f000 fcbf 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
 80011d2:	4601      	mov	r1, r0
 80011d4:	4b5b      	ldr	r3, [pc, #364]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	091b      	lsrs	r3, r3, #4
 80011da:	f003 030f 	and.w	r3, r3, #15
 80011de:	4a5a      	ldr	r2, [pc, #360]	; (8001348 <HAL_RCC_OscConfig+0x29c>)
 80011e0:	5cd3      	ldrb	r3, [r2, r3]
 80011e2:	f003 031f 	and.w	r3, r3, #31
 80011e6:	fa21 f303 	lsr.w	r3, r1, r3
 80011ea:	4a58      	ldr	r2, [pc, #352]	; (800134c <HAL_RCC_OscConfig+0x2a0>)
 80011ec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80011ee:	4b58      	ldr	r3, [pc, #352]	; (8001350 <HAL_RCC_OscConfig+0x2a4>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff fa3e 	bl	8000674 <HAL_InitTick>
 80011f8:	4603      	mov	r3, r0
 80011fa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d052      	beq.n	80012a8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	e372      	b.n	80018ec <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d032      	beq.n	8001274 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800120e:	4b4d      	ldr	r3, [pc, #308]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a4c      	ldr	r2, [pc, #304]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800121a:	f7ff fa7b 	bl	8000714 <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001220:	e008      	b.n	8001234 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001222:	f7ff fa77 	bl	8000714 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e35b      	b.n	80018ec <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001234:	4b43      	ldr	r3, [pc, #268]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0f0      	beq.n	8001222 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001240:	4b40      	ldr	r3, [pc, #256]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a3f      	ldr	r2, [pc, #252]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 8001246:	f043 0308 	orr.w	r3, r3, #8
 800124a:	6013      	str	r3, [r2, #0]
 800124c:	4b3d      	ldr	r3, [pc, #244]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a1b      	ldr	r3, [r3, #32]
 8001258:	493a      	ldr	r1, [pc, #232]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 800125a:	4313      	orrs	r3, r2
 800125c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800125e:	4b39      	ldr	r3, [pc, #228]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	021b      	lsls	r3, r3, #8
 800126c:	4935      	ldr	r1, [pc, #212]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 800126e:	4313      	orrs	r3, r2
 8001270:	604b      	str	r3, [r1, #4]
 8001272:	e01a      	b.n	80012aa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001274:	4b33      	ldr	r3, [pc, #204]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a32      	ldr	r2, [pc, #200]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 800127a:	f023 0301 	bic.w	r3, r3, #1
 800127e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001280:	f7ff fa48 	bl	8000714 <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001288:	f7ff fa44 	bl	8000714 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e328      	b.n	80018ec <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800129a:	4b2a      	ldr	r3, [pc, #168]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1f0      	bne.n	8001288 <HAL_RCC_OscConfig+0x1dc>
 80012a6:	e000      	b.n	80012aa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d073      	beq.n	800139e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	2b08      	cmp	r3, #8
 80012ba:	d005      	beq.n	80012c8 <HAL_RCC_OscConfig+0x21c>
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	2b0c      	cmp	r3, #12
 80012c0:	d10e      	bne.n	80012e0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	2b03      	cmp	r3, #3
 80012c6:	d10b      	bne.n	80012e0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c8:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d063      	beq.n	800139c <HAL_RCC_OscConfig+0x2f0>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d15f      	bne.n	800139c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e305      	b.n	80018ec <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012e8:	d106      	bne.n	80012f8 <HAL_RCC_OscConfig+0x24c>
 80012ea:	4b16      	ldr	r3, [pc, #88]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a15      	ldr	r2, [pc, #84]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 80012f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	e01d      	b.n	8001334 <HAL_RCC_OscConfig+0x288>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001300:	d10c      	bne.n	800131c <HAL_RCC_OscConfig+0x270>
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a0f      	ldr	r2, [pc, #60]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 8001308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a0c      	ldr	r2, [pc, #48]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 8001314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	e00b      	b.n	8001334 <HAL_RCC_OscConfig+0x288>
 800131c:	4b09      	ldr	r3, [pc, #36]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a08      	ldr	r2, [pc, #32]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 8001322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a05      	ldr	r2, [pc, #20]	; (8001344 <HAL_RCC_OscConfig+0x298>)
 800132e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001332:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d01b      	beq.n	8001374 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800133c:	f7ff f9ea 	bl	8000714 <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001342:	e010      	b.n	8001366 <HAL_RCC_OscConfig+0x2ba>
 8001344:	40021000 	.word	0x40021000
 8001348:	08001e70 	.word	0x08001e70
 800134c:	20000000 	.word	0x20000000
 8001350:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001354:	f7ff f9de 	bl	8000714 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b64      	cmp	r3, #100	; 0x64
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e2c2      	b.n	80018ec <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001366:	4baf      	ldr	r3, [pc, #700]	; (8001624 <HAL_RCC_OscConfig+0x578>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0f0      	beq.n	8001354 <HAL_RCC_OscConfig+0x2a8>
 8001372:	e014      	b.n	800139e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001374:	f7ff f9ce 	bl	8000714 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800137c:	f7ff f9ca 	bl	8000714 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b64      	cmp	r3, #100	; 0x64
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e2ae      	b.n	80018ec <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800138e:	4ba5      	ldr	r3, [pc, #660]	; (8001624 <HAL_RCC_OscConfig+0x578>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f0      	bne.n	800137c <HAL_RCC_OscConfig+0x2d0>
 800139a:	e000      	b.n	800139e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800139c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d060      	beq.n	800146c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	2b04      	cmp	r3, #4
 80013ae:	d005      	beq.n	80013bc <HAL_RCC_OscConfig+0x310>
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	2b0c      	cmp	r3, #12
 80013b4:	d119      	bne.n	80013ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d116      	bne.n	80013ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013bc:	4b99      	ldr	r3, [pc, #612]	; (8001624 <HAL_RCC_OscConfig+0x578>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d005      	beq.n	80013d4 <HAL_RCC_OscConfig+0x328>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d101      	bne.n	80013d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e28b      	b.n	80018ec <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d4:	4b93      	ldr	r3, [pc, #588]	; (8001624 <HAL_RCC_OscConfig+0x578>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	061b      	lsls	r3, r3, #24
 80013e2:	4990      	ldr	r1, [pc, #576]	; (8001624 <HAL_RCC_OscConfig+0x578>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013e8:	e040      	b.n	800146c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d023      	beq.n	800143a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013f2:	4b8c      	ldr	r3, [pc, #560]	; (8001624 <HAL_RCC_OscConfig+0x578>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a8b      	ldr	r2, [pc, #556]	; (8001624 <HAL_RCC_OscConfig+0x578>)
 80013f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fe:	f7ff f989 	bl	8000714 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001406:	f7ff f985 	bl	8000714 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e269      	b.n	80018ec <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001418:	4b82      	ldr	r3, [pc, #520]	; (8001624 <HAL_RCC_OscConfig+0x578>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0f0      	beq.n	8001406 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001424:	4b7f      	ldr	r3, [pc, #508]	; (8001624 <HAL_RCC_OscConfig+0x578>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	061b      	lsls	r3, r3, #24
 8001432:	497c      	ldr	r1, [pc, #496]	; (8001624 <HAL_RCC_OscConfig+0x578>)
 8001434:	4313      	orrs	r3, r2
 8001436:	604b      	str	r3, [r1, #4]
 8001438:	e018      	b.n	800146c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800143a:	4b7a      	ldr	r3, [pc, #488]	; (8001624 <HAL_RCC_OscConfig+0x578>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a79      	ldr	r2, [pc, #484]	; (8001624 <HAL_RCC_OscConfig+0x578>)
 8001440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001444:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001446:	f7ff f965 	bl	8000714 <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800144e:	f7ff f961 	bl	8000714 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e245      	b.n	80018ec <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001460:	4b70      	ldr	r3, [pc, #448]	; (8001624 <HAL_RCC_OscConfig+0x578>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1f0      	bne.n	800144e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0308 	and.w	r3, r3, #8
 8001474:	2b00      	cmp	r3, #0
 8001476:	d03c      	beq.n	80014f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d01c      	beq.n	80014ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001480:	4b68      	ldr	r3, [pc, #416]	; (8001624 <HAL_RCC_OscConfig+0x578>)
 8001482:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001486:	4a67      	ldr	r2, [pc, #412]	; (8001624 <HAL_RCC_OscConfig+0x578>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001490:	f7ff f940 	bl	8000714 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001498:	f7ff f93c 	bl	8000714 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e220      	b.n	80018ec <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014aa:	4b5e      	ldr	r3, [pc, #376]	; (8001624 <HAL_RCC_OscConfig+0x578>)
 80014ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d0ef      	beq.n	8001498 <HAL_RCC_OscConfig+0x3ec>
 80014b8:	e01b      	b.n	80014f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ba:	4b5a      	ldr	r3, [pc, #360]	; (8001624 <HAL_RCC_OscConfig+0x578>)
 80014bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014c0:	4a58      	ldr	r2, [pc, #352]	; (8001624 <HAL_RCC_OscConfig+0x578>)
 80014c2:	f023 0301 	bic.w	r3, r3, #1
 80014c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ca:	f7ff f923 	bl	8000714 <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d2:	f7ff f91f 	bl	8000714 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e203      	b.n	80018ec <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014e4:	4b4f      	ldr	r3, [pc, #316]	; (8001624 <HAL_RCC_OscConfig+0x578>)
 80014e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1ef      	bne.n	80014d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0304 	and.w	r3, r3, #4
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 80a6 	beq.w	800164c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001500:	2300      	movs	r3, #0
 8001502:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001504:	4b47      	ldr	r3, [pc, #284]	; (8001624 <HAL_RCC_OscConfig+0x578>)
 8001506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d10d      	bne.n	800152c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001510:	4b44      	ldr	r3, [pc, #272]	; (8001624 <HAL_RCC_OscConfig+0x578>)
 8001512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001514:	4a43      	ldr	r2, [pc, #268]	; (8001624 <HAL_RCC_OscConfig+0x578>)
 8001516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151a:	6593      	str	r3, [r2, #88]	; 0x58
 800151c:	4b41      	ldr	r3, [pc, #260]	; (8001624 <HAL_RCC_OscConfig+0x578>)
 800151e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001528:	2301      	movs	r3, #1
 800152a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800152c:	4b3e      	ldr	r3, [pc, #248]	; (8001628 <HAL_RCC_OscConfig+0x57c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001534:	2b00      	cmp	r3, #0
 8001536:	d118      	bne.n	800156a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001538:	4b3b      	ldr	r3, [pc, #236]	; (8001628 <HAL_RCC_OscConfig+0x57c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a3a      	ldr	r2, [pc, #232]	; (8001628 <HAL_RCC_OscConfig+0x57c>)
 800153e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001542:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001544:	f7ff f8e6 	bl	8000714 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800154c:	f7ff f8e2 	bl	8000714 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e1c6      	b.n	80018ec <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800155e:	4b32      	ldr	r3, [pc, #200]	; (8001628 <HAL_RCC_OscConfig+0x57c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0f0      	beq.n	800154c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d108      	bne.n	8001584 <HAL_RCC_OscConfig+0x4d8>
 8001572:	4b2c      	ldr	r3, [pc, #176]	; (8001624 <HAL_RCC_OscConfig+0x578>)
 8001574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001578:	4a2a      	ldr	r2, [pc, #168]	; (8001624 <HAL_RCC_OscConfig+0x578>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001582:	e024      	b.n	80015ce <HAL_RCC_OscConfig+0x522>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	2b05      	cmp	r3, #5
 800158a:	d110      	bne.n	80015ae <HAL_RCC_OscConfig+0x502>
 800158c:	4b25      	ldr	r3, [pc, #148]	; (8001624 <HAL_RCC_OscConfig+0x578>)
 800158e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001592:	4a24      	ldr	r2, [pc, #144]	; (8001624 <HAL_RCC_OscConfig+0x578>)
 8001594:	f043 0304 	orr.w	r3, r3, #4
 8001598:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800159c:	4b21      	ldr	r3, [pc, #132]	; (8001624 <HAL_RCC_OscConfig+0x578>)
 800159e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015a2:	4a20      	ldr	r2, [pc, #128]	; (8001624 <HAL_RCC_OscConfig+0x578>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015ac:	e00f      	b.n	80015ce <HAL_RCC_OscConfig+0x522>
 80015ae:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <HAL_RCC_OscConfig+0x578>)
 80015b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015b4:	4a1b      	ldr	r2, [pc, #108]	; (8001624 <HAL_RCC_OscConfig+0x578>)
 80015b6:	f023 0301 	bic.w	r3, r3, #1
 80015ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015be:	4b19      	ldr	r3, [pc, #100]	; (8001624 <HAL_RCC_OscConfig+0x578>)
 80015c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015c4:	4a17      	ldr	r2, [pc, #92]	; (8001624 <HAL_RCC_OscConfig+0x578>)
 80015c6:	f023 0304 	bic.w	r3, r3, #4
 80015ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d016      	beq.n	8001604 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d6:	f7ff f89d 	bl	8000714 <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015dc:	e00a      	b.n	80015f4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015de:	f7ff f899 	bl	8000714 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e17b      	b.n	80018ec <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015f4:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <HAL_RCC_OscConfig+0x578>)
 80015f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0ed      	beq.n	80015de <HAL_RCC_OscConfig+0x532>
 8001602:	e01a      	b.n	800163a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001604:	f7ff f886 	bl	8000714 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800160a:	e00f      	b.n	800162c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800160c:	f7ff f882 	bl	8000714 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	f241 3288 	movw	r2, #5000	; 0x1388
 800161a:	4293      	cmp	r3, r2
 800161c:	d906      	bls.n	800162c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e164      	b.n	80018ec <HAL_RCC_OscConfig+0x840>
 8001622:	bf00      	nop
 8001624:	40021000 	.word	0x40021000
 8001628:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800162c:	4ba8      	ldr	r3, [pc, #672]	; (80018d0 <HAL_RCC_OscConfig+0x824>)
 800162e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1e8      	bne.n	800160c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800163a:	7ffb      	ldrb	r3, [r7, #31]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d105      	bne.n	800164c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001640:	4ba3      	ldr	r3, [pc, #652]	; (80018d0 <HAL_RCC_OscConfig+0x824>)
 8001642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001644:	4aa2      	ldr	r2, [pc, #648]	; (80018d0 <HAL_RCC_OscConfig+0x824>)
 8001646:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800164a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0320 	and.w	r3, r3, #32
 8001654:	2b00      	cmp	r3, #0
 8001656:	d03c      	beq.n	80016d2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165c:	2b00      	cmp	r3, #0
 800165e:	d01c      	beq.n	800169a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001660:	4b9b      	ldr	r3, [pc, #620]	; (80018d0 <HAL_RCC_OscConfig+0x824>)
 8001662:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001666:	4a9a      	ldr	r2, [pc, #616]	; (80018d0 <HAL_RCC_OscConfig+0x824>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001670:	f7ff f850 	bl	8000714 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001678:	f7ff f84c 	bl	8000714 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e130      	b.n	80018ec <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800168a:	4b91      	ldr	r3, [pc, #580]	; (80018d0 <HAL_RCC_OscConfig+0x824>)
 800168c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d0ef      	beq.n	8001678 <HAL_RCC_OscConfig+0x5cc>
 8001698:	e01b      	b.n	80016d2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800169a:	4b8d      	ldr	r3, [pc, #564]	; (80018d0 <HAL_RCC_OscConfig+0x824>)
 800169c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016a0:	4a8b      	ldr	r2, [pc, #556]	; (80018d0 <HAL_RCC_OscConfig+0x824>)
 80016a2:	f023 0301 	bic.w	r3, r3, #1
 80016a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016aa:	f7ff f833 	bl	8000714 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016b2:	f7ff f82f 	bl	8000714 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e113      	b.n	80018ec <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016c4:	4b82      	ldr	r3, [pc, #520]	; (80018d0 <HAL_RCC_OscConfig+0x824>)
 80016c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1ef      	bne.n	80016b2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 8107 	beq.w	80018ea <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	f040 80cb 	bne.w	800187c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80016e6:	4b7a      	ldr	r3, [pc, #488]	; (80018d0 <HAL_RCC_OscConfig+0x824>)
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	f003 0203 	and.w	r2, r3, #3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d12c      	bne.n	8001754 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001704:	3b01      	subs	r3, #1
 8001706:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001708:	429a      	cmp	r2, r3
 800170a:	d123      	bne.n	8001754 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001716:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001718:	429a      	cmp	r2, r3
 800171a:	d11b      	bne.n	8001754 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001726:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001728:	429a      	cmp	r2, r3
 800172a:	d113      	bne.n	8001754 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001736:	085b      	lsrs	r3, r3, #1
 8001738:	3b01      	subs	r3, #1
 800173a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800173c:	429a      	cmp	r2, r3
 800173e:	d109      	bne.n	8001754 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	085b      	lsrs	r3, r3, #1
 800174c:	3b01      	subs	r3, #1
 800174e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001750:	429a      	cmp	r2, r3
 8001752:	d06d      	beq.n	8001830 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	2b0c      	cmp	r3, #12
 8001758:	d068      	beq.n	800182c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800175a:	4b5d      	ldr	r3, [pc, #372]	; (80018d0 <HAL_RCC_OscConfig+0x824>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d105      	bne.n	8001772 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001766:	4b5a      	ldr	r3, [pc, #360]	; (80018d0 <HAL_RCC_OscConfig+0x824>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e0ba      	b.n	80018ec <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001776:	4b56      	ldr	r3, [pc, #344]	; (80018d0 <HAL_RCC_OscConfig+0x824>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a55      	ldr	r2, [pc, #340]	; (80018d0 <HAL_RCC_OscConfig+0x824>)
 800177c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001780:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001782:	f7fe ffc7 	bl	8000714 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178a:	f7fe ffc3 	bl	8000714 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e0a7      	b.n	80018ec <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800179c:	4b4c      	ldr	r3, [pc, #304]	; (80018d0 <HAL_RCC_OscConfig+0x824>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1f0      	bne.n	800178a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017a8:	4b49      	ldr	r3, [pc, #292]	; (80018d0 <HAL_RCC_OscConfig+0x824>)
 80017aa:	68da      	ldr	r2, [r3, #12]
 80017ac:	4b49      	ldr	r3, [pc, #292]	; (80018d4 <HAL_RCC_OscConfig+0x828>)
 80017ae:	4013      	ands	r3, r2
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017b8:	3a01      	subs	r2, #1
 80017ba:	0112      	lsls	r2, r2, #4
 80017bc:	4311      	orrs	r1, r2
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017c2:	0212      	lsls	r2, r2, #8
 80017c4:	4311      	orrs	r1, r2
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80017ca:	0852      	lsrs	r2, r2, #1
 80017cc:	3a01      	subs	r2, #1
 80017ce:	0552      	lsls	r2, r2, #21
 80017d0:	4311      	orrs	r1, r2
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017d6:	0852      	lsrs	r2, r2, #1
 80017d8:	3a01      	subs	r2, #1
 80017da:	0652      	lsls	r2, r2, #25
 80017dc:	4311      	orrs	r1, r2
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017e2:	06d2      	lsls	r2, r2, #27
 80017e4:	430a      	orrs	r2, r1
 80017e6:	493a      	ldr	r1, [pc, #232]	; (80018d0 <HAL_RCC_OscConfig+0x824>)
 80017e8:	4313      	orrs	r3, r2
 80017ea:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80017ec:	4b38      	ldr	r3, [pc, #224]	; (80018d0 <HAL_RCC_OscConfig+0x824>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a37      	ldr	r2, [pc, #220]	; (80018d0 <HAL_RCC_OscConfig+0x824>)
 80017f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017f8:	4b35      	ldr	r3, [pc, #212]	; (80018d0 <HAL_RCC_OscConfig+0x824>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	4a34      	ldr	r2, [pc, #208]	; (80018d0 <HAL_RCC_OscConfig+0x824>)
 80017fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001802:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001804:	f7fe ff86 	bl	8000714 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800180c:	f7fe ff82 	bl	8000714 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e066      	b.n	80018ec <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800181e:	4b2c      	ldr	r3, [pc, #176]	; (80018d0 <HAL_RCC_OscConfig+0x824>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d0f0      	beq.n	800180c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800182a:	e05e      	b.n	80018ea <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e05d      	b.n	80018ec <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001830:	4b27      	ldr	r3, [pc, #156]	; (80018d0 <HAL_RCC_OscConfig+0x824>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d156      	bne.n	80018ea <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800183c:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <HAL_RCC_OscConfig+0x824>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a23      	ldr	r2, [pc, #140]	; (80018d0 <HAL_RCC_OscConfig+0x824>)
 8001842:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001846:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001848:	4b21      	ldr	r3, [pc, #132]	; (80018d0 <HAL_RCC_OscConfig+0x824>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	4a20      	ldr	r2, [pc, #128]	; (80018d0 <HAL_RCC_OscConfig+0x824>)
 800184e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001852:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001854:	f7fe ff5e 	bl	8000714 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185c:	f7fe ff5a 	bl	8000714 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e03e      	b.n	80018ec <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800186e:	4b18      	ldr	r3, [pc, #96]	; (80018d0 <HAL_RCC_OscConfig+0x824>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d0f0      	beq.n	800185c <HAL_RCC_OscConfig+0x7b0>
 800187a:	e036      	b.n	80018ea <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	2b0c      	cmp	r3, #12
 8001880:	d031      	beq.n	80018e6 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001882:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <HAL_RCC_OscConfig+0x824>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a12      	ldr	r2, [pc, #72]	; (80018d0 <HAL_RCC_OscConfig+0x824>)
 8001888:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800188c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800188e:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <HAL_RCC_OscConfig+0x824>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d105      	bne.n	80018a6 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800189a:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <HAL_RCC_OscConfig+0x824>)
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	4a0c      	ldr	r2, [pc, #48]	; (80018d0 <HAL_RCC_OscConfig+0x824>)
 80018a0:	f023 0303 	bic.w	r3, r3, #3
 80018a4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80018a6:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <HAL_RCC_OscConfig+0x824>)
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	4a09      	ldr	r2, [pc, #36]	; (80018d0 <HAL_RCC_OscConfig+0x824>)
 80018ac:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80018b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b6:	f7fe ff2d 	bl	8000714 <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018bc:	e00c      	b.n	80018d8 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018be:	f7fe ff29 	bl	8000714 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d905      	bls.n	80018d8 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e00d      	b.n	80018ec <HAL_RCC_OscConfig+0x840>
 80018d0:	40021000 	.word	0x40021000
 80018d4:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_RCC_OscConfig+0x848>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1ec      	bne.n	80018be <HAL_RCC_OscConfig+0x812>
 80018e4:	e001      	b.n	80018ea <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e000      	b.n	80018ec <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3720      	adds	r7, #32
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40021000 	.word	0x40021000

080018f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e10f      	b.n	8001b30 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001910:	4b89      	ldr	r3, [pc, #548]	; (8001b38 <HAL_RCC_ClockConfig+0x240>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 030f 	and.w	r3, r3, #15
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d910      	bls.n	8001940 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191e:	4b86      	ldr	r3, [pc, #536]	; (8001b38 <HAL_RCC_ClockConfig+0x240>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f023 020f 	bic.w	r2, r3, #15
 8001926:	4984      	ldr	r1, [pc, #528]	; (8001b38 <HAL_RCC_ClockConfig+0x240>)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	4313      	orrs	r3, r2
 800192c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800192e:	4b82      	ldr	r3, [pc, #520]	; (8001b38 <HAL_RCC_ClockConfig+0x240>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 030f 	and.w	r3, r3, #15
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	429a      	cmp	r2, r3
 800193a:	d001      	beq.n	8001940 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e0f7      	b.n	8001b30 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	2b00      	cmp	r3, #0
 800194a:	f000 8089 	beq.w	8001a60 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b03      	cmp	r3, #3
 8001954:	d133      	bne.n	80019be <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001956:	4b79      	ldr	r3, [pc, #484]	; (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e0e4      	b.n	8001b30 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001966:	f000 f9e3 	bl	8001d30 <RCC_GetSysClockFreqFromPLLSource>
 800196a:	4602      	mov	r2, r0
 800196c:	4b74      	ldr	r3, [pc, #464]	; (8001b40 <HAL_RCC_ClockConfig+0x248>)
 800196e:	429a      	cmp	r2, r3
 8001970:	d955      	bls.n	8001a1e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001972:	4b72      	ldr	r3, [pc, #456]	; (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d10a      	bne.n	8001994 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800197e:	4b6f      	ldr	r3, [pc, #444]	; (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001986:	4a6d      	ldr	r2, [pc, #436]	; (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800198c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	617b      	str	r3, [r7, #20]
 8001992:	e044      	b.n	8001a1e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d03e      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x126>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d13a      	bne.n	8001a1e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80019a8:	4b64      	ldr	r3, [pc, #400]	; (8001b3c <HAL_RCC_ClockConfig+0x244>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019b0:	4a62      	ldr	r2, [pc, #392]	; (8001b3c <HAL_RCC_ClockConfig+0x244>)
 80019b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019b6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80019b8:	2380      	movs	r3, #128	; 0x80
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	e02f      	b.n	8001a1e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d107      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019c6:	4b5d      	ldr	r3, [pc, #372]	; (8001b3c <HAL_RCC_ClockConfig+0x244>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d115      	bne.n	80019fe <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e0ac      	b.n	8001b30 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d107      	bne.n	80019ee <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019de:	4b57      	ldr	r3, [pc, #348]	; (8001b3c <HAL_RCC_ClockConfig+0x244>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d109      	bne.n	80019fe <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e0a0      	b.n	8001b30 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019ee:	4b53      	ldr	r3, [pc, #332]	; (8001b3c <HAL_RCC_ClockConfig+0x244>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e098      	b.n	8001b30 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80019fe:	f000 f8a7 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
 8001a02:	4602      	mov	r2, r0
 8001a04:	4b4e      	ldr	r3, [pc, #312]	; (8001b40 <HAL_RCC_ClockConfig+0x248>)
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d909      	bls.n	8001a1e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a0a:	4b4c      	ldr	r3, [pc, #304]	; (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a12:	4a4a      	ldr	r2, [pc, #296]	; (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a18:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a1e:	4b47      	ldr	r3, [pc, #284]	; (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f023 0203 	bic.w	r2, r3, #3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	4944      	ldr	r1, [pc, #272]	; (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a30:	f7fe fe70 	bl	8000714 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a36:	e00a      	b.n	8001a4e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a38:	f7fe fe6c 	bl	8000714 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e070      	b.n	8001b30 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4e:	4b3b      	ldr	r3, [pc, #236]	; (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 020c 	and.w	r2, r3, #12
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d1eb      	bne.n	8001a38 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d009      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a6c:	4b33      	ldr	r3, [pc, #204]	; (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	4930      	ldr	r1, [pc, #192]	; (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	608b      	str	r3, [r1, #8]
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	2b80      	cmp	r3, #128	; 0x80
 8001a84:	d105      	bne.n	8001a92 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001a86:	4b2d      	ldr	r3, [pc, #180]	; (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	4a2c      	ldr	r2, [pc, #176]	; (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001a8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a90:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a92:	4b29      	ldr	r3, [pc, #164]	; (8001b38 <HAL_RCC_ClockConfig+0x240>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d210      	bcs.n	8001ac2 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa0:	4b25      	ldr	r3, [pc, #148]	; (8001b38 <HAL_RCC_ClockConfig+0x240>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f023 020f 	bic.w	r2, r3, #15
 8001aa8:	4923      	ldr	r1, [pc, #140]	; (8001b38 <HAL_RCC_ClockConfig+0x240>)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab0:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <HAL_RCC_ClockConfig+0x240>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 030f 	and.w	r3, r3, #15
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d001      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e036      	b.n	8001b30 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d008      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ace:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	4918      	ldr	r1, [pc, #96]	; (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0308 	and.w	r3, r3, #8
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d009      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aec:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	4910      	ldr	r1, [pc, #64]	; (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b00:	f000 f826 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
 8001b04:	4601      	mov	r1, r0
 8001b06:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	091b      	lsrs	r3, r3, #4
 8001b0c:	f003 030f 	and.w	r3, r3, #15
 8001b10:	4a0c      	ldr	r2, [pc, #48]	; (8001b44 <HAL_RCC_ClockConfig+0x24c>)
 8001b12:	5cd3      	ldrb	r3, [r2, r3]
 8001b14:	f003 031f 	and.w	r3, r3, #31
 8001b18:	fa21 f303 	lsr.w	r3, r1, r3
 8001b1c:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <HAL_RCC_ClockConfig+0x250>)
 8001b1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b20:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <HAL_RCC_ClockConfig+0x254>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7fe fda5 	bl	8000674 <HAL_InitTick>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	73fb      	strb	r3, [r7, #15]

  return status;
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40022000 	.word	0x40022000
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	04c4b400 	.word	0x04c4b400
 8001b44:	08001e70 	.word	0x08001e70
 8001b48:	20000000 	.word	0x20000000
 8001b4c:	20000004 	.word	0x20000004

08001b50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b089      	sub	sp, #36	; 0x24
 8001b54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b5e:	4b3d      	ldr	r3, [pc, #244]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 030c 	and.w	r3, r3, #12
 8001b66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b68:	4b3a      	ldr	r3, [pc, #232]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	f003 0303 	and.w	r3, r3, #3
 8001b70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d005      	beq.n	8001b84 <HAL_RCC_GetSysClockFreq+0x34>
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	2b0c      	cmp	r3, #12
 8001b7c:	d121      	bne.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d11e      	bne.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b84:	4b33      	ldr	r3, [pc, #204]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0308 	and.w	r3, r3, #8
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d107      	bne.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b90:	4b30      	ldr	r3, [pc, #192]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b96:	0a1b      	lsrs	r3, r3, #8
 8001b98:	f003 030f 	and.w	r3, r3, #15
 8001b9c:	61fb      	str	r3, [r7, #28]
 8001b9e:	e005      	b.n	8001bac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ba0:	4b2c      	ldr	r3, [pc, #176]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	091b      	lsrs	r3, r3, #4
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001bac:	4a2a      	ldr	r2, [pc, #168]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d10d      	bne.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bc0:	e00a      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	d102      	bne.n	8001bce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bc8:	4b24      	ldr	r3, [pc, #144]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bca:	61bb      	str	r3, [r7, #24]
 8001bcc:	e004      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	d101      	bne.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bd4:	4b22      	ldr	r3, [pc, #136]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bd6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	2b0c      	cmp	r3, #12
 8001bdc:	d133      	bne.n	8001c46 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bde:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x104>)
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d002      	beq.n	8001bf4 <HAL_RCC_GetSysClockFreq+0xa4>
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d003      	beq.n	8001bfa <HAL_RCC_GetSysClockFreq+0xaa>
 8001bf2:	e005      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bf4:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bf6:	617b      	str	r3, [r7, #20]
      break;
 8001bf8:	e005      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001bfa:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bfc:	617b      	str	r3, [r7, #20]
      break;
 8001bfe:	e002      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	617b      	str	r3, [r7, #20]
      break;
 8001c04:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c06:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	091b      	lsrs	r3, r3, #4
 8001c0c:	f003 030f 	and.w	r3, r3, #15
 8001c10:	3301      	adds	r3, #1
 8001c12:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c14:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	0a1b      	lsrs	r3, r3, #8
 8001c1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	fb02 f203 	mul.w	r2, r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c2c:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	0e5b      	lsrs	r3, r3, #25
 8001c32:	f003 0303 	and.w	r3, r3, #3
 8001c36:	3301      	adds	r3, #1
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c44:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c46:	69bb      	ldr	r3, [r7, #24]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3724      	adds	r7, #36	; 0x24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	40021000 	.word	0x40021000
 8001c58:	08001e80 	.word	0x08001e80
 8001c5c:	00f42400 	.word	0x00f42400
 8001c60:	007a1200 	.word	0x007a1200

08001c64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c68:	4b03      	ldr	r3, [pc, #12]	; (8001c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	20000000 	.word	0x20000000

08001c7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c84:	2300      	movs	r3, #0
 8001c86:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c88:	4b27      	ldr	r3, [pc, #156]	; (8001d28 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c94:	f7ff f946 	bl	8000f24 <HAL_PWREx_GetVoltageRange>
 8001c98:	6178      	str	r0, [r7, #20]
 8001c9a:	e014      	b.n	8001cc6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c9c:	4b22      	ldr	r3, [pc, #136]	; (8001d28 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca0:	4a21      	ldr	r2, [pc, #132]	; (8001d28 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ca8:	4b1f      	ldr	r3, [pc, #124]	; (8001d28 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001cb4:	f7ff f936 	bl	8000f24 <HAL_PWREx_GetVoltageRange>
 8001cb8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001cba:	4b1b      	ldr	r3, [pc, #108]	; (8001d28 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbe:	4a1a      	ldr	r2, [pc, #104]	; (8001d28 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001cc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cc4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ccc:	d10b      	bne.n	8001ce6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b80      	cmp	r3, #128	; 0x80
 8001cd2:	d913      	bls.n	8001cfc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2ba0      	cmp	r3, #160	; 0xa0
 8001cd8:	d902      	bls.n	8001ce0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cda:	2302      	movs	r3, #2
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	e00d      	b.n	8001cfc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	e00a      	b.n	8001cfc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b7f      	cmp	r3, #127	; 0x7f
 8001cea:	d902      	bls.n	8001cf2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001cec:	2302      	movs	r3, #2
 8001cee:	613b      	str	r3, [r7, #16]
 8001cf0:	e004      	b.n	8001cfc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b70      	cmp	r3, #112	; 0x70
 8001cf6:	d101      	bne.n	8001cfc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f023 020f 	bic.w	r2, r3, #15
 8001d04:	4909      	ldr	r1, [pc, #36]	; (8001d2c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d0c:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 030f 	and.w	r3, r3, #15
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d001      	beq.n	8001d1e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e000      	b.n	8001d20 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40022000 	.word	0x40022000

08001d30 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b087      	sub	sp, #28
 8001d34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8001d3a:	4b2d      	ldr	r3, [pc, #180]	; (8001df0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d118      	bne.n	8001d78 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d46:	4b2a      	ldr	r3, [pc, #168]	; (8001df0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d107      	bne.n	8001d62 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d52:	4b27      	ldr	r3, [pc, #156]	; (8001df0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d58:	0a1b      	lsrs	r3, r3, #8
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	e005      	b.n	8001d6e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d62:	4b23      	ldr	r3, [pc, #140]	; (8001df0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	091b      	lsrs	r3, r3, #4
 8001d68:	f003 030f 	and.w	r3, r3, #15
 8001d6c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d6e:	4a21      	ldr	r2, [pc, #132]	; (8001df4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d76:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d78:	4b1d      	ldr	r3, [pc, #116]	; (8001df0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f003 0303 	and.w	r3, r3, #3
 8001d80:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d002      	beq.n	8001d8e <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d003      	beq.n	8001d94 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8001d8c:	e005      	b.n	8001d9a <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001d8e:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8001d90:	613b      	str	r3, [r7, #16]
    break;
 8001d92:	e005      	b.n	8001da0 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001d94:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001d96:	613b      	str	r3, [r7, #16]
    break;
 8001d98:	e002      	b.n	8001da0 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	613b      	str	r3, [r7, #16]
    break;
 8001d9e:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001da0:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	091b      	lsrs	r3, r3, #4
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	3301      	adds	r3, #1
 8001dac:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001dae:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	0a1b      	lsrs	r3, r3, #8
 8001db4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	fb02 f203 	mul.w	r2, r2, r3
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc4:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	0e5b      	lsrs	r3, r3, #25
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dde:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001de0:	683b      	ldr	r3, [r7, #0]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	371c      	adds	r7, #28
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40021000 	.word	0x40021000
 8001df4:	08001e80 	.word	0x08001e80
 8001df8:	00f42400 	.word	0x00f42400
 8001dfc:	007a1200 	.word	0x007a1200

08001e00 <__libc_init_array>:
 8001e00:	b570      	push	{r4, r5, r6, lr}
 8001e02:	4e0d      	ldr	r6, [pc, #52]	; (8001e38 <__libc_init_array+0x38>)
 8001e04:	4c0d      	ldr	r4, [pc, #52]	; (8001e3c <__libc_init_array+0x3c>)
 8001e06:	1ba4      	subs	r4, r4, r6
 8001e08:	10a4      	asrs	r4, r4, #2
 8001e0a:	2500      	movs	r5, #0
 8001e0c:	42a5      	cmp	r5, r4
 8001e0e:	d109      	bne.n	8001e24 <__libc_init_array+0x24>
 8001e10:	4e0b      	ldr	r6, [pc, #44]	; (8001e40 <__libc_init_array+0x40>)
 8001e12:	4c0c      	ldr	r4, [pc, #48]	; (8001e44 <__libc_init_array+0x44>)
 8001e14:	f000 f820 	bl	8001e58 <_init>
 8001e18:	1ba4      	subs	r4, r4, r6
 8001e1a:	10a4      	asrs	r4, r4, #2
 8001e1c:	2500      	movs	r5, #0
 8001e1e:	42a5      	cmp	r5, r4
 8001e20:	d105      	bne.n	8001e2e <__libc_init_array+0x2e>
 8001e22:	bd70      	pop	{r4, r5, r6, pc}
 8001e24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e28:	4798      	blx	r3
 8001e2a:	3501      	adds	r5, #1
 8001e2c:	e7ee      	b.n	8001e0c <__libc_init_array+0xc>
 8001e2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e32:	4798      	blx	r3
 8001e34:	3501      	adds	r5, #1
 8001e36:	e7f2      	b.n	8001e1e <__libc_init_array+0x1e>
 8001e38:	08001eb0 	.word	0x08001eb0
 8001e3c:	08001eb0 	.word	0x08001eb0
 8001e40:	08001eb0 	.word	0x08001eb0
 8001e44:	08001eb4 	.word	0x08001eb4

08001e48 <memset>:
 8001e48:	4402      	add	r2, r0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d100      	bne.n	8001e52 <memset+0xa>
 8001e50:	4770      	bx	lr
 8001e52:	f803 1b01 	strb.w	r1, [r3], #1
 8001e56:	e7f9      	b.n	8001e4c <memset+0x4>

08001e58 <_init>:
 8001e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e5a:	bf00      	nop
 8001e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e5e:	bc08      	pop	{r3}
 8001e60:	469e      	mov	lr, r3
 8001e62:	4770      	bx	lr

08001e64 <_fini>:
 8001e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e66:	bf00      	nop
 8001e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e6a:	bc08      	pop	{r3}
 8001e6c:	469e      	mov	lr, r3
 8001e6e:	4770      	bx	lr
