
ECSE444_Lab1_G1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b0c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  08007cd0  08007cd0  00017cd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008060  08008060  00020374  2**0
                  CONTENTS
  4 .ARM          00000000  08008060  08008060  00020374  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008060  08008060  00020374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008060  08008060  00018060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008064  08008064  00018064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000374  20000000  08008068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000374  080083dc  00020374  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  080083dc  000203f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020374  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013528  00000000  00000000  000203a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b4f  00000000  00000000  000338cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ce8  00000000  00000000  00036420  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b88  00000000  00000000  00037108  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b6d8  00000000  00000000  00037c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c5ff  00000000  00000000  00063368  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001076b0  00000000  00000000  0006f967  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  00177017  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042d0  00000000  00000000  00177108  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000341f  00000000  00000000  0017b3d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000374 	.word	0x20000374
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08007cb4 	.word	0x08007cb4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000378 	.word	0x20000378
 80001fc:	08007cb4 	.word	0x08007cb4

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <c_kalmanfilter>:
#include "utility.h"
#include "main.h"
#include "math.h"


float c_kalmanfilter(self *filter, float *measurement){
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	6039      	str	r1, [r7, #0]
	filter->p = filter->p + filter->q;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	ed93 7a03 	vldr	s14, [r3, #12]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	edd3 7a00 	vldr	s15, [r3]
 8000c8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	edc3 7a03 	vstr	s15, [r3, #12]
	filter->k = filter->p/(filter->p + filter->r);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	edd3 6a03 	vldr	s13, [r3, #12]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	ed93 7a03 	vldr	s14, [r3, #12]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	edd3 7a01 	vldr	s15, [r3, #4]
 8000caa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	edc3 7a04 	vstr	s15, [r3, #16]
	filter->x = filter->x + filter->k*(*measurement - (filter->x));
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	ed93 7a02 	vldr	s14, [r3, #8]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	edd3 6a04 	vldr	s13, [r3, #16]
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	ed93 6a00 	vldr	s12, [r3]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	edd3 7a02 	vldr	s15, [r3, #8]
 8000cd0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000cd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	edc3 7a02 	vstr	s15, [r3, #8]
	filter->p = (1-filter->k)*filter->p;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	edd3 7a04 	vldr	s15, [r3, #16]
 8000ce8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000cec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	edd3 7a03 	vldr	s15, [r3, #12]
 8000cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	edc3 7a03 	vstr	s15, [r3, #12]
	return filter->x;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	ee07 3a90 	vmov	s15, r3
}
 8000d08:	eeb0 0a67 	vmov.f32	s0, s15
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
	...

08000d18 <c_analysis>:

void c_analysis(statistics *statistics, float *measurement, float *x){
 8000d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d1c:	b095      	sub	sp, #84	; 0x54
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	60f8      	str	r0, [r7, #12]
 8000d22:	60b9      	str	r1, [r7, #8]
 8000d24:	607a      	str	r2, [r7, #4]
 8000d26:	466b      	mov	r3, sp
 8000d28:	461e      	mov	r6, r3
//		sample size and initialization
		int size = SIZE;
 8000d2a:	2365      	movs	r3, #101	; 0x65
 8000d2c:	623b      	str	r3, [r7, #32]
		float difference[size];
 8000d2e:	6a38      	ldr	r0, [r7, #32]
 8000d30:	1e43      	subs	r3, r0, #1
 8000d32:	61fb      	str	r3, [r7, #28]
 8000d34:	4603      	mov	r3, r0
 8000d36:	4619      	mov	r1, r3
 8000d38:	f04f 0200 	mov.w	r2, #0
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	f04f 0400 	mov.w	r4, #0
 8000d44:	0154      	lsls	r4, r2, #5
 8000d46:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000d4a:	014b      	lsls	r3, r1, #5
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	4619      	mov	r1, r3
 8000d50:	f04f 0200 	mov.w	r2, #0
 8000d54:	f04f 0300 	mov.w	r3, #0
 8000d58:	f04f 0400 	mov.w	r4, #0
 8000d5c:	0154      	lsls	r4, r2, #5
 8000d5e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000d62:	014b      	lsls	r3, r1, #5
 8000d64:	4603      	mov	r3, r0
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	3303      	adds	r3, #3
 8000d6a:	3307      	adds	r3, #7
 8000d6c:	08db      	lsrs	r3, r3, #3
 8000d6e:	00db      	lsls	r3, r3, #3
 8000d70:	ebad 0d03 	sub.w	sp, sp, r3
 8000d74:	466b      	mov	r3, sp
 8000d76:	3303      	adds	r3, #3
 8000d78:	089b      	lsrs	r3, r3, #2
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	61bb      	str	r3, [r7, #24]
		float sum;
		int i;
//		difference values of state estimate with measured estimate
		for (i = 0; i<size; i++){
 8000d7e:	2300      	movs	r3, #0
 8000d80:	64bb      	str	r3, [r7, #72]	; 0x48
 8000d82:	e02e      	b.n	8000de2 <c_analysis+0xca>
			difference[i] = measurement[i] - x[i];
 8000d84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	68ba      	ldr	r2, [r7, #8]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	ed93 7a00 	vldr	s14, [r3]
 8000d90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	4413      	add	r3, r2
 8000d98:	edd3 7a00 	vldr	s15, [r3]
 8000d9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	4413      	add	r3, r2
 8000da8:	edc3 7a00 	vstr	s15, [r3]
			sum = sum+difference[i];
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	4413      	add	r3, r2
 8000db4:	edd3 7a00 	vldr	s15, [r3]
 8000db8:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000dbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dc0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
			statistics->difference[i] = difference[i];
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	4413      	add	r3, r2
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	68f9      	ldr	r1, [r7, #12]
 8000dd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000dd2:	3302      	adds	r3, #2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	440b      	add	r3, r1
 8000dd8:	3304      	adds	r3, #4
 8000dda:	601a      	str	r2, [r3, #0]
		for (i = 0; i<size; i++){
 8000ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000dde:	3301      	adds	r3, #1
 8000de0:	64bb      	str	r3, [r7, #72]	; 0x48
 8000de2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000de4:	6a3b      	ldr	r3, [r7, #32]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	dbcc      	blt.n	8000d84 <c_analysis+0x6c>
		}
//		compute average and store it in a struct
		statistics->avgDifference = sum/(float)size;
 8000dea:	6a3b      	ldr	r3, [r7, #32]
 8000dec:	ee07 3a90 	vmov	s15, r3
 8000df0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000df4:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8000df8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	edc3 7a00 	vstr	s15, [r3]

//		Needed to calculate stdDeviation for struct
		float variance;
		float varianceSum;
		for (i=0; i<size; i++){
 8000e02:	2300      	movs	r3, #0
 8000e04:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e06:	e02c      	b.n	8000e62 <c_analysis+0x14a>
			varianceSum = varianceSum + pow(difference[i] - (statistics->avgDifference), 2);
 8000e08:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000e0a:	f7ff fbb5 	bl	8000578 <__aeabi_f2d>
 8000e0e:	4604      	mov	r4, r0
 8000e10:	460d      	mov	r5, r1
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	4413      	add	r3, r2
 8000e1a:	ed93 7a00 	vldr	s14, [r3]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	edd3 7a00 	vldr	s15, [r3]
 8000e24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e28:	ee17 0a90 	vmov	r0, s15
 8000e2c:	f7ff fba4 	bl	8000578 <__aeabi_f2d>
 8000e30:	4602      	mov	r2, r0
 8000e32:	460b      	mov	r3, r1
 8000e34:	ed9f 1b64 	vldr	d1, [pc, #400]	; 8000fc8 <c_analysis+0x2b0>
 8000e38:	ec43 2b10 	vmov	d0, r2, r3
 8000e3c:	f005 fe3a 	bl	8006ab4 <pow>
 8000e40:	ec53 2b10 	vmov	r2, r3, d0
 8000e44:	4620      	mov	r0, r4
 8000e46:	4629      	mov	r1, r5
 8000e48:	f7ff fa38 	bl	80002bc <__adddf3>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	460c      	mov	r4, r1
 8000e50:	4618      	mov	r0, r3
 8000e52:	4621      	mov	r1, r4
 8000e54:	f7ff fec0 	bl	8000bd8 <__aeabi_d2f>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
		for (i=0; i<size; i++){
 8000e5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e5e:	3301      	adds	r3, #1
 8000e60:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000e64:	6a3b      	ldr	r3, [r7, #32]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	dbce      	blt.n	8000e08 <c_analysis+0xf0>
		}
		variance = varianceSum/(float)size;
 8000e6a:	6a3b      	ldr	r3, [r7, #32]
 8000e6c:	ee07 3a90 	vmov	s15, r3
 8000e70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e74:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8000e78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e7c:	edc7 7a05 	vstr	s15, [r7, #20]
		statistics->stdDeviation = sqrt(variance);
 8000e80:	6978      	ldr	r0, [r7, #20]
 8000e82:	f7ff fb79 	bl	8000578 <__aeabi_f2d>
 8000e86:	4603      	mov	r3, r0
 8000e88:	460c      	mov	r4, r1
 8000e8a:	ec44 3b10 	vmov	d0, r3, r4
 8000e8e:	f005 ff81 	bl	8006d94 <sqrt>
 8000e92:	ec54 3b10 	vmov	r3, r4, d0
 8000e96:	4618      	mov	r0, r3
 8000e98:	4621      	mov	r1, r4
 8000e9a:	f7ff fe9d 	bl	8000bd8 <__aeabi_d2f>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	605a      	str	r2, [r3, #4]

//		correlation array calculation
		uint32_t k;
		for (uint32_t i = 0; i< (2*size-1); i++){
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ea8:	e03a      	b.n	8000f20 <c_analysis+0x208>
			for (k=0;k<size; k++){
 8000eaa:	2300      	movs	r3, #0
 8000eac:	643b      	str	r3, [r7, #64]	; 0x40
 8000eae:	e030      	b.n	8000f12 <c_analysis+0x1fa>
				if((i-k) < 0 || (i-k)>size-1){
 8000eb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	6a3a      	ldr	r2, [r7, #32]
 8000eb8:	3a01      	subs	r2, #1
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d825      	bhi.n	8000f0a <c_analysis+0x1f2>
					continue;
				}else{
					statistics->correlation[i] += statistics->inputArray[k-i] * statistics->outputArray[k];
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ec2:	3368      	adds	r3, #104	; 0x68
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	4413      	add	r3, r2
 8000ec8:	ed93 7a00 	vldr	s14, [r3]
 8000ecc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	f203 235e 	addw	r3, r3, #606	; 0x25e
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	4413      	add	r3, r2
 8000edc:	3304      	adds	r3, #4
 8000ede:	edd3 6a00 	vldr	s13, [r3]
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ee6:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	4413      	add	r3, r2
 8000eee:	edd3 7a00 	vldr	s15, [r3]
 8000ef2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ef6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000efe:	3368      	adds	r3, #104	; 0x68
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	4413      	add	r3, r2
 8000f04:	edc3 7a00 	vstr	s15, [r3]
 8000f08:	e000      	b.n	8000f0c <c_analysis+0x1f4>
					continue;
 8000f0a:	bf00      	nop
			for (k=0;k<size; k++){
 8000f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f0e:	3301      	adds	r3, #1
 8000f10:	643b      	str	r3, [r7, #64]	; 0x40
 8000f12:	6a3b      	ldr	r3, [r7, #32]
 8000f14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d3ca      	bcc.n	8000eb0 <c_analysis+0x198>
		for (uint32_t i = 0; i< (2*size-1); i++){
 8000f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f20:	6a3b      	ldr	r3, [r7, #32]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	3b01      	subs	r3, #1
 8000f26:	461a      	mov	r2, r3
 8000f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d3bd      	bcc.n	8000eaa <c_analysis+0x192>
				}
			}
		}

//		convolution array calculation
		for (uint32_t i = 0; i< (2*size-1); i++){
 8000f2e:	2300      	movs	r3, #0
 8000f30:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f32:	e03e      	b.n	8000fb2 <c_analysis+0x29a>
			for (k=0;k<size; k++){
 8000f34:	2300      	movs	r3, #0
 8000f36:	643b      	str	r3, [r7, #64]	; 0x40
 8000f38:	e034      	b.n	8000fa4 <c_analysis+0x28c>
				if((i-k) < 0 || (i-k)>size-1){
 8000f3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	6a3a      	ldr	r2, [r7, #32]
 8000f42:	3a01      	subs	r2, #1
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d829      	bhi.n	8000f9c <c_analysis+0x284>
					continue;
				}else{
					statistics->convolution[i] += statistics->inputArray[i-k] * statistics->outputArray[k];
 8000f48:	68fa      	ldr	r2, [r7, #12]
 8000f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f4c:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4413      	add	r3, r2
 8000f54:	3304      	adds	r3, #4
 8000f56:	ed93 7a00 	vldr	s14, [r3]
 8000f5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	68fa      	ldr	r2, [r7, #12]
 8000f62:	f203 235e 	addw	r3, r3, #606	; 0x25e
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	4413      	add	r3, r2
 8000f6a:	3304      	adds	r3, #4
 8000f6c:	edd3 6a00 	vldr	s13, [r3]
 8000f70:	68fa      	ldr	r2, [r7, #12]
 8000f72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f74:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	4413      	add	r3, r2
 8000f7c:	edd3 7a00 	vldr	s15, [r3]
 8000f80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f88:	68fa      	ldr	r2, [r7, #12]
 8000f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f8c:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	3304      	adds	r3, #4
 8000f96:	edc3 7a00 	vstr	s15, [r3]
 8000f9a:	e000      	b.n	8000f9e <c_analysis+0x286>
					continue;
 8000f9c:	bf00      	nop
			for (k=0;k<size; k++){
 8000f9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	643b      	str	r3, [r7, #64]	; 0x40
 8000fa4:	6a3b      	ldr	r3, [r7, #32]
 8000fa6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d3c6      	bcc.n	8000f3a <c_analysis+0x222>
		for (uint32_t i = 0; i< (2*size-1); i++){
 8000fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fae:	3301      	adds	r3, #1
 8000fb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8000fb2:	6a3b      	ldr	r3, [r7, #32]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	461a      	mov	r2, r3
 8000fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d3b9      	bcc.n	8000f34 <c_analysis+0x21c>
		float sumX;
		float sumMeasurement;
		float sumXMeasurement;
		float squareSumX;
		float squareSumMeasurement;
		for (i=0; i<size; i++){
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8000fc4:	e079      	b.n	80010ba <c_analysis+0x3a2>
 8000fc6:	bf00      	nop
 8000fc8:	00000000 	.word	0x00000000
 8000fcc:	40000000 	.word	0x40000000
			sumX = sumX + x[i];
 8000fd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	edd3 7a00 	vldr	s15, [r3]
 8000fdc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8000fe0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fe4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			sumMeasurement = sumMeasurement + measurement[i];
 8000fe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	68ba      	ldr	r2, [r7, #8]
 8000fee:	4413      	add	r3, r2
 8000ff0:	edd3 7a00 	vldr	s15, [r3]
 8000ff4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000ff8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ffc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			sumXMeasurement = sumXMeasurement + x[i]*measurement[i];
 8001000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	4413      	add	r3, r2
 8001008:	ed93 7a00 	vldr	s14, [r3]
 800100c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	68ba      	ldr	r2, [r7, #8]
 8001012:	4413      	add	r3, r2
 8001014:	edd3 7a00 	vldr	s15, [r3]
 8001018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800101c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001020:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001024:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			squareSumX = squareSumX + pow(x[i], 2);
 8001028:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800102a:	f7ff faa5 	bl	8000578 <__aeabi_f2d>
 800102e:	4604      	mov	r4, r0
 8001030:	460d      	mov	r5, r1
 8001032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fa9b 	bl	8000578 <__aeabi_f2d>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	ed1f 1b20 	vldr	d1, [pc, #-128]	; 8000fc8 <c_analysis+0x2b0>
 800104a:	ec43 2b10 	vmov	d0, r2, r3
 800104e:	f005 fd31 	bl	8006ab4 <pow>
 8001052:	ec53 2b10 	vmov	r2, r3, d0
 8001056:	4620      	mov	r0, r4
 8001058:	4629      	mov	r1, r5
 800105a:	f7ff f92f 	bl	80002bc <__adddf3>
 800105e:	4603      	mov	r3, r0
 8001060:	460c      	mov	r4, r1
 8001062:	4618      	mov	r0, r3
 8001064:	4621      	mov	r1, r4
 8001066:	f7ff fdb7 	bl	8000bd8 <__aeabi_d2f>
 800106a:	4603      	mov	r3, r0
 800106c:	62bb      	str	r3, [r7, #40]	; 0x28
			squareSumMeasurement = squareSumMeasurement + pow(measurement[i], 2);
 800106e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001070:	f7ff fa82 	bl	8000578 <__aeabi_f2d>
 8001074:	4604      	mov	r4, r0
 8001076:	460d      	mov	r5, r1
 8001078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	68ba      	ldr	r2, [r7, #8]
 800107e:	4413      	add	r3, r2
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fa78 	bl	8000578 <__aeabi_f2d>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	ed1f 1b32 	vldr	d1, [pc, #-200]	; 8000fc8 <c_analysis+0x2b0>
 8001090:	ec43 2b10 	vmov	d0, r2, r3
 8001094:	f005 fd0e 	bl	8006ab4 <pow>
 8001098:	ec53 2b10 	vmov	r2, r3, d0
 800109c:	4620      	mov	r0, r4
 800109e:	4629      	mov	r1, r5
 80010a0:	f7ff f90c 	bl	80002bc <__adddf3>
 80010a4:	4603      	mov	r3, r0
 80010a6:	460c      	mov	r4, r1
 80010a8:	4618      	mov	r0, r3
 80010aa:	4621      	mov	r1, r4
 80010ac:	f7ff fd94 	bl	8000bd8 <__aeabi_d2f>
 80010b0:	4603      	mov	r3, r0
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
		for (i=0; i<size; i++){
 80010b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010b6:	3301      	adds	r3, #1
 80010b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80010ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80010bc:	6a3b      	ldr	r3, [r7, #32]
 80010be:	429a      	cmp	r2, r3
 80010c0:	db86      	blt.n	8000fd0 <c_analysis+0x2b8>
		}
		statistics->correlation_coeff = size*sumXMeasurement - (sumX)*(sumMeasurement);
 80010c2:	6a3b      	ldr	r3, [r7, #32]
 80010c4:	ee07 3a90 	vmov	s15, r3
 80010c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010cc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010d4:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80010d8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80010dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	edc3 7a02 	vstr	s15, [r3, #8]
		statistics->correlation_coeff = statistics->correlation_coeff/sqrt(
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fa42 	bl	8000578 <__aeabi_f2d>
 80010f4:	4604      	mov	r4, r0
 80010f6:	460d      	mov	r5, r1
				(size*squareSumX - pow(sumX, 2))
 80010f8:	6a3b      	ldr	r3, [r7, #32]
 80010fa:	ee07 3a90 	vmov	s15, r3
 80010fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001102:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800110a:	ee17 0a90 	vmov	r0, s15
 800110e:	f7ff fa33 	bl	8000578 <__aeabi_f2d>
 8001112:	4680      	mov	r8, r0
 8001114:	4689      	mov	r9, r1
 8001116:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001118:	f7ff fa2e 	bl	8000578 <__aeabi_f2d>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	ed1f 1b57 	vldr	d1, [pc, #-348]	; 8000fc8 <c_analysis+0x2b0>
 8001124:	ec43 2b10 	vmov	d0, r2, r3
 8001128:	f005 fcc4 	bl	8006ab4 <pow>
 800112c:	ec53 2b10 	vmov	r2, r3, d0
 8001130:	4640      	mov	r0, r8
 8001132:	4649      	mov	r1, r9
 8001134:	f7ff f8c0 	bl	80002b8 <__aeabi_dsub>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4690      	mov	r8, r2
 800113e:	4699      	mov	r9, r3
				*(size*squareSumMeasurement - pow(sumMeasurement, 2))
 8001140:	6a3b      	ldr	r3, [r7, #32]
 8001142:	ee07 3a90 	vmov	s15, r3
 8001146:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800114a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800114e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001152:	ee17 0a90 	vmov	r0, s15
 8001156:	f7ff fa0f 	bl	8000578 <__aeabi_f2d>
 800115a:	4682      	mov	sl, r0
 800115c:	468b      	mov	fp, r1
 800115e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001160:	f7ff fa0a 	bl	8000578 <__aeabi_f2d>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	ed1f 1b69 	vldr	d1, [pc, #-420]	; 8000fc8 <c_analysis+0x2b0>
 800116c:	ec43 2b10 	vmov	d0, r2, r3
 8001170:	f005 fca0 	bl	8006ab4 <pow>
 8001174:	ec53 2b10 	vmov	r2, r3, d0
 8001178:	4650      	mov	r0, sl
 800117a:	4659      	mov	r1, fp
 800117c:	f7ff f89c 	bl	80002b8 <__aeabi_dsub>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
		statistics->correlation_coeff = statistics->correlation_coeff/sqrt(
 8001184:	4640      	mov	r0, r8
 8001186:	4649      	mov	r1, r9
 8001188:	f7ff fa4e 	bl	8000628 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	ec43 2b17 	vmov	d7, r2, r3
 8001194:	eeb0 0a47 	vmov.f32	s0, s14
 8001198:	eef0 0a67 	vmov.f32	s1, s15
 800119c:	f005 fdfa 	bl	8006d94 <sqrt>
 80011a0:	ec53 2b10 	vmov	r2, r3, d0
 80011a4:	4620      	mov	r0, r4
 80011a6:	4629      	mov	r1, r5
 80011a8:	f7ff fb68 	bl	800087c <__aeabi_ddiv>
 80011ac:	4603      	mov	r3, r0
 80011ae:	460c      	mov	r4, r1
 80011b0:	4618      	mov	r0, r3
 80011b2:	4621      	mov	r1, r4
 80011b4:	f7ff fd10 	bl	8000bd8 <__aeabi_d2f>
 80011b8:	4602      	mov	r2, r0
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	46b5      	mov	sp, r6
				);
}
 80011c0:	bf00      	nop
 80011c2:	3754      	adds	r7, #84	; 0x54
 80011c4:	46bd      	mov	sp, r7
 80011c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011ca:	bf00      	nop

080011cc <cmsis_kalmanfilter>:
#include "utility.h"
#include "arm_math.h"
#include "math.h"

//BONUS
void cmsis_kalmanfilter(self *state, statistics *cmsis_stats, uint32_t i){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	; 0x28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
	float n = 0.0; //self.p + self.r
 80011d8:	f04f 0300 	mov.w	r3, #0
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
	float y = 0.0; //measurement - self.x
 80011de:	f04f 0300 	mov.w	r3, #0
 80011e2:	623b      	str	r3, [r7, #32]
	float z = 0.0; //self.k *(measurement -self.x)
 80011e4:	f04f 0300 	mov.w	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
	float m = 0.0; //(1-self.k)
 80011ea:	f04f 0300 	mov.w	r3, #0
 80011ee:	61bb      	str	r3, [r7, #24]
	float constant = 1;
 80011f0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80011f4:	617b      	str	r3, [r7, #20]

	arm_add_f32(&state->p,&state->q, &state->p, 1); //self.p = self.p + self.q
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f103 000c 	add.w	r0, r3, #12
 80011fc:	68f9      	ldr	r1, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f103 020c 	add.w	r2, r3, #12
 8001204:	2301      	movs	r3, #1
 8001206:	f003 f8a3 	bl	8004350 <arm_add_f32>
	arm_add_f32(&state->p,&state->r, &n, 1); //n = self.p + self.r
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	f103 000c 	add.w	r0, r3, #12
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	1d19      	adds	r1, r3, #4
 8001214:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001218:	2301      	movs	r3, #1
 800121a:	f003 f899 	bl	8004350 <arm_add_f32>
	(state->k) = (state->p)/n; //self.k = self.p / n
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	edd3 6a03 	vldr	s13, [r3, #12]
 8001224:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001228:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	edc3 7a04 	vstr	s15, [r3, #16]
	arm_sub_f32(&cmsis_stats->inputArray[i],&state->x, &y, 1); //y = measurement - self.x
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f203 235e 	addw	r3, r3, #606	; 0x25e
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	4413      	add	r3, r2
 800123e:	1d18      	adds	r0, r3, #4
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f103 0108 	add.w	r1, r3, #8
 8001246:	f107 0220 	add.w	r2, r7, #32
 800124a:	2301      	movs	r3, #1
 800124c:	f002 ffcc 	bl	80041e8 <arm_sub_f32>
	arm_mult_f32(&state->k,&y, &z, 1); //z = self.k * y
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f103 0010 	add.w	r0, r3, #16
 8001256:	f107 021c 	add.w	r2, r7, #28
 800125a:	f107 0120 	add.w	r1, r7, #32
 800125e:	2301      	movs	r3, #1
 8001260:	f003 f81c 	bl	800429c <arm_mult_f32>
	arm_add_f32(&state->x,&z, &state->x, 1);//self.x = self.x + z
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f103 0008 	add.w	r0, r3, #8
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f103 0208 	add.w	r2, r3, #8
 8001270:	f107 011c 	add.w	r1, r7, #28
 8001274:	2301      	movs	r3, #1
 8001276:	f003 f86b 	bl	8004350 <arm_add_f32>
	arm_sub_f32(&constant,&state->k, &m, 1);//m = (1-self.k)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f103 0110 	add.w	r1, r3, #16
 8001280:	f107 0218 	add.w	r2, r7, #24
 8001284:	f107 0014 	add.w	r0, r7, #20
 8001288:	2301      	movs	r3, #1
 800128a:	f002 ffad 	bl	80041e8 <arm_sub_f32>
	arm_mult_f32(&m,&state->q, &state->p, 1); //self.p = m*self.p
 800128e:	68f9      	ldr	r1, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f103 020c 	add.w	r2, r3, #12
 8001296:	f107 0018 	add.w	r0, r7, #24
 800129a:	2301      	movs	r3, #1
 800129c:	f002 fffe 	bl	800429c <arm_mult_f32>
}
 80012a0:	bf00      	nop
 80012a2:	3728      	adds	r7, #40	; 0x28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <cmsis_analysis>:


void cmsis_analysis(statistics *cmsis_stats, uint32_t size){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af02      	add	r7, sp, #8
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
	arm_sub_f32(&cmsis_stats->inputArray,&cmsis_stats->outputArray,&cmsis_stats->difference,size); //calculate (Input stream - Output stream)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f603 107c 	addw	r0, r3, #2428	; 0x97c
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f503 61fd 	add.w	r1, r3, #2024	; 0x7e8
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f103 020c 	add.w	r2, r3, #12
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	f002 ff8f 	bl	80041e8 <arm_sub_f32>
	arm_std_f32(&cmsis_stats->difference,size,&cmsis_stats->stdDeviation); //calculate standard deviation of diff
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f103 000c 	add.w	r0, r3, #12
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3304      	adds	r3, #4
 80012d4:	461a      	mov	r2, r3
 80012d6:	6839      	ldr	r1, [r7, #0]
 80012d8:	f002 f96e 	bl	80035b8 <arm_std_f32>
	arm_mean_f32(&cmsis_stats->difference,size,&cmsis_stats->avgDifference); //calculate average of diff
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	330c      	adds	r3, #12
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	6839      	ldr	r1, [r7, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f002 f9f1 	bl	80036cc <arm_mean_f32>
	arm_correlate_f32(&cmsis_stats->inputArray, size, &cmsis_stats->outputArray, size,&cmsis_stats->correlation); //calculate correlation of Input & Output stream
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f603 107c 	addw	r0, r3, #2428	; 0x97c
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f503 62fd 	add.w	r2, r3, #2024	; 0x7e8
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	6839      	ldr	r1, [r7, #0]
 8001302:	f002 fa21 	bl	8003748 <arm_correlate_f32>
	arm_conv_f32(&cmsis_stats->inputArray, size, &cmsis_stats->outputArray, size, &cmsis_stats->convolution); //calculate convolution of Input & Output stream
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f603 107c 	addw	r0, r3, #2428	; 0x97c
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f503 62fd 	add.w	r2, r3, #2024	; 0x7e8
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	6839      	ldr	r1, [r7, #0]
 800131e:	f002 fcc9 	bl	8003cb4 <arm_conv_f32>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <kalmanfilter>:
//.text identifies it as source code
//rodata marks it as read only, setting it to go into flash not SRAM
.section .text.rodata

kalmanfilter:
	PUSH {R4 - R9} //save register states
 800132a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	PUSH {LR} //preserve the origional link register state on the stack
 800132e:	b500      	push	{lr}

	MOV R6,0x0FF
 8001330:	f04f 06ff 	mov.w	r6, #255	; 0xff
	LSL R6, R6, #23 //set test bit
 8001334:	ea4f 56c6 	mov.w	r6, r6, lsl #23

	VLDR.f32 S0, [R1] //accept measurement value
 8001338:	ed91 0a00 	vldr	s0, [r1]
	VLDR.f32 S1,[R0]
 800133c:	edd0 0a00 	vldr	s1, [r0]
	VLDR.f32 S2, [R0, #4]
 8001340:	ed90 1a01 	vldr	s2, [r0, #4]
	VLDR.f32 S3, [R0, #8]
 8001344:	edd0 1a02 	vldr	s3, [r0, #8]
	VLDR.f32 S4, [R0, #12]
 8001348:	ed90 2a03 	vldr	s4, [r0, #12]
	VLDR.f32 S5, [R0, #16]
 800134c:	edd0 2a04 	vldr	s5, [r0, #16]
	POP {LR} //restore the origional link register state
 8001350:	f85d eb04 	ldr.w	lr, [sp], #4
	B update
 8001354:	e013      	b.n	800137e <update>

08001356 <validate>:


validate:
	AND R8, R7,R6 //perform AND operation on binary value in R7 and binary testbit in R6
 8001356:	ea07 0806 	and.w	r8, r7, r6
	LSL R8, R8, #1 //remove sign bit
 800135a:	ea4f 0848 	mov.w	r8, r8, lsl #1
	LSR R8, R8, #24 //remove mantisa
 800135e:	ea4f 6818 	mov.w	r8, r8, lsr #24
	CMP R8, #1 //min number in exponent
 8001362:	f1b8 0f01 	cmp.w	r8, #1
	BLT error
 8001366:	db03      	blt.n	8001370 <error>
	CMP R8, #254 //max number in exponent
 8001368:	f1b8 0ffe 	cmp.w	r8, #254	; 0xfe
	BGT error
 800136c:	dc00      	bgt.n	8001370 <error>
	BX LR
 800136e:	4770      	bx	lr

08001370 <error>:

error:
	MOV R9, 0 //set if invalid
 8001370:	f04f 0900 	mov.w	r9, #0
	STR R9, [R2]
 8001374:	f8c2 9000 	str.w	r9, [r2]
	POP {LR}
 8001378:	f85d eb04 	ldr.w	lr, [sp], #4
	B done
 800137c:	e02c      	b.n	80013d8 <done>

0800137e <update>:


update:
	PUSH {LR} //preserve origional LR state on stack
 800137e:	b500      	push	{lr}
	VADD.f32 S4, S4, S1 //self.p = self.p + self.q
 8001380:	ee32 2a20 	vadd.f32	s4, s4, s1

	VADD.f32 S6, S4, S2 //self.p + self.r
 8001384:	ee32 3a01 	vadd.f32	s6, s4, s2

	VMOV.f32 R7, S6
 8001388:	ee13 7a10 	vmov	r7, s6
	BL validate // validate (self.p + self.r) !=0
 800138c:	f7ff ffe3 	bl	8001356 <validate>

	VDIV.f32 S5, S4, S6 //self.k = self.p /(self.p + self.r)
 8001390:	eec2 2a03 	vdiv.f32	s5, s4, s6
	VSUB.f32 S7, S0, S3 //measurement - self.x
 8001394:	ee70 3a61 	vsub.f32	s7, s0, s3

	VMOV.f32 R7, S7
 8001398:	ee13 7a90 	vmov	r7, s7
	BL validate //validate (measurement -self.x) !=INF or overflow
 800139c:	f7ff ffdb 	bl	8001356 <validate>

	VMUL.f32 S8, S5, S7 //self.k * (measurement - self.x)
 80013a0:	ee22 4aa3 	vmul.f32	s8, s5, s7
	VMOV.f32 R7, S8
 80013a4:	ee14 7a10 	vmov	r7, s8
	BL validate // validate self.k * (measurement - self.x) !=INF or overflow
 80013a8:	f7ff ffd5 	bl	8001356 <validate>

	VADD.f32 S3, S3, S8	//self.x = self.x + self.k * (measurement - self.x)
 80013ac:	ee71 1a84 	vadd.f32	s3, s3, s8

	VMUL.f32 S9, S4, S5 //self.p * self.k
 80013b0:	ee62 4a22 	vmul.f32	s9, s4, s5

	VSUB.f32 S4, S4, S9 //self.p = self.p - (self.p * self.k)
 80013b4:	ee32 2a64 	vsub.f32	s4, s4, s9


	VSTR.f32 S1, [R0] //store states, self.q
 80013b8:	edc0 0a00 	vstr	s1, [r0]
	VSTR.f32 S2, [R0, #4] //self.r
 80013bc:	ed80 1a01 	vstr	s2, [r0, #4]
	VSTR.f32 S3, [R0, #8] //self.x
 80013c0:	edc0 1a02 	vstr	s3, [r0, #8]
	VSTR.f32 S4, [R0, #12] //self.p
 80013c4:	ed80 2a03 	vstr	s4, [r0, #12]
	VSTR.f32 S5, [R0, #16] //self.k
 80013c8:	edc0 2a04 	vstr	s5, [r0, #16]

	MOV R9, 1 //set if everything is valid
 80013cc:	f04f 0901 	mov.w	r9, #1
	STR R9, [R2]
 80013d0:	f8c2 9000 	str.w	r9, [r2]
	POP {LR} //restore origional LR state on stack
 80013d4:	f85d eb04 	ldr.w	lr, [sp], #4

080013d8 <done>:

done:
	POP {R4 - R9}
 80013d8:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX LR
 80013dc:	4770      	bx	lr
	...

080013e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e0:	b5b0      	push	{r4, r5, r7, lr}
 80013e2:	f5ad 5db3 	sub.w	sp, sp, #5728	; 0x1660
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	HAL_Init();
 80013ea:	f000 fbc0 	bl	8001b6e <HAL_Init>

	uint32_t size = sizeof(TEST_ARRAY)/sizeof(float);
 80013ee:	2365      	movs	r3, #101	; 0x65
 80013f0:	f507 52b3 	add.w	r2, r7, #5728	; 0x1660
 80013f4:	f102 0208 	add.w	r2, r2, #8
 80013f8:	6013      	str	r3, [r2, #0]
	uint32_t isValid = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f507 52b3 	add.w	r2, r7, #5728	; 0x1660
 8001400:	6013      	str	r3, [r2, #0]
	float asm_result = 0;
 8001402:	f04f 0300 	mov.w	r3, #0
 8001406:	f507 52b3 	add.w	r2, r7, #5728	; 0x1660
 800140a:	f102 0204 	add.w	r2, r2, #4
 800140e:	6013      	str	r3, [r2, #0]

	struct self asm_kalman_state = {
 8001410:	4bae      	ldr	r3, [pc, #696]	; (80016cc <main+0x2ec>)
 8001412:	f507 54b2 	add.w	r4, r7, #5696	; 0x1640
 8001416:	f104 040c 	add.w	r4, r4, #12
 800141a:	461d      	mov	r5, r3
 800141c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800141e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001420:	682b      	ldr	r3, [r5, #0]
 8001422:	6023      	str	r3, [r4, #0]
				0.1, //r
				5, //x
				0.1,//p
				0 //k
	};
	struct self c_kalman_state = {
 8001424:	4ba9      	ldr	r3, [pc, #676]	; (80016cc <main+0x2ec>)
 8001426:	f507 54b1 	add.w	r4, r7, #5664	; 0x1620
 800142a:	f104 0418 	add.w	r4, r4, #24
 800142e:	461d      	mov	r5, r3
 8001430:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001434:	682b      	ldr	r3, [r5, #0]
 8001436:	6023      	str	r3, [r4, #0]
				0.1, //r
				5, //x
				0.1,//p
				0 //k
	};
	struct self cmsis_kalman_state = {
 8001438:	4ba4      	ldr	r3, [pc, #656]	; (80016cc <main+0x2ec>)
 800143a:	f507 54b1 	add.w	r4, r7, #5664	; 0x1620
 800143e:	f104 0404 	add.w	r4, r4, #4
 8001442:	461d      	mov	r5, r3
 8001444:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001446:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001448:	682b      	ldr	r3, [r5, #0]
 800144a:	6023      	str	r3, [r4, #0]
				0.1, //r
				5.0, //x
				0.1,//p
				0 //k
	};
	struct statistics c_stats = {0.0, 0.0, 0.0}; //init with array elements set empty
 800144c:	f607 3314 	addw	r3, r7, #2836	; 0xb14
 8001450:	4618      	mov	r0, r3
 8001452:	f44f 6331 	mov.w	r3, #2832	; 0xb10
 8001456:	461a      	mov	r2, r3
 8001458:	2100      	movs	r1, #0
 800145a:	f002 fffd 	bl	8004458 <memset>
	struct statistics cmsis_stats = {0.0, 0.0, 0.0};
 800145e:	f107 0318 	add.w	r3, r7, #24
 8001462:	3b14      	subs	r3, #20
 8001464:	4618      	mov	r0, r3
 8001466:	f44f 6331 	mov.w	r3, #2832	; 0xb10
 800146a:	461a      	mov	r2, r3
 800146c:	2100      	movs	r1, #0
 800146e:	f002 fff3 	bl	8004458 <memset>


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001472:	f000 fb7c 	bl	8001b6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001476:	f000 f933 	bl	80016e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800147a:	f000 f9d1 	bl	8001820 <MX_GPIO_Init>
  MX_TIM2_Init();
 800147e:	f000 f981 	bl	8001784 <MX_TIM2_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		ITM_Port32(31) = 1; //timing analysis port
 8001482:	4b93      	ldr	r3, [pc, #588]	; (80016d0 <main+0x2f0>)
 8001484:	2201      	movs	r2, #1
 8001486:	601a      	str	r2, [r3, #0]
	    //ASM Implementation
		for(uint32_t i=0; i<size; i++){
 8001488:	2300      	movs	r3, #0
 800148a:	f507 52b3 	add.w	r2, r7, #5728	; 0x1660
 800148e:	f102 0214 	add.w	r2, r2, #20
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	e040      	b.n	8001518 <main+0x138>
			  kalmanfilter(&asm_kalman_state, &TEST_ARRAY[i], &isValid);
 8001496:	f507 53b3 	add.w	r3, r7, #5728	; 0x1660
 800149a:	f103 0314 	add.w	r3, r3, #20
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4a8c      	ldr	r2, [pc, #560]	; (80016d4 <main+0x2f4>)
 80014a4:	1899      	adds	r1, r3, r2
 80014a6:	f507 52b3 	add.w	r2, r7, #5728	; 0x1660
 80014aa:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80014ae:	f103 030c 	add.w	r3, r3, #12
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ff39 	bl	800132a <kalmanfilter>
			  if(isValid){
 80014b8:	f507 53b3 	add.w	r3, r7, #5728	; 0x1660
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d018      	beq.n	80014f4 <main+0x114>
				  asm_result = asm_kalman_state.x;
 80014c2:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80014c6:	f103 0314 	add.w	r3, r3, #20
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f507 52b3 	add.w	r2, r7, #5728	; 0x1660
 80014d0:	f102 0204 	add.w	r2, r2, #4
 80014d4:	6013      	str	r3, [r2, #0]
				  printf("Result (self.x) = %f\n",asm_result);
 80014d6:	f507 53b3 	add.w	r3, r7, #5728	; 0x1660
 80014da:	f103 0304 	add.w	r3, r3, #4
 80014de:	6818      	ldr	r0, [r3, #0]
 80014e0:	f7ff f84a 	bl	8000578 <__aeabi_f2d>
 80014e4:	4603      	mov	r3, r0
 80014e6:	460c      	mov	r4, r1
 80014e8:	461a      	mov	r2, r3
 80014ea:	4623      	mov	r3, r4
 80014ec:	487a      	ldr	r0, [pc, #488]	; (80016d8 <main+0x2f8>)
 80014ee:	f003 fc17 	bl	8004d20 <iprintf>
 80014f2:	e006      	b.n	8001502 <main+0x122>
			  }else{
				  printf("Invalid = %ld\n",isValid);
 80014f4:	f507 53b3 	add.w	r3, r7, #5728	; 0x1660
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4619      	mov	r1, r3
 80014fc:	4877      	ldr	r0, [pc, #476]	; (80016dc <main+0x2fc>)
 80014fe:	f003 fc0f 	bl	8004d20 <iprintf>
		for(uint32_t i=0; i<size; i++){
 8001502:	f507 53b3 	add.w	r3, r7, #5728	; 0x1660
 8001506:	f103 0314 	add.w	r3, r3, #20
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	3301      	adds	r3, #1
 800150e:	f507 52b3 	add.w	r2, r7, #5728	; 0x1660
 8001512:	f102 0214 	add.w	r2, r2, #20
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	f507 53b3 	add.w	r3, r7, #5728	; 0x1660
 800151c:	f103 0314 	add.w	r3, r3, #20
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	f507 53b3 	add.w	r3, r7, #5728	; 0x1660
 8001526:	f103 0308 	add.w	r3, r3, #8
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	429a      	cmp	r2, r3
 800152e:	d3b2      	bcc.n	8001496 <main+0xb6>
			  }
		}
		ITM_Port32(31) = 2;
 8001530:	4b67      	ldr	r3, [pc, #412]	; (80016d0 <main+0x2f0>)
 8001532:	2202      	movs	r2, #2
 8001534:	601a      	str	r2, [r3, #0]
		//C implementation
		for(uint32_t i=0; i<size; i++){
 8001536:	2300      	movs	r3, #0
 8001538:	f507 52b3 	add.w	r2, r7, #5728	; 0x1660
 800153c:	f102 0210 	add.w	r2, r2, #16
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	e03f      	b.n	80015c4 <main+0x1e4>
			c_kalmanfilter(&c_kalman_state, &TEST_ARRAY[i]);
 8001544:	f507 53b3 	add.w	r3, r7, #5728	; 0x1660
 8001548:	f103 0310 	add.w	r3, r3, #16
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4a60      	ldr	r2, [pc, #384]	; (80016d4 <main+0x2f4>)
 8001552:	441a      	add	r2, r3
 8001554:	f507 53b1 	add.w	r3, r7, #5664	; 0x1620
 8001558:	f103 0318 	add.w	r3, r3, #24
 800155c:	4611      	mov	r1, r2
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fb8a 	bl	8000c78 <c_kalmanfilter>
			c_stats.outputArray[i] = c_kalman_state.x;
 8001564:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	f607 3114 	addw	r1, r7, #2836	; 0xb14
 800156e:	f507 53b3 	add.w	r3, r7, #5728	; 0x1660
 8001572:	f103 0310 	add.w	r3, r3, #16
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	440b      	add	r3, r1
 8001580:	601a      	str	r2, [r3, #0]
			c_stats.inputArray[i] = TEST_ARRAY[i];
 8001582:	4a54      	ldr	r2, [pc, #336]	; (80016d4 <main+0x2f4>)
 8001584:	f507 53b3 	add.w	r3, r7, #5728	; 0x1660
 8001588:	f103 0310 	add.w	r3, r3, #16
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	f607 3114 	addw	r1, r7, #2836	; 0xb14
 8001598:	f507 53b3 	add.w	r3, r7, #5728	; 0x1660
 800159c:	f103 0310 	add.w	r3, r3, #16
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f203 235e 	addw	r3, r3, #606	; 0x25e
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	440b      	add	r3, r1
 80015aa:	3304      	adds	r3, #4
 80015ac:	601a      	str	r2, [r3, #0]
		for(uint32_t i=0; i<size; i++){
 80015ae:	f507 53b3 	add.w	r3, r7, #5728	; 0x1660
 80015b2:	f103 0310 	add.w	r3, r3, #16
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	3301      	adds	r3, #1
 80015ba:	f507 52b3 	add.w	r2, r7, #5728	; 0x1660
 80015be:	f102 0210 	add.w	r2, r2, #16
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	f507 53b3 	add.w	r3, r7, #5728	; 0x1660
 80015c8:	f103 0310 	add.w	r3, r3, #16
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	f507 53b3 	add.w	r3, r7, #5728	; 0x1660
 80015d2:	f103 0308 	add.w	r3, r3, #8
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d3b3      	bcc.n	8001544 <main+0x164>
		}
		//CMSIS-DSP
		ITM_Port32(31) = 3;
 80015dc:	4b3c      	ldr	r3, [pc, #240]	; (80016d0 <main+0x2f0>)
 80015de:	2203      	movs	r2, #3
 80015e0:	601a      	str	r2, [r3, #0]

		for(uint32_t i=0; i<size; i++){
 80015e2:	2300      	movs	r3, #0
 80015e4:	f507 52b3 	add.w	r2, r7, #5728	; 0x1660
 80015e8:	f102 020c 	add.w	r2, r2, #12
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	e042      	b.n	8001676 <main+0x296>
			cmsis_stats.inputArray[i] = TEST_ARRAY[i];
 80015f0:	4a38      	ldr	r2, [pc, #224]	; (80016d4 <main+0x2f4>)
 80015f2:	f507 53b3 	add.w	r3, r7, #5728	; 0x1660
 80015f6:	f103 030c 	add.w	r3, r3, #12
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	f107 0318 	add.w	r3, r7, #24
 8001606:	3b14      	subs	r3, #20
 8001608:	f507 51b3 	add.w	r1, r7, #5728	; 0x1660
 800160c:	f101 010c 	add.w	r1, r1, #12
 8001610:	6809      	ldr	r1, [r1, #0]
 8001612:	f201 215e 	addw	r1, r1, #606	; 0x25e
 8001616:	0089      	lsls	r1, r1, #2
 8001618:	440b      	add	r3, r1
 800161a:	3304      	adds	r3, #4
 800161c:	601a      	str	r2, [r3, #0]
			cmsis_kalmanfilter(&cmsis_kalman_state, &cmsis_stats, i);
 800161e:	f107 0318 	add.w	r3, r7, #24
 8001622:	3b14      	subs	r3, #20
 8001624:	f507 50b1 	add.w	r0, r7, #5664	; 0x1620
 8001628:	f100 0004 	add.w	r0, r0, #4
 800162c:	f507 52b3 	add.w	r2, r7, #5728	; 0x1660
 8001630:	f102 020c 	add.w	r2, r2, #12
 8001634:	6812      	ldr	r2, [r2, #0]
 8001636:	4619      	mov	r1, r3
 8001638:	f7ff fdc8 	bl	80011cc <cmsis_kalmanfilter>
			cmsis_stats.outputArray[i] = cmsis_kalman_state.x;
 800163c:	f507 53b1 	add.w	r3, r7, #5664	; 0x1620
 8001640:	f103 030c 	add.w	r3, r3, #12
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	f107 0318 	add.w	r3, r7, #24
 800164a:	3b14      	subs	r3, #20
 800164c:	f507 51b3 	add.w	r1, r7, #5728	; 0x1660
 8001650:	f101 010c 	add.w	r1, r1, #12
 8001654:	6809      	ldr	r1, [r1, #0]
 8001656:	f501 71fd 	add.w	r1, r1, #506	; 0x1fa
 800165a:	0089      	lsls	r1, r1, #2
 800165c:	440b      	add	r3, r1
 800165e:	601a      	str	r2, [r3, #0]
		for(uint32_t i=0; i<size; i++){
 8001660:	f507 53b3 	add.w	r3, r7, #5728	; 0x1660
 8001664:	f103 030c 	add.w	r3, r3, #12
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	3301      	adds	r3, #1
 800166c:	f507 52b3 	add.w	r2, r7, #5728	; 0x1660
 8001670:	f102 020c 	add.w	r2, r2, #12
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	f507 53b3 	add.w	r3, r7, #5728	; 0x1660
 800167a:	f103 030c 	add.w	r3, r3, #12
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	f507 53b3 	add.w	r3, r7, #5728	; 0x1660
 8001684:	f103 0308 	add.w	r3, r3, #8
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	429a      	cmp	r2, r3
 800168c:	d3b0      	bcc.n	80015f0 <main+0x210>
		}
		ITM_Port32(31) = 4;
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <main+0x2f0>)
 8001690:	2204      	movs	r2, #4
 8001692:	601a      	str	r2, [r3, #0]

		//C Ananlysis
		c_analysis(&c_stats,&TEST_ARRAY,&c_stats.outputArray);
 8001694:	f607 3314 	addw	r3, r7, #2836	; 0xb14
 8001698:	f503 62fd 	add.w	r2, r3, #2024	; 0x7e8
 800169c:	f607 3314 	addw	r3, r7, #2836	; 0xb14
 80016a0:	490c      	ldr	r1, [pc, #48]	; (80016d4 <main+0x2f4>)
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fb38 	bl	8000d18 <c_analysis>
		ITM_Port32(31) = 5;
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <main+0x2f0>)
 80016aa:	2205      	movs	r2, #5
 80016ac:	601a      	str	r2, [r3, #0]
		//CMSIS Analysis
		cmsis_analysis(&cmsis_stats, size);
 80016ae:	f107 0318 	add.w	r3, r7, #24
 80016b2:	3b14      	subs	r3, #20
 80016b4:	f507 52b3 	add.w	r2, r7, #5728	; 0x1660
 80016b8:	f102 0208 	add.w	r2, r2, #8
 80016bc:	6811      	ldr	r1, [r2, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fdf2 	bl	80012a8 <cmsis_analysis>
		ITM_Port32(31) = 6;
 80016c4:	4b02      	ldr	r3, [pc, #8]	; (80016d0 <main+0x2f0>)
 80016c6:	2206      	movs	r2, #6
 80016c8:	601a      	str	r2, [r3, #0]
  {
 80016ca:	e6da      	b.n	8001482 <main+0xa2>
 80016cc:	08007cf8 	.word	0x08007cf8
 80016d0:	e000007c 	.word	0xe000007c
 80016d4:	20000000 	.word	0x20000000
 80016d8:	08007cd0 	.word	0x08007cd0
 80016dc:	08007ce8 	.word	0x08007ce8

080016e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b096      	sub	sp, #88	; 0x58
 80016e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	2244      	movs	r2, #68	; 0x44
 80016ec:	2100      	movs	r1, #0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f002 feb2 	bl	8004458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f4:	463b      	mov	r3, r7
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
 8001700:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001702:	2000      	movs	r0, #0
 8001704:	f000 fbda 	bl	8001ebc <HAL_PWREx_ControlVoltageScaling>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800170e:	f000 f8ab 	bl	8001868 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001712:	2310      	movs	r3, #16
 8001714:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001716:	2301      	movs	r3, #1
 8001718:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800171e:	2360      	movs	r3, #96	; 0x60
 8001720:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001722:	2302      	movs	r3, #2
 8001724:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001726:	2301      	movs	r3, #1
 8001728:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800172a:	2301      	movs	r3, #1
 800172c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800172e:	233c      	movs	r3, #60	; 0x3c
 8001730:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001732:	2302      	movs	r3, #2
 8001734:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001736:	2302      	movs	r3, #2
 8001738:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800173a:	2302      	movs	r3, #2
 800173c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	4618      	mov	r0, r3
 8001744:	f000 fc5e 	bl	8002004 <HAL_RCC_OscConfig>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800174e:	f000 f88b 	bl	8001868 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001752:	230f      	movs	r3, #15
 8001754:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001756:	2303      	movs	r3, #3
 8001758:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001766:	463b      	mov	r3, r7
 8001768:	2105      	movs	r1, #5
 800176a:	4618      	mov	r0, r3
 800176c:	f001 f870 	bl	8002850 <HAL_RCC_ClockConfig>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001776:	f000 f877 	bl	8001868 <Error_Handler>
  }
}
 800177a:	bf00      	nop
 800177c:	3758      	adds	r7, #88	; 0x58
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800178a:	f107 0310 	add.w	r3, r7, #16
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017a2:	4b1e      	ldr	r3, [pc, #120]	; (800181c <MX_TIM2_Init+0x98>)
 80017a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 40000;
 80017aa:	4b1c      	ldr	r3, [pc, #112]	; (800181c <MX_TIM2_Init+0x98>)
 80017ac:	f649 4240 	movw	r2, #40000	; 0x9c40
 80017b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b2:	4b1a      	ldr	r3, [pc, #104]	; (800181c <MX_TIM2_Init+0x98>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000;
 80017b8:	4b18      	ldr	r3, [pc, #96]	; (800181c <MX_TIM2_Init+0x98>)
 80017ba:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80017be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c0:	4b16      	ldr	r3, [pc, #88]	; (800181c <MX_TIM2_Init+0x98>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <MX_TIM2_Init+0x98>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017cc:	4813      	ldr	r0, [pc, #76]	; (800181c <MX_TIM2_Init+0x98>)
 80017ce:	f001 fab7 	bl	8002d40 <HAL_TIM_Base_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80017d8:	f000 f846 	bl	8001868 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017e2:	f107 0310 	add.w	r3, r7, #16
 80017e6:	4619      	mov	r1, r3
 80017e8:	480c      	ldr	r0, [pc, #48]	; (800181c <MX_TIM2_Init+0x98>)
 80017ea:	f001 fc1f 	bl	800302c <HAL_TIM_ConfigClockSource>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80017f4:	f000 f838 	bl	8001868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f8:	2300      	movs	r3, #0
 80017fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	4619      	mov	r1, r3
 8001804:	4805      	ldr	r0, [pc, #20]	; (800181c <MX_TIM2_Init+0x98>)
 8001806:	f001 fe31 	bl	800346c <HAL_TIMEx_MasterConfigSynchronization>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001810:	f000 f82a 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001814:	bf00      	nop
 8001816:	3720      	adds	r7, #32
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	2000039c 	.word	0x2000039c

08001820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <MX_GPIO_Init+0x44>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182a:	4a0e      	ldr	r2, [pc, #56]	; (8001864 <MX_GPIO_Init+0x44>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001832:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <MX_GPIO_Init+0x44>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800183e:	4b09      	ldr	r3, [pc, #36]	; (8001864 <MX_GPIO_Init+0x44>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001842:	4a08      	ldr	r2, [pc, #32]	; (8001864 <MX_GPIO_Init+0x44>)
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <MX_GPIO_Init+0x44>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	603b      	str	r3, [r7, #0]
 8001854:	683b      	ldr	r3, [r7, #0]

}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	40021000 	.word	0x40021000

08001868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800186c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800186e:	e7fe      	b.n	800186e <Error_Handler+0x6>

08001870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001876:	4b0f      	ldr	r3, [pc, #60]	; (80018b4 <HAL_MspInit+0x44>)
 8001878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800187a:	4a0e      	ldr	r2, [pc, #56]	; (80018b4 <HAL_MspInit+0x44>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6613      	str	r3, [r2, #96]	; 0x60
 8001882:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <HAL_MspInit+0x44>)
 8001884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	607b      	str	r3, [r7, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <HAL_MspInit+0x44>)
 8001890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001892:	4a08      	ldr	r2, [pc, #32]	; (80018b4 <HAL_MspInit+0x44>)
 8001894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001898:	6593      	str	r3, [r2, #88]	; 0x58
 800189a:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <HAL_MspInit+0x44>)
 800189c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a2:	603b      	str	r3, [r7, #0]
 80018a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	40021000 	.word	0x40021000

080018b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018c8:	d113      	bne.n	80018f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018ca:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <HAL_TIM_Base_MspInit+0x44>)
 80018cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ce:	4a0b      	ldr	r2, [pc, #44]	; (80018fc <HAL_TIM_Base_MspInit+0x44>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6593      	str	r3, [r2, #88]	; 0x58
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <HAL_TIM_Base_MspInit+0x44>)
 80018d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2100      	movs	r1, #0
 80018e6:	201c      	movs	r0, #28
 80018e8:	f000 fa91 	bl	8001e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018ec:	201c      	movs	r0, #28
 80018ee:	f000 faaa 	bl	8001e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40021000 	.word	0x40021000

08001900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001904:	e7fe      	b.n	8001904 <NMI_Handler+0x4>

08001906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800190a:	e7fe      	b.n	800190a <HardFault_Handler+0x4>

0800190c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001910:	e7fe      	b.n	8001910 <MemManage_Handler+0x4>

08001912 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001916:	e7fe      	b.n	8001916 <BusFault_Handler+0x4>

08001918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800191c:	e7fe      	b.n	800191c <UsageFault_Handler+0x4>

0800191e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800194c:	f000 f964 	bl	8001c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}

08001954 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001958:	4802      	ldr	r0, [pc, #8]	; (8001964 <TIM2_IRQHandler+0x10>)
 800195a:	f001 fa48 	bl	8002dee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	2000039c 	.word	0x2000039c

08001968 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	e00a      	b.n	8001990 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800197a:	f3af 8000 	nop.w
 800197e:	4601      	mov	r1, r0
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	1c5a      	adds	r2, r3, #1
 8001984:	60ba      	str	r2, [r7, #8]
 8001986:	b2ca      	uxtb	r2, r1
 8001988:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	3301      	adds	r3, #1
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	429a      	cmp	r2, r3
 8001996:	dbf0      	blt.n	800197a <_read+0x12>
	}

return len;
 8001998:	687b      	ldr	r3, [r7, #4]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b086      	sub	sp, #24
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	60f8      	str	r0, [r7, #12]
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
 80019b2:	e009      	b.n	80019c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	60ba      	str	r2, [r7, #8]
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	3301      	adds	r3, #1
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	dbf1      	blt.n	80019b4 <_write+0x12>
	}
	return len;
 80019d0:	687b      	ldr	r3, [r7, #4]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <_close>:

int _close(int file)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
	return -1;
 80019e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
 80019fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a02:	605a      	str	r2, [r3, #4]
	return 0;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <_isatty>:

int _isatty(int file)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
	return 1;
 8001a1a:	2301      	movs	r3, #1
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
	return 0;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
	...

08001a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a4c:	4a14      	ldr	r2, [pc, #80]	; (8001aa0 <_sbrk+0x5c>)
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <_sbrk+0x60>)
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a58:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <_sbrk+0x64>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d102      	bne.n	8001a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <_sbrk+0x64>)
 8001a62:	4a12      	ldr	r2, [pc, #72]	; (8001aac <_sbrk+0x68>)
 8001a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a66:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <_sbrk+0x64>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d207      	bcs.n	8001a84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a74:	f002 fcc6 	bl	8004404 <__errno>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	230c      	movs	r3, #12
 8001a7c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a82:	e009      	b.n	8001a98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a84:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <_sbrk+0x64>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a8a:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <_sbrk+0x64>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <_sbrk+0x64>)
 8001a94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a96:	68fb      	ldr	r3, [r7, #12]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	200a0000 	.word	0x200a0000
 8001aa4:	00000400 	.word	0x00000400
 8001aa8:	20000390 	.word	0x20000390
 8001aac:	200003f0 	.word	0x200003f0

08001ab0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ab4:	4b17      	ldr	r3, [pc, #92]	; (8001b14 <SystemInit+0x64>)
 8001ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aba:	4a16      	ldr	r2, [pc, #88]	; (8001b14 <SystemInit+0x64>)
 8001abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ac0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001ac4:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <SystemInit+0x68>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a13      	ldr	r2, [pc, #76]	; (8001b18 <SystemInit+0x68>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001ad0:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <SystemInit+0x68>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001ad6:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <SystemInit+0x68>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a0f      	ldr	r2, [pc, #60]	; (8001b18 <SystemInit+0x68>)
 8001adc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001ae0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001ae4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001ae6:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <SystemInit+0x68>)
 8001ae8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001aec:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001aee:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <SystemInit+0x68>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a09      	ldr	r2, [pc, #36]	; (8001b18 <SystemInit+0x68>)
 8001af4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001afa:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <SystemInit+0x68>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b00:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <SystemInit+0x64>)
 8001b02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b06:	609a      	str	r2, [r3, #8]
#endif
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	e000ed00 	.word	0xe000ed00
 8001b18:	40021000 	.word	0x40021000

08001b1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b20:	f7ff ffc6 	bl	8001ab0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b24:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b26:	e003      	b.n	8001b30 <LoopCopyDataInit>

08001b28 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b28:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b2a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b2c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b2e:	3104      	adds	r1, #4

08001b30 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b30:	480a      	ldr	r0, [pc, #40]	; (8001b5c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b32:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b34:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b36:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b38:	d3f6      	bcc.n	8001b28 <CopyDataInit>
	ldr	r2, =_sbss
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b3c:	e002      	b.n	8001b44 <LoopFillZerobss>

08001b3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b3e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b40:	f842 3b04 	str.w	r3, [r2], #4

08001b44 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <LoopForever+0x16>)
	cmp	r2, r3
 8001b46:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b48:	d3f9      	bcc.n	8001b3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b4a:	f002 fc61 	bl	8004410 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b4e:	f7ff fc47 	bl	80013e0 <main>

08001b52 <LoopForever>:

LoopForever:
    b LoopForever
 8001b52:	e7fe      	b.n	8001b52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b54:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001b58:	08008068 	.word	0x08008068
	ldr	r0, =_sdata
 8001b5c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b60:	20000374 	.word	0x20000374
	ldr	r2, =_sbss
 8001b64:	20000374 	.word	0x20000374
	ldr	r3, = _ebss
 8001b68:	200003f0 	.word	0x200003f0

08001b6c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b6c:	e7fe      	b.n	8001b6c <ADC1_IRQHandler>

08001b6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b78:	2003      	movs	r0, #3
 8001b7a:	f000 f93d 	bl	8001df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b7e:	2000      	movs	r0, #0
 8001b80:	f000 f80e 	bl	8001ba0 <HAL_InitTick>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d002      	beq.n	8001b90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	71fb      	strb	r3, [r7, #7]
 8001b8e:	e001      	b.n	8001b94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b90:	f7ff fe6e 	bl	8001870 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b94:	79fb      	ldrb	r3, [r7, #7]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bac:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <HAL_InitTick+0x6c>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d023      	beq.n	8001bfc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001bb4:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <HAL_InitTick+0x70>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b14      	ldr	r3, [pc, #80]	; (8001c0c <HAL_InitTick+0x6c>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 f949 	bl	8001e62 <HAL_SYSTICK_Config>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10f      	bne.n	8001bf6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b0f      	cmp	r3, #15
 8001bda:	d809      	bhi.n	8001bf0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	f04f 30ff 	mov.w	r0, #4294967295
 8001be4:	f000 f913 	bl	8001e0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001be8:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <HAL_InitTick+0x74>)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	e007      	b.n	8001c00 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	73fb      	strb	r3, [r7, #15]
 8001bf4:	e004      	b.n	8001c00 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	73fb      	strb	r3, [r7, #15]
 8001bfa:	e001      	b.n	8001c00 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	2000019c 	.word	0x2000019c
 8001c10:	20000194 	.word	0x20000194
 8001c14:	20000198 	.word	0x20000198

08001c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_IncTick+0x20>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	461a      	mov	r2, r3
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <HAL_IncTick+0x24>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4413      	add	r3, r2
 8001c28:	4a04      	ldr	r2, [pc, #16]	; (8001c3c <HAL_IncTick+0x24>)
 8001c2a:	6013      	str	r3, [r2, #0]
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	2000019c 	.word	0x2000019c
 8001c3c:	200003e8 	.word	0x200003e8

08001c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return uwTick;
 8001c44:	4b03      	ldr	r3, [pc, #12]	; (8001c54 <HAL_GetTick+0x14>)
 8001c46:	681b      	ldr	r3, [r3, #0]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	200003e8 	.word	0x200003e8

08001c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <__NVIC_SetPriorityGrouping+0x44>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c74:	4013      	ands	r3, r2
 8001c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c8a:	4a04      	ldr	r2, [pc, #16]	; (8001c9c <__NVIC_SetPriorityGrouping+0x44>)
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	60d3      	str	r3, [r2, #12]
}
 8001c90:	bf00      	nop
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca4:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	0a1b      	lsrs	r3, r3, #8
 8001caa:	f003 0307 	and.w	r3, r3, #7
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	db0b      	blt.n	8001ce6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	f003 021f 	and.w	r2, r3, #31
 8001cd4:	4907      	ldr	r1, [pc, #28]	; (8001cf4 <__NVIC_EnableIRQ+0x38>)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	095b      	lsrs	r3, r3, #5
 8001cdc:	2001      	movs	r0, #1
 8001cde:	fa00 f202 	lsl.w	r2, r0, r2
 8001ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000e100 	.word	0xe000e100

08001cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	6039      	str	r1, [r7, #0]
 8001d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	db0a      	blt.n	8001d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	490c      	ldr	r1, [pc, #48]	; (8001d44 <__NVIC_SetPriority+0x4c>)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	0112      	lsls	r2, r2, #4
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d20:	e00a      	b.n	8001d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	4908      	ldr	r1, [pc, #32]	; (8001d48 <__NVIC_SetPriority+0x50>)
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	3b04      	subs	r3, #4
 8001d30:	0112      	lsls	r2, r2, #4
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	440b      	add	r3, r1
 8001d36:	761a      	strb	r2, [r3, #24]
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000e100 	.word	0xe000e100
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b089      	sub	sp, #36	; 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f1c3 0307 	rsb	r3, r3, #7
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	bf28      	it	cs
 8001d6a:	2304      	movcs	r3, #4
 8001d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3304      	adds	r3, #4
 8001d72:	2b06      	cmp	r3, #6
 8001d74:	d902      	bls.n	8001d7c <NVIC_EncodePriority+0x30>
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3b03      	subs	r3, #3
 8001d7a:	e000      	b.n	8001d7e <NVIC_EncodePriority+0x32>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d80:	f04f 32ff 	mov.w	r2, #4294967295
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43da      	mvns	r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	401a      	ands	r2, r3
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d94:	f04f 31ff 	mov.w	r1, #4294967295
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9e:	43d9      	mvns	r1, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	4313      	orrs	r3, r2
         );
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3724      	adds	r7, #36	; 0x24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc4:	d301      	bcc.n	8001dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e00f      	b.n	8001dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dca:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <SysTick_Config+0x40>)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dd2:	210f      	movs	r1, #15
 8001dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd8:	f7ff ff8e 	bl	8001cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <SysTick_Config+0x40>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001de2:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <SysTick_Config+0x40>)
 8001de4:	2207      	movs	r2, #7
 8001de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	e000e010 	.word	0xe000e010

08001df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7ff ff29 	bl	8001c58 <__NVIC_SetPriorityGrouping>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b086      	sub	sp, #24
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	4603      	mov	r3, r0
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
 8001e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e20:	f7ff ff3e 	bl	8001ca0 <__NVIC_GetPriorityGrouping>
 8001e24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	68b9      	ldr	r1, [r7, #8]
 8001e2a:	6978      	ldr	r0, [r7, #20]
 8001e2c:	f7ff ff8e 	bl	8001d4c <NVIC_EncodePriority>
 8001e30:	4602      	mov	r2, r0
 8001e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e36:	4611      	mov	r1, r2
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff5d 	bl	8001cf8 <__NVIC_SetPriority>
}
 8001e3e:	bf00      	nop
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff31 	bl	8001cbc <__NVIC_EnableIRQ>
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff ffa2 	bl	8001db4 <SysTick_Config>
 8001e70:	4603      	mov	r3, r0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e80:	4b0d      	ldr	r3, [pc, #52]	; (8001eb8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e8c:	d102      	bne.n	8001e94 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001e8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e92:	e00b      	b.n	8001eac <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001e94:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ea2:	d102      	bne.n	8001eaa <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001ea4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ea8:	e000      	b.n	8001eac <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001eaa:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	40007000 	.word	0x40007000

08001ebc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d141      	bne.n	8001f4e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001eca:	4b4b      	ldr	r3, [pc, #300]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ed6:	d131      	bne.n	8001f3c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ed8:	4b47      	ldr	r3, [pc, #284]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ede:	4a46      	ldr	r2, [pc, #280]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ee4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ee8:	4b43      	ldr	r3, [pc, #268]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ef0:	4a41      	ldr	r2, [pc, #260]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ef6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001ef8:	4b40      	ldr	r3, [pc, #256]	; (8001ffc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2232      	movs	r2, #50	; 0x32
 8001efe:	fb02 f303 	mul.w	r3, r2, r3
 8001f02:	4a3f      	ldr	r2, [pc, #252]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f04:	fba2 2303 	umull	r2, r3, r2, r3
 8001f08:	0c9b      	lsrs	r3, r3, #18
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f0e:	e002      	b.n	8001f16 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f16:	4b38      	ldr	r3, [pc, #224]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f22:	d102      	bne.n	8001f2a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f2      	bne.n	8001f10 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f2a:	4b33      	ldr	r3, [pc, #204]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f36:	d158      	bne.n	8001fea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e057      	b.n	8001fec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f3c:	4b2e      	ldr	r3, [pc, #184]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f42:	4a2d      	ldr	r2, [pc, #180]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f4c:	e04d      	b.n	8001fea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f54:	d141      	bne.n	8001fda <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f56:	4b28      	ldr	r3, [pc, #160]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f62:	d131      	bne.n	8001fc8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f64:	4b24      	ldr	r3, [pc, #144]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f6a:	4a23      	ldr	r2, [pc, #140]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f74:	4b20      	ldr	r3, [pc, #128]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f7c:	4a1e      	ldr	r2, [pc, #120]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001f84:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2232      	movs	r2, #50	; 0x32
 8001f8a:	fb02 f303 	mul.w	r3, r2, r3
 8001f8e:	4a1c      	ldr	r2, [pc, #112]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f90:	fba2 2303 	umull	r2, r3, r2, r3
 8001f94:	0c9b      	lsrs	r3, r3, #18
 8001f96:	3301      	adds	r3, #1
 8001f98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f9a:	e002      	b.n	8001fa2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fa2:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fae:	d102      	bne.n	8001fb6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f2      	bne.n	8001f9c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fb6:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fc2:	d112      	bne.n	8001fea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e011      	b.n	8001fec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fce:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001fd8:	e007      	b.n	8001fea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fda:	4b07      	ldr	r3, [pc, #28]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fe2:	4a05      	ldr	r2, [pc, #20]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fe8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	40007000 	.word	0x40007000
 8001ffc:	20000194 	.word	0x20000194
 8002000:	431bde83 	.word	0x431bde83

08002004 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b088      	sub	sp, #32
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d102      	bne.n	8002018 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	f000 bc16 	b.w	8002844 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002018:	4ba0      	ldr	r3, [pc, #640]	; (800229c <HAL_RCC_OscConfig+0x298>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 030c 	and.w	r3, r3, #12
 8002020:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002022:	4b9e      	ldr	r3, [pc, #632]	; (800229c <HAL_RCC_OscConfig+0x298>)
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0310 	and.w	r3, r3, #16
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 80e4 	beq.w	8002202 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d007      	beq.n	8002050 <HAL_RCC_OscConfig+0x4c>
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	2b0c      	cmp	r3, #12
 8002044:	f040 808b 	bne.w	800215e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	2b01      	cmp	r3, #1
 800204c:	f040 8087 	bne.w	800215e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002050:	4b92      	ldr	r3, [pc, #584]	; (800229c <HAL_RCC_OscConfig+0x298>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d005      	beq.n	8002068 <HAL_RCC_OscConfig+0x64>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e3ed      	b.n	8002844 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a1a      	ldr	r2, [r3, #32]
 800206c:	4b8b      	ldr	r3, [pc, #556]	; (800229c <HAL_RCC_OscConfig+0x298>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0308 	and.w	r3, r3, #8
 8002074:	2b00      	cmp	r3, #0
 8002076:	d004      	beq.n	8002082 <HAL_RCC_OscConfig+0x7e>
 8002078:	4b88      	ldr	r3, [pc, #544]	; (800229c <HAL_RCC_OscConfig+0x298>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002080:	e005      	b.n	800208e <HAL_RCC_OscConfig+0x8a>
 8002082:	4b86      	ldr	r3, [pc, #536]	; (800229c <HAL_RCC_OscConfig+0x298>)
 8002084:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002088:	091b      	lsrs	r3, r3, #4
 800208a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800208e:	4293      	cmp	r3, r2
 8002090:	d223      	bcs.n	80020da <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	4618      	mov	r0, r3
 8002098:	f000 fd90 	bl	8002bbc <RCC_SetFlashLatencyFromMSIRange>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e3ce      	b.n	8002844 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020a6:	4b7d      	ldr	r3, [pc, #500]	; (800229c <HAL_RCC_OscConfig+0x298>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a7c      	ldr	r2, [pc, #496]	; (800229c <HAL_RCC_OscConfig+0x298>)
 80020ac:	f043 0308 	orr.w	r3, r3, #8
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	4b7a      	ldr	r3, [pc, #488]	; (800229c <HAL_RCC_OscConfig+0x298>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	4977      	ldr	r1, [pc, #476]	; (800229c <HAL_RCC_OscConfig+0x298>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020c4:	4b75      	ldr	r3, [pc, #468]	; (800229c <HAL_RCC_OscConfig+0x298>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	69db      	ldr	r3, [r3, #28]
 80020d0:	021b      	lsls	r3, r3, #8
 80020d2:	4972      	ldr	r1, [pc, #456]	; (800229c <HAL_RCC_OscConfig+0x298>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	604b      	str	r3, [r1, #4]
 80020d8:	e025      	b.n	8002126 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020da:	4b70      	ldr	r3, [pc, #448]	; (800229c <HAL_RCC_OscConfig+0x298>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a6f      	ldr	r2, [pc, #444]	; (800229c <HAL_RCC_OscConfig+0x298>)
 80020e0:	f043 0308 	orr.w	r3, r3, #8
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	4b6d      	ldr	r3, [pc, #436]	; (800229c <HAL_RCC_OscConfig+0x298>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	496a      	ldr	r1, [pc, #424]	; (800229c <HAL_RCC_OscConfig+0x298>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020f8:	4b68      	ldr	r3, [pc, #416]	; (800229c <HAL_RCC_OscConfig+0x298>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	021b      	lsls	r3, r3, #8
 8002106:	4965      	ldr	r1, [pc, #404]	; (800229c <HAL_RCC_OscConfig+0x298>)
 8002108:	4313      	orrs	r3, r2
 800210a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d109      	bne.n	8002126 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	4618      	mov	r0, r3
 8002118:	f000 fd50 	bl	8002bbc <RCC_SetFlashLatencyFromMSIRange>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e38e      	b.n	8002844 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002126:	f000 fcbf 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 800212a:	4601      	mov	r1, r0
 800212c:	4b5b      	ldr	r3, [pc, #364]	; (800229c <HAL_RCC_OscConfig+0x298>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	091b      	lsrs	r3, r3, #4
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	4a5a      	ldr	r2, [pc, #360]	; (80022a0 <HAL_RCC_OscConfig+0x29c>)
 8002138:	5cd3      	ldrb	r3, [r2, r3]
 800213a:	f003 031f 	and.w	r3, r3, #31
 800213e:	fa21 f303 	lsr.w	r3, r1, r3
 8002142:	4a58      	ldr	r2, [pc, #352]	; (80022a4 <HAL_RCC_OscConfig+0x2a0>)
 8002144:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002146:	4b58      	ldr	r3, [pc, #352]	; (80022a8 <HAL_RCC_OscConfig+0x2a4>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff fd28 	bl	8001ba0 <HAL_InitTick>
 8002150:	4603      	mov	r3, r0
 8002152:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d052      	beq.n	8002200 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800215a:	7bfb      	ldrb	r3, [r7, #15]
 800215c:	e372      	b.n	8002844 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d032      	beq.n	80021cc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002166:	4b4d      	ldr	r3, [pc, #308]	; (800229c <HAL_RCC_OscConfig+0x298>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a4c      	ldr	r2, [pc, #304]	; (800229c <HAL_RCC_OscConfig+0x298>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002172:	f7ff fd65 	bl	8001c40 <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800217a:	f7ff fd61 	bl	8001c40 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e35b      	b.n	8002844 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800218c:	4b43      	ldr	r3, [pc, #268]	; (800229c <HAL_RCC_OscConfig+0x298>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0f0      	beq.n	800217a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002198:	4b40      	ldr	r3, [pc, #256]	; (800229c <HAL_RCC_OscConfig+0x298>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a3f      	ldr	r2, [pc, #252]	; (800229c <HAL_RCC_OscConfig+0x298>)
 800219e:	f043 0308 	orr.w	r3, r3, #8
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	4b3d      	ldr	r3, [pc, #244]	; (800229c <HAL_RCC_OscConfig+0x298>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	493a      	ldr	r1, [pc, #232]	; (800229c <HAL_RCC_OscConfig+0x298>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021b6:	4b39      	ldr	r3, [pc, #228]	; (800229c <HAL_RCC_OscConfig+0x298>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	021b      	lsls	r3, r3, #8
 80021c4:	4935      	ldr	r1, [pc, #212]	; (800229c <HAL_RCC_OscConfig+0x298>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	604b      	str	r3, [r1, #4]
 80021ca:	e01a      	b.n	8002202 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021cc:	4b33      	ldr	r3, [pc, #204]	; (800229c <HAL_RCC_OscConfig+0x298>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a32      	ldr	r2, [pc, #200]	; (800229c <HAL_RCC_OscConfig+0x298>)
 80021d2:	f023 0301 	bic.w	r3, r3, #1
 80021d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021d8:	f7ff fd32 	bl	8001c40 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021e0:	f7ff fd2e 	bl	8001c40 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e328      	b.n	8002844 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021f2:	4b2a      	ldr	r3, [pc, #168]	; (800229c <HAL_RCC_OscConfig+0x298>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0x1dc>
 80021fe:	e000      	b.n	8002202 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002200:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d073      	beq.n	80022f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	2b08      	cmp	r3, #8
 8002212:	d005      	beq.n	8002220 <HAL_RCC_OscConfig+0x21c>
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	2b0c      	cmp	r3, #12
 8002218:	d10e      	bne.n	8002238 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	2b03      	cmp	r3, #3
 800221e:	d10b      	bne.n	8002238 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002220:	4b1e      	ldr	r3, [pc, #120]	; (800229c <HAL_RCC_OscConfig+0x298>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d063      	beq.n	80022f4 <HAL_RCC_OscConfig+0x2f0>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d15f      	bne.n	80022f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e305      	b.n	8002844 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002240:	d106      	bne.n	8002250 <HAL_RCC_OscConfig+0x24c>
 8002242:	4b16      	ldr	r3, [pc, #88]	; (800229c <HAL_RCC_OscConfig+0x298>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a15      	ldr	r2, [pc, #84]	; (800229c <HAL_RCC_OscConfig+0x298>)
 8002248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	e01d      	b.n	800228c <HAL_RCC_OscConfig+0x288>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002258:	d10c      	bne.n	8002274 <HAL_RCC_OscConfig+0x270>
 800225a:	4b10      	ldr	r3, [pc, #64]	; (800229c <HAL_RCC_OscConfig+0x298>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a0f      	ldr	r2, [pc, #60]	; (800229c <HAL_RCC_OscConfig+0x298>)
 8002260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	4b0d      	ldr	r3, [pc, #52]	; (800229c <HAL_RCC_OscConfig+0x298>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a0c      	ldr	r2, [pc, #48]	; (800229c <HAL_RCC_OscConfig+0x298>)
 800226c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	e00b      	b.n	800228c <HAL_RCC_OscConfig+0x288>
 8002274:	4b09      	ldr	r3, [pc, #36]	; (800229c <HAL_RCC_OscConfig+0x298>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a08      	ldr	r2, [pc, #32]	; (800229c <HAL_RCC_OscConfig+0x298>)
 800227a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800227e:	6013      	str	r3, [r2, #0]
 8002280:	4b06      	ldr	r3, [pc, #24]	; (800229c <HAL_RCC_OscConfig+0x298>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a05      	ldr	r2, [pc, #20]	; (800229c <HAL_RCC_OscConfig+0x298>)
 8002286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800228a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d01b      	beq.n	80022cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002294:	f7ff fcd4 	bl	8001c40 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800229a:	e010      	b.n	80022be <HAL_RCC_OscConfig+0x2ba>
 800229c:	40021000 	.word	0x40021000
 80022a0:	08007d0c 	.word	0x08007d0c
 80022a4:	20000194 	.word	0x20000194
 80022a8:	20000198 	.word	0x20000198
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022ac:	f7ff fcc8 	bl	8001c40 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b64      	cmp	r3, #100	; 0x64
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e2c2      	b.n	8002844 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022be:	4baf      	ldr	r3, [pc, #700]	; (800257c <HAL_RCC_OscConfig+0x578>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0f0      	beq.n	80022ac <HAL_RCC_OscConfig+0x2a8>
 80022ca:	e014      	b.n	80022f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022cc:	f7ff fcb8 	bl	8001c40 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d4:	f7ff fcb4 	bl	8001c40 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b64      	cmp	r3, #100	; 0x64
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e2ae      	b.n	8002844 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022e6:	4ba5      	ldr	r3, [pc, #660]	; (800257c <HAL_RCC_OscConfig+0x578>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f0      	bne.n	80022d4 <HAL_RCC_OscConfig+0x2d0>
 80022f2:	e000      	b.n	80022f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d060      	beq.n	80023c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	2b04      	cmp	r3, #4
 8002306:	d005      	beq.n	8002314 <HAL_RCC_OscConfig+0x310>
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	2b0c      	cmp	r3, #12
 800230c:	d119      	bne.n	8002342 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	2b02      	cmp	r3, #2
 8002312:	d116      	bne.n	8002342 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002314:	4b99      	ldr	r3, [pc, #612]	; (800257c <HAL_RCC_OscConfig+0x578>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800231c:	2b00      	cmp	r3, #0
 800231e:	d005      	beq.n	800232c <HAL_RCC_OscConfig+0x328>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e28b      	b.n	8002844 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232c:	4b93      	ldr	r3, [pc, #588]	; (800257c <HAL_RCC_OscConfig+0x578>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	061b      	lsls	r3, r3, #24
 800233a:	4990      	ldr	r1, [pc, #576]	; (800257c <HAL_RCC_OscConfig+0x578>)
 800233c:	4313      	orrs	r3, r2
 800233e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002340:	e040      	b.n	80023c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d023      	beq.n	8002392 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800234a:	4b8c      	ldr	r3, [pc, #560]	; (800257c <HAL_RCC_OscConfig+0x578>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a8b      	ldr	r2, [pc, #556]	; (800257c <HAL_RCC_OscConfig+0x578>)
 8002350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002354:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002356:	f7ff fc73 	bl	8001c40 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800235e:	f7ff fc6f 	bl	8001c40 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e269      	b.n	8002844 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002370:	4b82      	ldr	r3, [pc, #520]	; (800257c <HAL_RCC_OscConfig+0x578>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f0      	beq.n	800235e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237c:	4b7f      	ldr	r3, [pc, #508]	; (800257c <HAL_RCC_OscConfig+0x578>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	061b      	lsls	r3, r3, #24
 800238a:	497c      	ldr	r1, [pc, #496]	; (800257c <HAL_RCC_OscConfig+0x578>)
 800238c:	4313      	orrs	r3, r2
 800238e:	604b      	str	r3, [r1, #4]
 8002390:	e018      	b.n	80023c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002392:	4b7a      	ldr	r3, [pc, #488]	; (800257c <HAL_RCC_OscConfig+0x578>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a79      	ldr	r2, [pc, #484]	; (800257c <HAL_RCC_OscConfig+0x578>)
 8002398:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800239c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239e:	f7ff fc4f 	bl	8001c40 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a6:	f7ff fc4b 	bl	8001c40 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e245      	b.n	8002844 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023b8:	4b70      	ldr	r3, [pc, #448]	; (800257c <HAL_RCC_OscConfig+0x578>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1f0      	bne.n	80023a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d03c      	beq.n	800244a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d01c      	beq.n	8002412 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023d8:	4b68      	ldr	r3, [pc, #416]	; (800257c <HAL_RCC_OscConfig+0x578>)
 80023da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023de:	4a67      	ldr	r2, [pc, #412]	; (800257c <HAL_RCC_OscConfig+0x578>)
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e8:	f7ff fc2a 	bl	8001c40 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023f0:	f7ff fc26 	bl	8001c40 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e220      	b.n	8002844 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002402:	4b5e      	ldr	r3, [pc, #376]	; (800257c <HAL_RCC_OscConfig+0x578>)
 8002404:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0ef      	beq.n	80023f0 <HAL_RCC_OscConfig+0x3ec>
 8002410:	e01b      	b.n	800244a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002412:	4b5a      	ldr	r3, [pc, #360]	; (800257c <HAL_RCC_OscConfig+0x578>)
 8002414:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002418:	4a58      	ldr	r2, [pc, #352]	; (800257c <HAL_RCC_OscConfig+0x578>)
 800241a:	f023 0301 	bic.w	r3, r3, #1
 800241e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002422:	f7ff fc0d 	bl	8001c40 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800242a:	f7ff fc09 	bl	8001c40 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e203      	b.n	8002844 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800243c:	4b4f      	ldr	r3, [pc, #316]	; (800257c <HAL_RCC_OscConfig+0x578>)
 800243e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1ef      	bne.n	800242a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 80a6 	beq.w	80025a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002458:	2300      	movs	r3, #0
 800245a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800245c:	4b47      	ldr	r3, [pc, #284]	; (800257c <HAL_RCC_OscConfig+0x578>)
 800245e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10d      	bne.n	8002484 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002468:	4b44      	ldr	r3, [pc, #272]	; (800257c <HAL_RCC_OscConfig+0x578>)
 800246a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246c:	4a43      	ldr	r2, [pc, #268]	; (800257c <HAL_RCC_OscConfig+0x578>)
 800246e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002472:	6593      	str	r3, [r2, #88]	; 0x58
 8002474:	4b41      	ldr	r3, [pc, #260]	; (800257c <HAL_RCC_OscConfig+0x578>)
 8002476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002480:	2301      	movs	r3, #1
 8002482:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002484:	4b3e      	ldr	r3, [pc, #248]	; (8002580 <HAL_RCC_OscConfig+0x57c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248c:	2b00      	cmp	r3, #0
 800248e:	d118      	bne.n	80024c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002490:	4b3b      	ldr	r3, [pc, #236]	; (8002580 <HAL_RCC_OscConfig+0x57c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a3a      	ldr	r2, [pc, #232]	; (8002580 <HAL_RCC_OscConfig+0x57c>)
 8002496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800249a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800249c:	f7ff fbd0 	bl	8001c40 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a4:	f7ff fbcc 	bl	8001c40 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e1c6      	b.n	8002844 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024b6:	4b32      	ldr	r3, [pc, #200]	; (8002580 <HAL_RCC_OscConfig+0x57c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0f0      	beq.n	80024a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d108      	bne.n	80024dc <HAL_RCC_OscConfig+0x4d8>
 80024ca:	4b2c      	ldr	r3, [pc, #176]	; (800257c <HAL_RCC_OscConfig+0x578>)
 80024cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d0:	4a2a      	ldr	r2, [pc, #168]	; (800257c <HAL_RCC_OscConfig+0x578>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024da:	e024      	b.n	8002526 <HAL_RCC_OscConfig+0x522>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	2b05      	cmp	r3, #5
 80024e2:	d110      	bne.n	8002506 <HAL_RCC_OscConfig+0x502>
 80024e4:	4b25      	ldr	r3, [pc, #148]	; (800257c <HAL_RCC_OscConfig+0x578>)
 80024e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ea:	4a24      	ldr	r2, [pc, #144]	; (800257c <HAL_RCC_OscConfig+0x578>)
 80024ec:	f043 0304 	orr.w	r3, r3, #4
 80024f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024f4:	4b21      	ldr	r3, [pc, #132]	; (800257c <HAL_RCC_OscConfig+0x578>)
 80024f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fa:	4a20      	ldr	r2, [pc, #128]	; (800257c <HAL_RCC_OscConfig+0x578>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002504:	e00f      	b.n	8002526 <HAL_RCC_OscConfig+0x522>
 8002506:	4b1d      	ldr	r3, [pc, #116]	; (800257c <HAL_RCC_OscConfig+0x578>)
 8002508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250c:	4a1b      	ldr	r2, [pc, #108]	; (800257c <HAL_RCC_OscConfig+0x578>)
 800250e:	f023 0301 	bic.w	r3, r3, #1
 8002512:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002516:	4b19      	ldr	r3, [pc, #100]	; (800257c <HAL_RCC_OscConfig+0x578>)
 8002518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251c:	4a17      	ldr	r2, [pc, #92]	; (800257c <HAL_RCC_OscConfig+0x578>)
 800251e:	f023 0304 	bic.w	r3, r3, #4
 8002522:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d016      	beq.n	800255c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252e:	f7ff fb87 	bl	8001c40 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002534:	e00a      	b.n	800254c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002536:	f7ff fb83 	bl	8001c40 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	f241 3288 	movw	r2, #5000	; 0x1388
 8002544:	4293      	cmp	r3, r2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e17b      	b.n	8002844 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800254c:	4b0b      	ldr	r3, [pc, #44]	; (800257c <HAL_RCC_OscConfig+0x578>)
 800254e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0ed      	beq.n	8002536 <HAL_RCC_OscConfig+0x532>
 800255a:	e01a      	b.n	8002592 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255c:	f7ff fb70 	bl	8001c40 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002562:	e00f      	b.n	8002584 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002564:	f7ff fb6c 	bl	8001c40 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002572:	4293      	cmp	r3, r2
 8002574:	d906      	bls.n	8002584 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e164      	b.n	8002844 <HAL_RCC_OscConfig+0x840>
 800257a:	bf00      	nop
 800257c:	40021000 	.word	0x40021000
 8002580:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002584:	4ba8      	ldr	r3, [pc, #672]	; (8002828 <HAL_RCC_OscConfig+0x824>)
 8002586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1e8      	bne.n	8002564 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002592:	7ffb      	ldrb	r3, [r7, #31]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d105      	bne.n	80025a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002598:	4ba3      	ldr	r3, [pc, #652]	; (8002828 <HAL_RCC_OscConfig+0x824>)
 800259a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259c:	4aa2      	ldr	r2, [pc, #648]	; (8002828 <HAL_RCC_OscConfig+0x824>)
 800259e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0320 	and.w	r3, r3, #32
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d03c      	beq.n	800262a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d01c      	beq.n	80025f2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025b8:	4b9b      	ldr	r3, [pc, #620]	; (8002828 <HAL_RCC_OscConfig+0x824>)
 80025ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025be:	4a9a      	ldr	r2, [pc, #616]	; (8002828 <HAL_RCC_OscConfig+0x824>)
 80025c0:	f043 0301 	orr.w	r3, r3, #1
 80025c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c8:	f7ff fb3a 	bl	8001c40 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025d0:	f7ff fb36 	bl	8001c40 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e130      	b.n	8002844 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025e2:	4b91      	ldr	r3, [pc, #580]	; (8002828 <HAL_RCC_OscConfig+0x824>)
 80025e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0ef      	beq.n	80025d0 <HAL_RCC_OscConfig+0x5cc>
 80025f0:	e01b      	b.n	800262a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025f2:	4b8d      	ldr	r3, [pc, #564]	; (8002828 <HAL_RCC_OscConfig+0x824>)
 80025f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025f8:	4a8b      	ldr	r2, [pc, #556]	; (8002828 <HAL_RCC_OscConfig+0x824>)
 80025fa:	f023 0301 	bic.w	r3, r3, #1
 80025fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002602:	f7ff fb1d 	bl	8001c40 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800260a:	f7ff fb19 	bl	8001c40 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e113      	b.n	8002844 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800261c:	4b82      	ldr	r3, [pc, #520]	; (8002828 <HAL_RCC_OscConfig+0x824>)
 800261e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1ef      	bne.n	800260a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 8107 	beq.w	8002842 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002638:	2b02      	cmp	r3, #2
 800263a:	f040 80cb 	bne.w	80027d4 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800263e:	4b7a      	ldr	r3, [pc, #488]	; (8002828 <HAL_RCC_OscConfig+0x824>)
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f003 0203 	and.w	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264e:	429a      	cmp	r2, r3
 8002650:	d12c      	bne.n	80026ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265c:	3b01      	subs	r3, #1
 800265e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002660:	429a      	cmp	r2, r3
 8002662:	d123      	bne.n	80026ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800266e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002670:	429a      	cmp	r2, r3
 8002672:	d11b      	bne.n	80026ac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800267e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002680:	429a      	cmp	r2, r3
 8002682:	d113      	bne.n	80026ac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268e:	085b      	lsrs	r3, r3, #1
 8002690:	3b01      	subs	r3, #1
 8002692:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002694:	429a      	cmp	r2, r3
 8002696:	d109      	bne.n	80026ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	085b      	lsrs	r3, r3, #1
 80026a4:	3b01      	subs	r3, #1
 80026a6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d06d      	beq.n	8002788 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	2b0c      	cmp	r3, #12
 80026b0:	d068      	beq.n	8002784 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80026b2:	4b5d      	ldr	r3, [pc, #372]	; (8002828 <HAL_RCC_OscConfig+0x824>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d105      	bne.n	80026ca <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80026be:	4b5a      	ldr	r3, [pc, #360]	; (8002828 <HAL_RCC_OscConfig+0x824>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e0ba      	b.n	8002844 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80026ce:	4b56      	ldr	r3, [pc, #344]	; (8002828 <HAL_RCC_OscConfig+0x824>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a55      	ldr	r2, [pc, #340]	; (8002828 <HAL_RCC_OscConfig+0x824>)
 80026d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026d8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026da:	f7ff fab1 	bl	8001c40 <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e2:	f7ff faad 	bl	8001c40 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e0a7      	b.n	8002844 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026f4:	4b4c      	ldr	r3, [pc, #304]	; (8002828 <HAL_RCC_OscConfig+0x824>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1f0      	bne.n	80026e2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002700:	4b49      	ldr	r3, [pc, #292]	; (8002828 <HAL_RCC_OscConfig+0x824>)
 8002702:	68da      	ldr	r2, [r3, #12]
 8002704:	4b49      	ldr	r3, [pc, #292]	; (800282c <HAL_RCC_OscConfig+0x828>)
 8002706:	4013      	ands	r3, r2
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002710:	3a01      	subs	r2, #1
 8002712:	0112      	lsls	r2, r2, #4
 8002714:	4311      	orrs	r1, r2
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800271a:	0212      	lsls	r2, r2, #8
 800271c:	4311      	orrs	r1, r2
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002722:	0852      	lsrs	r2, r2, #1
 8002724:	3a01      	subs	r2, #1
 8002726:	0552      	lsls	r2, r2, #21
 8002728:	4311      	orrs	r1, r2
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800272e:	0852      	lsrs	r2, r2, #1
 8002730:	3a01      	subs	r2, #1
 8002732:	0652      	lsls	r2, r2, #25
 8002734:	4311      	orrs	r1, r2
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800273a:	06d2      	lsls	r2, r2, #27
 800273c:	430a      	orrs	r2, r1
 800273e:	493a      	ldr	r1, [pc, #232]	; (8002828 <HAL_RCC_OscConfig+0x824>)
 8002740:	4313      	orrs	r3, r2
 8002742:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002744:	4b38      	ldr	r3, [pc, #224]	; (8002828 <HAL_RCC_OscConfig+0x824>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a37      	ldr	r2, [pc, #220]	; (8002828 <HAL_RCC_OscConfig+0x824>)
 800274a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800274e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002750:	4b35      	ldr	r3, [pc, #212]	; (8002828 <HAL_RCC_OscConfig+0x824>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	4a34      	ldr	r2, [pc, #208]	; (8002828 <HAL_RCC_OscConfig+0x824>)
 8002756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800275a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800275c:	f7ff fa70 	bl	8001c40 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002764:	f7ff fa6c 	bl	8001c40 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e066      	b.n	8002844 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002776:	4b2c      	ldr	r3, [pc, #176]	; (8002828 <HAL_RCC_OscConfig+0x824>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0f0      	beq.n	8002764 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002782:	e05e      	b.n	8002842 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e05d      	b.n	8002844 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002788:	4b27      	ldr	r3, [pc, #156]	; (8002828 <HAL_RCC_OscConfig+0x824>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d156      	bne.n	8002842 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002794:	4b24      	ldr	r3, [pc, #144]	; (8002828 <HAL_RCC_OscConfig+0x824>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a23      	ldr	r2, [pc, #140]	; (8002828 <HAL_RCC_OscConfig+0x824>)
 800279a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800279e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027a0:	4b21      	ldr	r3, [pc, #132]	; (8002828 <HAL_RCC_OscConfig+0x824>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	4a20      	ldr	r2, [pc, #128]	; (8002828 <HAL_RCC_OscConfig+0x824>)
 80027a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027ac:	f7ff fa48 	bl	8001c40 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b4:	f7ff fa44 	bl	8001c40 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e03e      	b.n	8002844 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027c6:	4b18      	ldr	r3, [pc, #96]	; (8002828 <HAL_RCC_OscConfig+0x824>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d0f0      	beq.n	80027b4 <HAL_RCC_OscConfig+0x7b0>
 80027d2:	e036      	b.n	8002842 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	2b0c      	cmp	r3, #12
 80027d8:	d031      	beq.n	800283e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027da:	4b13      	ldr	r3, [pc, #76]	; (8002828 <HAL_RCC_OscConfig+0x824>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a12      	ldr	r2, [pc, #72]	; (8002828 <HAL_RCC_OscConfig+0x824>)
 80027e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027e4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80027e6:	4b10      	ldr	r3, [pc, #64]	; (8002828 <HAL_RCC_OscConfig+0x824>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d105      	bne.n	80027fe <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80027f2:	4b0d      	ldr	r3, [pc, #52]	; (8002828 <HAL_RCC_OscConfig+0x824>)
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	4a0c      	ldr	r2, [pc, #48]	; (8002828 <HAL_RCC_OscConfig+0x824>)
 80027f8:	f023 0303 	bic.w	r3, r3, #3
 80027fc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80027fe:	4b0a      	ldr	r3, [pc, #40]	; (8002828 <HAL_RCC_OscConfig+0x824>)
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	4a09      	ldr	r2, [pc, #36]	; (8002828 <HAL_RCC_OscConfig+0x824>)
 8002804:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002808:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800280c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280e:	f7ff fa17 	bl	8001c40 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002814:	e00c      	b.n	8002830 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002816:	f7ff fa13 	bl	8001c40 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d905      	bls.n	8002830 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e00d      	b.n	8002844 <HAL_RCC_OscConfig+0x840>
 8002828:	40021000 	.word	0x40021000
 800282c:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <HAL_RCC_OscConfig+0x848>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1ec      	bne.n	8002816 <HAL_RCC_OscConfig+0x812>
 800283c:	e001      	b.n	8002842 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e000      	b.n	8002844 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3720      	adds	r7, #32
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40021000 	.word	0x40021000

08002850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e10f      	b.n	8002a88 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002868:	4b89      	ldr	r3, [pc, #548]	; (8002a90 <HAL_RCC_ClockConfig+0x240>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 030f 	and.w	r3, r3, #15
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d910      	bls.n	8002898 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002876:	4b86      	ldr	r3, [pc, #536]	; (8002a90 <HAL_RCC_ClockConfig+0x240>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f023 020f 	bic.w	r2, r3, #15
 800287e:	4984      	ldr	r1, [pc, #528]	; (8002a90 <HAL_RCC_ClockConfig+0x240>)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	4313      	orrs	r3, r2
 8002884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002886:	4b82      	ldr	r3, [pc, #520]	; (8002a90 <HAL_RCC_ClockConfig+0x240>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	429a      	cmp	r2, r3
 8002892:	d001      	beq.n	8002898 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e0f7      	b.n	8002a88 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 8089 	beq.w	80029b8 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	d133      	bne.n	8002916 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ae:	4b79      	ldr	r3, [pc, #484]	; (8002a94 <HAL_RCC_ClockConfig+0x244>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e0e4      	b.n	8002a88 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80028be:	f000 f9d7 	bl	8002c70 <RCC_GetSysClockFreqFromPLLSource>
 80028c2:	4602      	mov	r2, r0
 80028c4:	4b74      	ldr	r3, [pc, #464]	; (8002a98 <HAL_RCC_ClockConfig+0x248>)
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d955      	bls.n	8002976 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80028ca:	4b72      	ldr	r3, [pc, #456]	; (8002a94 <HAL_RCC_ClockConfig+0x244>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10a      	bne.n	80028ec <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80028d6:	4b6f      	ldr	r3, [pc, #444]	; (8002a94 <HAL_RCC_ClockConfig+0x244>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028de:	4a6d      	ldr	r2, [pc, #436]	; (8002a94 <HAL_RCC_ClockConfig+0x244>)
 80028e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028e4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80028e6:	2380      	movs	r3, #128	; 0x80
 80028e8:	617b      	str	r3, [r7, #20]
 80028ea:	e044      	b.n	8002976 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d03e      	beq.n	8002976 <HAL_RCC_ClockConfig+0x126>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d13a      	bne.n	8002976 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002900:	4b64      	ldr	r3, [pc, #400]	; (8002a94 <HAL_RCC_ClockConfig+0x244>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002908:	4a62      	ldr	r2, [pc, #392]	; (8002a94 <HAL_RCC_ClockConfig+0x244>)
 800290a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800290e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002910:	2380      	movs	r3, #128	; 0x80
 8002912:	617b      	str	r3, [r7, #20]
 8002914:	e02f      	b.n	8002976 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b02      	cmp	r3, #2
 800291c:	d107      	bne.n	800292e <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800291e:	4b5d      	ldr	r3, [pc, #372]	; (8002a94 <HAL_RCC_ClockConfig+0x244>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d115      	bne.n	8002956 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e0ac      	b.n	8002a88 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d107      	bne.n	8002946 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002936:	4b57      	ldr	r3, [pc, #348]	; (8002a94 <HAL_RCC_ClockConfig+0x244>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d109      	bne.n	8002956 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e0a0      	b.n	8002a88 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002946:	4b53      	ldr	r3, [pc, #332]	; (8002a94 <HAL_RCC_ClockConfig+0x244>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e098      	b.n	8002a88 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002956:	f000 f8a7 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 800295a:	4602      	mov	r2, r0
 800295c:	4b4e      	ldr	r3, [pc, #312]	; (8002a98 <HAL_RCC_ClockConfig+0x248>)
 800295e:	429a      	cmp	r2, r3
 8002960:	d909      	bls.n	8002976 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002962:	4b4c      	ldr	r3, [pc, #304]	; (8002a94 <HAL_RCC_ClockConfig+0x244>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800296a:	4a4a      	ldr	r2, [pc, #296]	; (8002a94 <HAL_RCC_ClockConfig+0x244>)
 800296c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002970:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002972:	2380      	movs	r3, #128	; 0x80
 8002974:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002976:	4b47      	ldr	r3, [pc, #284]	; (8002a94 <HAL_RCC_ClockConfig+0x244>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f023 0203 	bic.w	r2, r3, #3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	4944      	ldr	r1, [pc, #272]	; (8002a94 <HAL_RCC_ClockConfig+0x244>)
 8002984:	4313      	orrs	r3, r2
 8002986:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002988:	f7ff f95a 	bl	8001c40 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800298e:	e00a      	b.n	80029a6 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002990:	f7ff f956 	bl	8001c40 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	f241 3288 	movw	r2, #5000	; 0x1388
 800299e:	4293      	cmp	r3, r2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e070      	b.n	8002a88 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a6:	4b3b      	ldr	r3, [pc, #236]	; (8002a94 <HAL_RCC_ClockConfig+0x244>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 020c 	and.w	r2, r3, #12
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d1eb      	bne.n	8002990 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d009      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029c4:	4b33      	ldr	r3, [pc, #204]	; (8002a94 <HAL_RCC_ClockConfig+0x244>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	4930      	ldr	r1, [pc, #192]	; (8002a94 <HAL_RCC_ClockConfig+0x244>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	608b      	str	r3, [r1, #8]
 80029d6:	e008      	b.n	80029ea <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	2b80      	cmp	r3, #128	; 0x80
 80029dc:	d105      	bne.n	80029ea <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80029de:	4b2d      	ldr	r3, [pc, #180]	; (8002a94 <HAL_RCC_ClockConfig+0x244>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	4a2c      	ldr	r2, [pc, #176]	; (8002a94 <HAL_RCC_ClockConfig+0x244>)
 80029e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029e8:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029ea:	4b29      	ldr	r3, [pc, #164]	; (8002a90 <HAL_RCC_ClockConfig+0x240>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d210      	bcs.n	8002a1a <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f8:	4b25      	ldr	r3, [pc, #148]	; (8002a90 <HAL_RCC_ClockConfig+0x240>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f023 020f 	bic.w	r2, r3, #15
 8002a00:	4923      	ldr	r1, [pc, #140]	; (8002a90 <HAL_RCC_ClockConfig+0x240>)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a08:	4b21      	ldr	r3, [pc, #132]	; (8002a90 <HAL_RCC_ClockConfig+0x240>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 030f 	and.w	r3, r3, #15
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d001      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e036      	b.n	8002a88 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d008      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a26:	4b1b      	ldr	r3, [pc, #108]	; (8002a94 <HAL_RCC_ClockConfig+0x244>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	4918      	ldr	r1, [pc, #96]	; (8002a94 <HAL_RCC_ClockConfig+0x244>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0308 	and.w	r3, r3, #8
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d009      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a44:	4b13      	ldr	r3, [pc, #76]	; (8002a94 <HAL_RCC_ClockConfig+0x244>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	4910      	ldr	r1, [pc, #64]	; (8002a94 <HAL_RCC_ClockConfig+0x244>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a58:	f000 f826 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 8002a5c:	4601      	mov	r1, r0
 8002a5e:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <HAL_RCC_ClockConfig+0x244>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	091b      	lsrs	r3, r3, #4
 8002a64:	f003 030f 	and.w	r3, r3, #15
 8002a68:	4a0c      	ldr	r2, [pc, #48]	; (8002a9c <HAL_RCC_ClockConfig+0x24c>)
 8002a6a:	5cd3      	ldrb	r3, [r2, r3]
 8002a6c:	f003 031f 	and.w	r3, r3, #31
 8002a70:	fa21 f303 	lsr.w	r3, r1, r3
 8002a74:	4a0a      	ldr	r2, [pc, #40]	; (8002aa0 <HAL_RCC_ClockConfig+0x250>)
 8002a76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a78:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <HAL_RCC_ClockConfig+0x254>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff f88f 	bl	8001ba0 <HAL_InitTick>
 8002a82:	4603      	mov	r3, r0
 8002a84:	73fb      	strb	r3, [r7, #15]

  return status;
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40022000 	.word	0x40022000
 8002a94:	40021000 	.word	0x40021000
 8002a98:	04c4b400 	.word	0x04c4b400
 8002a9c:	08007d0c 	.word	0x08007d0c
 8002aa0:	20000194 	.word	0x20000194
 8002aa4:	20000198 	.word	0x20000198

08002aa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b089      	sub	sp, #36	; 0x24
 8002aac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ab6:	4b3d      	ldr	r3, [pc, #244]	; (8002bac <HAL_RCC_GetSysClockFreq+0x104>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 030c 	and.w	r3, r3, #12
 8002abe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ac0:	4b3a      	ldr	r3, [pc, #232]	; (8002bac <HAL_RCC_GetSysClockFreq+0x104>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f003 0303 	and.w	r3, r3, #3
 8002ac8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d005      	beq.n	8002adc <HAL_RCC_GetSysClockFreq+0x34>
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	2b0c      	cmp	r3, #12
 8002ad4:	d121      	bne.n	8002b1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d11e      	bne.n	8002b1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002adc:	4b33      	ldr	r3, [pc, #204]	; (8002bac <HAL_RCC_GetSysClockFreq+0x104>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0308 	and.w	r3, r3, #8
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d107      	bne.n	8002af8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ae8:	4b30      	ldr	r3, [pc, #192]	; (8002bac <HAL_RCC_GetSysClockFreq+0x104>)
 8002aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aee:	0a1b      	lsrs	r3, r3, #8
 8002af0:	f003 030f 	and.w	r3, r3, #15
 8002af4:	61fb      	str	r3, [r7, #28]
 8002af6:	e005      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002af8:	4b2c      	ldr	r3, [pc, #176]	; (8002bac <HAL_RCC_GetSysClockFreq+0x104>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	091b      	lsrs	r3, r3, #4
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b04:	4a2a      	ldr	r2, [pc, #168]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10d      	bne.n	8002b30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b18:	e00a      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d102      	bne.n	8002b26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b20:	4b24      	ldr	r3, [pc, #144]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b22:	61bb      	str	r3, [r7, #24]
 8002b24:	e004      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	d101      	bne.n	8002b30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b2c:	4b22      	ldr	r3, [pc, #136]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	2b0c      	cmp	r3, #12
 8002b34:	d133      	bne.n	8002b9e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b36:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <HAL_RCC_GetSysClockFreq+0x104>)
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d002      	beq.n	8002b4c <HAL_RCC_GetSysClockFreq+0xa4>
 8002b46:	2b03      	cmp	r3, #3
 8002b48:	d003      	beq.n	8002b52 <HAL_RCC_GetSysClockFreq+0xaa>
 8002b4a:	e005      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b4c:	4b19      	ldr	r3, [pc, #100]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b4e:	617b      	str	r3, [r7, #20]
      break;
 8002b50:	e005      	b.n	8002b5e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b52:	4b19      	ldr	r3, [pc, #100]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b54:	617b      	str	r3, [r7, #20]
      break;
 8002b56:	e002      	b.n	8002b5e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	617b      	str	r3, [r7, #20]
      break;
 8002b5c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b5e:	4b13      	ldr	r3, [pc, #76]	; (8002bac <HAL_RCC_GetSysClockFreq+0x104>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	091b      	lsrs	r3, r3, #4
 8002b64:	f003 030f 	and.w	r3, r3, #15
 8002b68:	3301      	adds	r3, #1
 8002b6a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b6c:	4b0f      	ldr	r3, [pc, #60]	; (8002bac <HAL_RCC_GetSysClockFreq+0x104>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	0a1b      	lsrs	r3, r3, #8
 8002b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	fb02 f203 	mul.w	r2, r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b82:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b84:	4b09      	ldr	r3, [pc, #36]	; (8002bac <HAL_RCC_GetSysClockFreq+0x104>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	0e5b      	lsrs	r3, r3, #25
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	3301      	adds	r3, #1
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b9e:	69bb      	ldr	r3, [r7, #24]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3724      	adds	r7, #36	; 0x24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	08007d1c 	.word	0x08007d1c
 8002bb4:	00f42400 	.word	0x00f42400
 8002bb8:	007a1200 	.word	0x007a1200

08002bbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002bc8:	4b27      	ldr	r3, [pc, #156]	; (8002c68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002bd4:	f7ff f952 	bl	8001e7c <HAL_PWREx_GetVoltageRange>
 8002bd8:	6178      	str	r0, [r7, #20]
 8002bda:	e014      	b.n	8002c06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bdc:	4b22      	ldr	r3, [pc, #136]	; (8002c68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be0:	4a21      	ldr	r2, [pc, #132]	; (8002c68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be6:	6593      	str	r3, [r2, #88]	; 0x58
 8002be8:	4b1f      	ldr	r3, [pc, #124]	; (8002c68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002bf4:	f7ff f942 	bl	8001e7c <HAL_PWREx_GetVoltageRange>
 8002bf8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002bfa:	4b1b      	ldr	r3, [pc, #108]	; (8002c68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfe:	4a1a      	ldr	r2, [pc, #104]	; (8002c68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c04:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c0c:	d10b      	bne.n	8002c26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b80      	cmp	r3, #128	; 0x80
 8002c12:	d913      	bls.n	8002c3c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2ba0      	cmp	r3, #160	; 0xa0
 8002c18:	d902      	bls.n	8002c20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	e00d      	b.n	8002c3c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c20:	2301      	movs	r3, #1
 8002c22:	613b      	str	r3, [r7, #16]
 8002c24:	e00a      	b.n	8002c3c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b7f      	cmp	r3, #127	; 0x7f
 8002c2a:	d902      	bls.n	8002c32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	e004      	b.n	8002c3c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b70      	cmp	r3, #112	; 0x70
 8002c36:	d101      	bne.n	8002c3c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c38:	2301      	movs	r3, #1
 8002c3a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c3c:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f023 020f 	bic.w	r2, r3, #15
 8002c44:	4909      	ldr	r1, [pc, #36]	; (8002c6c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c4c:	4b07      	ldr	r3, [pc, #28]	; (8002c6c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 030f 	and.w	r3, r3, #15
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d001      	beq.n	8002c5e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	40022000 	.word	0x40022000

08002c70 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b087      	sub	sp, #28
 8002c74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002c7a:	4b2d      	ldr	r3, [pc, #180]	; (8002d30 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d118      	bne.n	8002cb8 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c86:	4b2a      	ldr	r3, [pc, #168]	; (8002d30 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d107      	bne.n	8002ca2 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c92:	4b27      	ldr	r3, [pc, #156]	; (8002d30 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c98:	0a1b      	lsrs	r3, r3, #8
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	e005      	b.n	8002cae <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ca2:	4b23      	ldr	r3, [pc, #140]	; (8002d30 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	091b      	lsrs	r3, r3, #4
 8002ca8:	f003 030f 	and.w	r3, r3, #15
 8002cac:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002cae:	4a21      	ldr	r2, [pc, #132]	; (8002d34 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb6:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cb8:	4b1d      	ldr	r3, [pc, #116]	; (8002d30 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d002      	beq.n	8002cce <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	d003      	beq.n	8002cd4 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8002ccc:	e005      	b.n	8002cda <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002cce:	4b1a      	ldr	r3, [pc, #104]	; (8002d38 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002cd0:	613b      	str	r3, [r7, #16]
    break;
 8002cd2:	e005      	b.n	8002ce0 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002cd4:	4b19      	ldr	r3, [pc, #100]	; (8002d3c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002cd6:	613b      	str	r3, [r7, #16]
    break;
 8002cd8:	e002      	b.n	8002ce0 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	613b      	str	r3, [r7, #16]
    break;
 8002cde:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ce0:	4b13      	ldr	r3, [pc, #76]	; (8002d30 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	091b      	lsrs	r3, r3, #4
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	3301      	adds	r3, #1
 8002cec:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002cee:	4b10      	ldr	r3, [pc, #64]	; (8002d30 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	0a1b      	lsrs	r3, r3, #8
 8002cf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	fb02 f203 	mul.w	r2, r2, r3
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d04:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d06:	4b0a      	ldr	r3, [pc, #40]	; (8002d30 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	0e5b      	lsrs	r3, r3, #25
 8002d0c:	f003 0303 	and.w	r3, r3, #3
 8002d10:	3301      	adds	r3, #1
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1e:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002d20:	683b      	ldr	r3, [r7, #0]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	371c      	adds	r7, #28
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	40021000 	.word	0x40021000
 8002d34:	08007d1c 	.word	0x08007d1c
 8002d38:	00f42400 	.word	0x00f42400
 8002d3c:	007a1200 	.word	0x007a1200

08002d40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e049      	b.n	8002de6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d106      	bne.n	8002d6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7fe fda6 	bl	80018b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3304      	adds	r3, #4
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4610      	mov	r0, r2
 8002d80:	f000 fa40 	bl	8003204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d122      	bne.n	8002e4a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d11b      	bne.n	8002e4a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f06f 0202 	mvn.w	r2, #2
 8002e1a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	f003 0303 	and.w	r3, r3, #3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f9c8 	bl	80031c6 <HAL_TIM_IC_CaptureCallback>
 8002e36:	e005      	b.n	8002e44 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 f9ba 	bl	80031b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f9cb 	bl	80031da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d122      	bne.n	8002e9e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d11b      	bne.n	8002e9e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f06f 0204 	mvn.w	r2, #4
 8002e6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2202      	movs	r2, #2
 8002e74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 f99e 	bl	80031c6 <HAL_TIM_IC_CaptureCallback>
 8002e8a:	e005      	b.n	8002e98 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 f990 	bl	80031b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f9a1 	bl	80031da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	f003 0308 	and.w	r3, r3, #8
 8002ea8:	2b08      	cmp	r3, #8
 8002eaa:	d122      	bne.n	8002ef2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	d11b      	bne.n	8002ef2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f06f 0208 	mvn.w	r2, #8
 8002ec2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2204      	movs	r2, #4
 8002ec8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	f003 0303 	and.w	r3, r3, #3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f974 	bl	80031c6 <HAL_TIM_IC_CaptureCallback>
 8002ede:	e005      	b.n	8002eec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 f966 	bl	80031b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f977 	bl	80031da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	f003 0310 	and.w	r3, r3, #16
 8002efc:	2b10      	cmp	r3, #16
 8002efe:	d122      	bne.n	8002f46 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	f003 0310 	and.w	r3, r3, #16
 8002f0a:	2b10      	cmp	r3, #16
 8002f0c:	d11b      	bne.n	8002f46 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f06f 0210 	mvn.w	r2, #16
 8002f16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2208      	movs	r2, #8
 8002f1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f94a 	bl	80031c6 <HAL_TIM_IC_CaptureCallback>
 8002f32:	e005      	b.n	8002f40 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 f93c 	bl	80031b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f94d 	bl	80031da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d10e      	bne.n	8002f72 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d107      	bne.n	8002f72 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f06f 0201 	mvn.w	r2, #1
 8002f6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f916 	bl	800319e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f7c:	2b80      	cmp	r3, #128	; 0x80
 8002f7e:	d10e      	bne.n	8002f9e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8a:	2b80      	cmp	r3, #128	; 0x80
 8002f8c:	d107      	bne.n	8002f9e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 faf9 	bl	8003590 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fac:	d10e      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb8:	2b80      	cmp	r3, #128	; 0x80
 8002fba:	d107      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 faec 	bl	80035a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd6:	2b40      	cmp	r3, #64	; 0x40
 8002fd8:	d10e      	bne.n	8002ff8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe4:	2b40      	cmp	r3, #64	; 0x40
 8002fe6:	d107      	bne.n	8002ff8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f8fb 	bl	80031ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	f003 0320 	and.w	r3, r3, #32
 8003002:	2b20      	cmp	r3, #32
 8003004:	d10e      	bne.n	8003024 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f003 0320 	and.w	r3, r3, #32
 8003010:	2b20      	cmp	r3, #32
 8003012:	d107      	bne.n	8003024 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f06f 0220 	mvn.w	r2, #32
 800301c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 faac 	bl	800357c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003024:	bf00      	nop
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800303c:	2b01      	cmp	r3, #1
 800303e:	d101      	bne.n	8003044 <HAL_TIM_ConfigClockSource+0x18>
 8003040:	2302      	movs	r3, #2
 8003042:	e0a8      	b.n	8003196 <HAL_TIM_ConfigClockSource+0x16a>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003062:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003066:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800306e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b40      	cmp	r3, #64	; 0x40
 800307e:	d067      	beq.n	8003150 <HAL_TIM_ConfigClockSource+0x124>
 8003080:	2b40      	cmp	r3, #64	; 0x40
 8003082:	d80b      	bhi.n	800309c <HAL_TIM_ConfigClockSource+0x70>
 8003084:	2b10      	cmp	r3, #16
 8003086:	d073      	beq.n	8003170 <HAL_TIM_ConfigClockSource+0x144>
 8003088:	2b10      	cmp	r3, #16
 800308a:	d802      	bhi.n	8003092 <HAL_TIM_ConfigClockSource+0x66>
 800308c:	2b00      	cmp	r3, #0
 800308e:	d06f      	beq.n	8003170 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003090:	e078      	b.n	8003184 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003092:	2b20      	cmp	r3, #32
 8003094:	d06c      	beq.n	8003170 <HAL_TIM_ConfigClockSource+0x144>
 8003096:	2b30      	cmp	r3, #48	; 0x30
 8003098:	d06a      	beq.n	8003170 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800309a:	e073      	b.n	8003184 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800309c:	2b70      	cmp	r3, #112	; 0x70
 800309e:	d00d      	beq.n	80030bc <HAL_TIM_ConfigClockSource+0x90>
 80030a0:	2b70      	cmp	r3, #112	; 0x70
 80030a2:	d804      	bhi.n	80030ae <HAL_TIM_ConfigClockSource+0x82>
 80030a4:	2b50      	cmp	r3, #80	; 0x50
 80030a6:	d033      	beq.n	8003110 <HAL_TIM_ConfigClockSource+0xe4>
 80030a8:	2b60      	cmp	r3, #96	; 0x60
 80030aa:	d041      	beq.n	8003130 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80030ac:	e06a      	b.n	8003184 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80030ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030b2:	d066      	beq.n	8003182 <HAL_TIM_ConfigClockSource+0x156>
 80030b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030b8:	d017      	beq.n	80030ea <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80030ba:	e063      	b.n	8003184 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6818      	ldr	r0, [r3, #0]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	6899      	ldr	r1, [r3, #8]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f000 f9ae 	bl	800342c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030de:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	609a      	str	r2, [r3, #8]
      break;
 80030e8:	e04c      	b.n	8003184 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6818      	ldr	r0, [r3, #0]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	6899      	ldr	r1, [r3, #8]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f000 f997 	bl	800342c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800310c:	609a      	str	r2, [r3, #8]
      break;
 800310e:	e039      	b.n	8003184 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6818      	ldr	r0, [r3, #0]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	6859      	ldr	r1, [r3, #4]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	461a      	mov	r2, r3
 800311e:	f000 f90b 	bl	8003338 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2150      	movs	r1, #80	; 0x50
 8003128:	4618      	mov	r0, r3
 800312a:	f000 f964 	bl	80033f6 <TIM_ITRx_SetConfig>
      break;
 800312e:	e029      	b.n	8003184 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6818      	ldr	r0, [r3, #0]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	6859      	ldr	r1, [r3, #4]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	461a      	mov	r2, r3
 800313e:	f000 f92a 	bl	8003396 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2160      	movs	r1, #96	; 0x60
 8003148:	4618      	mov	r0, r3
 800314a:	f000 f954 	bl	80033f6 <TIM_ITRx_SetConfig>
      break;
 800314e:	e019      	b.n	8003184 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6818      	ldr	r0, [r3, #0]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	6859      	ldr	r1, [r3, #4]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	461a      	mov	r2, r3
 800315e:	f000 f8eb 	bl	8003338 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2140      	movs	r1, #64	; 0x40
 8003168:	4618      	mov	r0, r3
 800316a:	f000 f944 	bl	80033f6 <TIM_ITRx_SetConfig>
      break;
 800316e:	e009      	b.n	8003184 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4619      	mov	r1, r3
 800317a:	4610      	mov	r0, r2
 800317c:	f000 f93b 	bl	80033f6 <TIM_ITRx_SetConfig>
        break;
 8003180:	e000      	b.n	8003184 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003182:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
	...

08003204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a40      	ldr	r2, [pc, #256]	; (8003318 <TIM_Base_SetConfig+0x114>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d013      	beq.n	8003244 <TIM_Base_SetConfig+0x40>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003222:	d00f      	beq.n	8003244 <TIM_Base_SetConfig+0x40>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a3d      	ldr	r2, [pc, #244]	; (800331c <TIM_Base_SetConfig+0x118>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d00b      	beq.n	8003244 <TIM_Base_SetConfig+0x40>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a3c      	ldr	r2, [pc, #240]	; (8003320 <TIM_Base_SetConfig+0x11c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d007      	beq.n	8003244 <TIM_Base_SetConfig+0x40>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a3b      	ldr	r2, [pc, #236]	; (8003324 <TIM_Base_SetConfig+0x120>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d003      	beq.n	8003244 <TIM_Base_SetConfig+0x40>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a3a      	ldr	r2, [pc, #232]	; (8003328 <TIM_Base_SetConfig+0x124>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d108      	bne.n	8003256 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800324a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	4313      	orrs	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a2f      	ldr	r2, [pc, #188]	; (8003318 <TIM_Base_SetConfig+0x114>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d01f      	beq.n	800329e <TIM_Base_SetConfig+0x9a>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003264:	d01b      	beq.n	800329e <TIM_Base_SetConfig+0x9a>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a2c      	ldr	r2, [pc, #176]	; (800331c <TIM_Base_SetConfig+0x118>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d017      	beq.n	800329e <TIM_Base_SetConfig+0x9a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a2b      	ldr	r2, [pc, #172]	; (8003320 <TIM_Base_SetConfig+0x11c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d013      	beq.n	800329e <TIM_Base_SetConfig+0x9a>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a2a      	ldr	r2, [pc, #168]	; (8003324 <TIM_Base_SetConfig+0x120>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d00f      	beq.n	800329e <TIM_Base_SetConfig+0x9a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a29      	ldr	r2, [pc, #164]	; (8003328 <TIM_Base_SetConfig+0x124>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d00b      	beq.n	800329e <TIM_Base_SetConfig+0x9a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a28      	ldr	r2, [pc, #160]	; (800332c <TIM_Base_SetConfig+0x128>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d007      	beq.n	800329e <TIM_Base_SetConfig+0x9a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a27      	ldr	r2, [pc, #156]	; (8003330 <TIM_Base_SetConfig+0x12c>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d003      	beq.n	800329e <TIM_Base_SetConfig+0x9a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a26      	ldr	r2, [pc, #152]	; (8003334 <TIM_Base_SetConfig+0x130>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d108      	bne.n	80032b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a10      	ldr	r2, [pc, #64]	; (8003318 <TIM_Base_SetConfig+0x114>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d00f      	beq.n	80032fc <TIM_Base_SetConfig+0xf8>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a12      	ldr	r2, [pc, #72]	; (8003328 <TIM_Base_SetConfig+0x124>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d00b      	beq.n	80032fc <TIM_Base_SetConfig+0xf8>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a11      	ldr	r2, [pc, #68]	; (800332c <TIM_Base_SetConfig+0x128>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d007      	beq.n	80032fc <TIM_Base_SetConfig+0xf8>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a10      	ldr	r2, [pc, #64]	; (8003330 <TIM_Base_SetConfig+0x12c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d003      	beq.n	80032fc <TIM_Base_SetConfig+0xf8>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a0f      	ldr	r2, [pc, #60]	; (8003334 <TIM_Base_SetConfig+0x130>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d103      	bne.n	8003304 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	615a      	str	r2, [r3, #20]
}
 800330a:	bf00      	nop
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	40012c00 	.word	0x40012c00
 800331c:	40000400 	.word	0x40000400
 8003320:	40000800 	.word	0x40000800
 8003324:	40000c00 	.word	0x40000c00
 8003328:	40013400 	.word	0x40013400
 800332c:	40014000 	.word	0x40014000
 8003330:	40014400 	.word	0x40014400
 8003334:	40014800 	.word	0x40014800

08003338 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	f023 0201 	bic.w	r2, r3, #1
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003362:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	4313      	orrs	r3, r2
 800336c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f023 030a 	bic.w	r3, r3, #10
 8003374:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	4313      	orrs	r3, r2
 800337c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	621a      	str	r2, [r3, #32]
}
 800338a:	bf00      	nop
 800338c:	371c      	adds	r7, #28
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003396:	b480      	push	{r7}
 8003398:	b087      	sub	sp, #28
 800339a:	af00      	add	r7, sp, #0
 800339c:	60f8      	str	r0, [r7, #12]
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	f023 0210 	bic.w	r2, r3, #16
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	031b      	lsls	r3, r3, #12
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	4313      	orrs	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	621a      	str	r2, [r3, #32]
}
 80033ea:	bf00      	nop
 80033ec:	371c      	adds	r7, #28
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b085      	sub	sp, #20
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800340c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4313      	orrs	r3, r2
 8003414:	f043 0307 	orr.w	r3, r3, #7
 8003418:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	609a      	str	r2, [r3, #8]
}
 8003420:	bf00      	nop
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800342c:	b480      	push	{r7}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
 8003438:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003446:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	021a      	lsls	r2, r3, #8
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	431a      	orrs	r2, r3
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	4313      	orrs	r3, r2
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	4313      	orrs	r3, r2
 8003458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	609a      	str	r2, [r3, #8]
}
 8003460:	bf00      	nop
 8003462:	371c      	adds	r7, #28
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800347c:	2b01      	cmp	r3, #1
 800347e:	d101      	bne.n	8003484 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003480:	2302      	movs	r3, #2
 8003482:	e068      	b.n	8003556 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a2e      	ldr	r2, [pc, #184]	; (8003564 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d004      	beq.n	80034b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a2d      	ldr	r2, [pc, #180]	; (8003568 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d108      	bne.n	80034ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80034be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4313      	orrs	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a1e      	ldr	r2, [pc, #120]	; (8003564 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d01d      	beq.n	800352a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f6:	d018      	beq.n	800352a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a1b      	ldr	r2, [pc, #108]	; (800356c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d013      	beq.n	800352a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a1a      	ldr	r2, [pc, #104]	; (8003570 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d00e      	beq.n	800352a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a18      	ldr	r2, [pc, #96]	; (8003574 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d009      	beq.n	800352a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a13      	ldr	r2, [pc, #76]	; (8003568 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d004      	beq.n	800352a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a14      	ldr	r2, [pc, #80]	; (8003578 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d10c      	bne.n	8003544 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003530:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	4313      	orrs	r3, r2
 800353a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	40012c00 	.word	0x40012c00
 8003568:	40013400 	.word	0x40013400
 800356c:	40000400 	.word	0x40000400
 8003570:	40000800 	.word	0x40000800
 8003574:	40000c00 	.word	0x40000c00
 8003578:	40014000 	.word	0x40014000

0800357c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <arm_std_f32>:
 80035b8:	2901      	cmp	r1, #1
 80035ba:	d97d      	bls.n	80036b8 <arm_std_f32+0x100>
 80035bc:	b530      	push	{r4, r5, lr}
 80035be:	ed2d 8b02 	vpush	{d8}
 80035c2:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80036c8 <arm_std_f32+0x110>
 80035c6:	088d      	lsrs	r5, r1, #2
 80035c8:	b083      	sub	sp, #12
 80035ca:	eef0 4a47 	vmov.f32	s9, s14
 80035ce:	d028      	beq.n	8003622 <arm_std_f32+0x6a>
 80035d0:	f100 0310 	add.w	r3, r0, #16
 80035d4:	462c      	mov	r4, r5
 80035d6:	ed53 7a04 	vldr	s15, [r3, #-16]
 80035da:	ed13 5a03 	vldr	s10, [r3, #-12]
 80035de:	ed53 5a02 	vldr	s11, [r3, #-8]
 80035e2:	ed13 6a01 	vldr	s12, [r3, #-4]
 80035e6:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80035ea:	ee77 7aa4 	vadd.f32	s15, s15, s9
 80035ee:	ee36 7a87 	vadd.f32	s14, s13, s14
 80035f2:	ee65 6a05 	vmul.f32	s13, s10, s10
 80035f6:	ee77 7a85 	vadd.f32	s15, s15, s10
 80035fa:	ee76 6a87 	vadd.f32	s13, s13, s14
 80035fe:	ee25 7aa5 	vmul.f32	s14, s11, s11
 8003602:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8003606:	ee77 6a26 	vadd.f32	s13, s14, s13
 800360a:	ee26 7a06 	vmul.f32	s14, s12, s12
 800360e:	3c01      	subs	r4, #1
 8003610:	ee77 4a86 	vadd.f32	s9, s15, s12
 8003614:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003618:	f103 0310 	add.w	r3, r3, #16
 800361c:	d1db      	bne.n	80035d6 <arm_std_f32+0x1e>
 800361e:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8003622:	f011 0303 	ands.w	r3, r1, #3
 8003626:	d01b      	beq.n	8003660 <arm_std_f32+0xa8>
 8003628:	edd0 7a00 	vldr	s15, [r0]
 800362c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8003630:	3b01      	subs	r3, #1
 8003632:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8003636:	ee37 7a26 	vadd.f32	s14, s14, s13
 800363a:	d011      	beq.n	8003660 <arm_std_f32+0xa8>
 800363c:	edd0 7a01 	vldr	s15, [r0, #4]
 8003640:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8003644:	2b01      	cmp	r3, #1
 8003646:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800364a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800364e:	d007      	beq.n	8003660 <arm_std_f32+0xa8>
 8003650:	edd0 7a02 	vldr	s15, [r0, #8]
 8003654:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8003658:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800365c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003660:	ee07 1a90 	vmov	s15, r1
 8003664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003668:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800366c:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8003670:	eec4 6aa7 	vdiv.f32	s13, s9, s15
 8003674:	eec7 5a86 	vdiv.f32	s11, s15, s12
 8003678:	ee87 0a06 	vdiv.f32	s0, s14, s12
 800367c:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8003680:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8003684:	ee30 0a66 	vsub.f32	s0, s0, s13
 8003688:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800368c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003690:	db0c      	blt.n	80036ac <arm_std_f32+0xf4>
 8003692:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800369a:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800369e:	d40e      	bmi.n	80036be <arm_std_f32+0x106>
 80036a0:	ed82 8a00 	vstr	s16, [r2]
 80036a4:	b003      	add	sp, #12
 80036a6:	ecbd 8b02 	vpop	{d8}
 80036aa:	bd30      	pop	{r4, r5, pc}
 80036ac:	2300      	movs	r3, #0
 80036ae:	6013      	str	r3, [r2, #0]
 80036b0:	b003      	add	sp, #12
 80036b2:	ecbd 8b02 	vpop	{d8}
 80036b6:	bd30      	pop	{r4, r5, pc}
 80036b8:	2300      	movs	r3, #0
 80036ba:	6013      	str	r3, [r2, #0]
 80036bc:	4770      	bx	lr
 80036be:	9201      	str	r2, [sp, #4]
 80036c0:	f003 fbc2 	bl	8006e48 <sqrtf>
 80036c4:	9a01      	ldr	r2, [sp, #4]
 80036c6:	e7eb      	b.n	80036a0 <arm_std_f32+0xe8>
 80036c8:	00000000 	.word	0x00000000

080036cc <arm_mean_f32>:
 80036cc:	b430      	push	{r4, r5}
 80036ce:	088d      	lsrs	r5, r1, #2
 80036d0:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8003744 <arm_mean_f32+0x78>
 80036d4:	d018      	beq.n	8003708 <arm_mean_f32+0x3c>
 80036d6:	f100 0310 	add.w	r3, r0, #16
 80036da:	462c      	mov	r4, r5
 80036dc:	ed53 5a04 	vldr	s11, [r3, #-16]
 80036e0:	ed13 6a03 	vldr	s12, [r3, #-12]
 80036e4:	ed53 6a02 	vldr	s13, [r3, #-8]
 80036e8:	ed13 7a01 	vldr	s14, [r3, #-4]
 80036ec:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80036f0:	3c01      	subs	r4, #1
 80036f2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80036f6:	f103 0310 	add.w	r3, r3, #16
 80036fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003702:	d1eb      	bne.n	80036dc <arm_mean_f32+0x10>
 8003704:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8003708:	f011 0303 	ands.w	r3, r1, #3
 800370c:	d00f      	beq.n	800372e <arm_mean_f32+0x62>
 800370e:	ed90 7a00 	vldr	s14, [r0]
 8003712:	3b01      	subs	r3, #1
 8003714:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003718:	d009      	beq.n	800372e <arm_mean_f32+0x62>
 800371a:	ed90 7a01 	vldr	s14, [r0, #4]
 800371e:	2b01      	cmp	r3, #1
 8003720:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003724:	bf1c      	itt	ne
 8003726:	ed90 7a02 	vldrne	s14, [r0, #8]
 800372a:	ee77 7a87 	vaddne.f32	s15, s15, s14
 800372e:	ee07 1a10 	vmov	s14, r1
 8003732:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003736:	bc30      	pop	{r4, r5}
 8003738:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800373c:	edc2 6a00 	vstr	s13, [r2]
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	00000000 	.word	0x00000000

08003748 <arm_correlate_f32>:
 8003748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800374c:	4299      	cmp	r1, r3
 800374e:	b08d      	sub	sp, #52	; 0x34
 8003750:	f0c0 824c 	bcc.w	8003bec <arm_correlate_f32+0x4a4>
 8003754:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8003756:	eba1 0c03 	sub.w	ip, r1, r3
 800375a:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 800375e:	f04f 0e04 	mov.w	lr, #4
 8003762:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 8003766:	3101      	adds	r1, #1
 8003768:	1ac9      	subs	r1, r1, r3
 800376a:	3c01      	subs	r4, #1
 800376c:	1e5e      	subs	r6, r3, #1
 800376e:	9102      	str	r1, [sp, #8]
 8003770:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8003774:	f000 8294 	beq.w	8003ca0 <arm_correlate_f32+0x558>
 8003778:	eddf 7a53 	vldr	s15, [pc, #332]	; 80038c8 <arm_correlate_f32+0x180>
 800377c:	f1a1 0804 	sub.w	r8, r1, #4
 8003780:	46e1      	mov	r9, ip
 8003782:	4605      	mov	r5, r0
 8003784:	2401      	movs	r4, #1
 8003786:	f014 0703 	ands.w	r7, r4, #3
 800378a:	d01b      	beq.n	80037c4 <arm_correlate_f32+0x7c>
 800378c:	ed91 7a00 	vldr	s14, [r1]
 8003790:	edd5 6a00 	vldr	s13, [r5]
 8003794:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003798:	3f01      	subs	r7, #1
 800379a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800379e:	d011      	beq.n	80037c4 <arm_correlate_f32+0x7c>
 80037a0:	ed91 7a01 	vldr	s14, [r1, #4]
 80037a4:	edd5 6a01 	vldr	s13, [r5, #4]
 80037a8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80037ac:	2f01      	cmp	r7, #1
 80037ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80037b2:	d007      	beq.n	80037c4 <arm_correlate_f32+0x7c>
 80037b4:	ed95 7a02 	vldr	s14, [r5, #8]
 80037b8:	edd1 6a02 	vldr	s13, [r1, #8]
 80037bc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80037c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80037c4:	1c67      	adds	r7, r4, #1
 80037c6:	42bb      	cmp	r3, r7
 80037c8:	edc9 7a00 	vstr	s15, [r9]
 80037cc:	4641      	mov	r1, r8
 80037ce:	44f1      	add	r9, lr
 80037d0:	d03a      	beq.n	8003848 <arm_correlate_f32+0x100>
 80037d2:	ea5f 0a97 	movs.w	sl, r7, lsr #2
 80037d6:	f000 8267 	beq.w	8003ca8 <arm_correlate_f32+0x560>
 80037da:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
 80037de:	f100 0110 	add.w	r1, r0, #16
 80037e2:	eddf 7a39 	vldr	s15, [pc, #228]	; 80038c8 <arm_correlate_f32+0x180>
 80037e6:	eb01 050a 	add.w	r5, r1, sl
 80037ea:	f108 0410 	add.w	r4, r8, #16
 80037ee:	ed11 7a04 	vldr	s14, [r1, #-16]
 80037f2:	ed54 3a04 	vldr	s7, [r4, #-16]
 80037f6:	ed11 6a03 	vldr	s12, [r1, #-12]
 80037fa:	ed14 4a03 	vldr	s8, [r4, #-12]
 80037fe:	ed51 6a02 	vldr	s13, [r1, #-8]
 8003802:	ed54 4a02 	vldr	s9, [r4, #-8]
 8003806:	ed51 5a01 	vldr	s11, [r1, #-4]
 800380a:	ed14 5a01 	vldr	s10, [r4, #-4]
 800380e:	ee27 7a23 	vmul.f32	s14, s14, s7
 8003812:	ee26 6a04 	vmul.f32	s12, s12, s8
 8003816:	ee77 7a27 	vadd.f32	s15, s14, s15
 800381a:	ee26 7aa4 	vmul.f32	s14, s13, s9
 800381e:	ee76 7a27 	vadd.f32	s15, s12, s15
 8003822:	ee65 6a85 	vmul.f32	s13, s11, s10
 8003826:	ee77 7a27 	vadd.f32	s15, s14, s15
 800382a:	3110      	adds	r1, #16
 800382c:	428d      	cmp	r5, r1
 800382e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003832:	f104 0410 	add.w	r4, r4, #16
 8003836:	d1da      	bne.n	80037ee <arm_correlate_f32+0xa6>
 8003838:	eb00 050a 	add.w	r5, r0, sl
 800383c:	eb08 010a 	add.w	r1, r8, sl
 8003840:	f1a8 0804 	sub.w	r8, r8, #4
 8003844:	463c      	mov	r4, r7
 8003846:	e79e      	b.n	8003786 <arm_correlate_f32+0x3e>
 8003848:	2b03      	cmp	r3, #3
 800384a:	fb0e cc04 	mla	ip, lr, r4, ip
 800384e:	f240 81dd 	bls.w	8003c0c <arm_correlate_f32+0x4c4>
 8003852:	9b02      	ldr	r3, [sp, #8]
 8003854:	0899      	lsrs	r1, r3, #2
 8003856:	9103      	str	r1, [sp, #12]
 8003858:	f000 8220 	beq.w	8003c9c <arm_correlate_f32+0x554>
 800385c:	08bb      	lsrs	r3, r7, #2
 800385e:	f007 0403 	and.w	r4, r7, #3
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	f103 0b0c 	add.w	fp, r3, #12
 800386a:	18d5      	adds	r5, r2, r3
 800386c:	1e63      	subs	r3, r4, #1
 800386e:	0109      	lsls	r1, r1, #4
 8003870:	9306      	str	r3, [sp, #24]
 8003872:	f100 080c 	add.w	r8, r0, #12
 8003876:	9401      	str	r4, [sp, #4]
 8003878:	9104      	str	r1, [sp, #16]
 800387a:	ea4f 048e 	mov.w	r4, lr, lsl #2
 800387e:	4441      	add	r1, r8
 8003880:	f102 0310 	add.w	r3, r2, #16
 8003884:	e9cd 6009 	strd	r6, r0, [sp, #36]	; 0x24
 8003888:	9e06      	ldr	r6, [sp, #24]
 800388a:	9405      	str	r4, [sp, #20]
 800388c:	e9cd 7c07 	strd	r7, ip, [sp, #28]
 8003890:	eb0c 0a4e 	add.w	sl, ip, lr, lsl #1
 8003894:	46e1      	mov	r9, ip
 8003896:	4483      	add	fp, r0
 8003898:	460f      	mov	r7, r1
 800389a:	920b      	str	r2, [sp, #44]	; 0x2c
 800389c:	469c      	mov	ip, r3
 800389e:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 80038c8 <arm_correlate_f32+0x180>
 80038a2:	ed58 1a03 	vldr	s3, [r8, #-12]
 80038a6:	ed18 2a02 	vldr	s4, [r8, #-8]
 80038aa:	ed58 2a01 	vldr	s5, [r8, #-4]
 80038ae:	ed98 0a00 	vldr	s0, [r8]
 80038b2:	9900      	ldr	r1, [sp, #0]
 80038b4:	eef0 5a46 	vmov.f32	s11, s12
 80038b8:	eeb0 5a46 	vmov.f32	s10, s12
 80038bc:	eef0 4a46 	vmov.f32	s9, s12
 80038c0:	4663      	mov	r3, ip
 80038c2:	4642      	mov	r2, r8
 80038c4:	e005      	b.n	80038d2 <arm_correlate_f32+0x18a>
 80038c6:	bf00      	nop
 80038c8:	00000000 	.word	0x00000000
 80038cc:	ed90 0a04 	vldr	s0, [r0, #16]
 80038d0:	3210      	adds	r2, #16
 80038d2:	ed53 6a04 	vldr	s13, [r3, #-16]
 80038d6:	ed13 7a03 	vldr	s14, [r3, #-12]
 80038da:	ed53 7a02 	vldr	s15, [r3, #-8]
 80038de:	ed13 1a01 	vldr	s2, [r3, #-4]
 80038e2:	ee62 3a26 	vmul.f32	s7, s4, s13
 80038e6:	ee22 4aa6 	vmul.f32	s8, s5, s13
 80038ea:	ee61 0aa6 	vmul.f32	s1, s3, s13
 80038ee:	edd2 1a01 	vldr	s3, [r2, #4]
 80038f2:	ee66 6a80 	vmul.f32	s13, s13, s0
 80038f6:	ee22 3a07 	vmul.f32	s6, s4, s14
 80038fa:	ee33 5a85 	vadd.f32	s10, s7, s10
 80038fe:	ee74 5a25 	vadd.f32	s11, s8, s11
 8003902:	ee62 3a87 	vmul.f32	s7, s5, s14
 8003906:	ee20 4a07 	vmul.f32	s8, s0, s14
 800390a:	ee70 4aa4 	vadd.f32	s9, s1, s9
 800390e:	ee36 6a86 	vadd.f32	s12, s13, s12
 8003912:	ed92 2a02 	vldr	s4, [r2, #8]
 8003916:	ee27 7a21 	vmul.f32	s14, s14, s3
 800391a:	ee73 3a85 	vadd.f32	s7, s7, s10
 800391e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003922:	ee20 5a27 	vmul.f32	s10, s0, s15
 8003926:	ee33 3a24 	vadd.f32	s6, s6, s9
 800392a:	ee34 4a25 	vadd.f32	s8, s8, s11
 800392e:	ee62 4aa7 	vmul.f32	s9, s5, s15
 8003932:	ee61 5aa7 	vmul.f32	s11, s3, s15
 8003936:	edd2 2a03 	vldr	s5, [r2, #12]
 800393a:	ee67 7a82 	vmul.f32	s15, s15, s4
 800393e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8003942:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003946:	ee74 4a83 	vadd.f32	s9, s9, s6
 800394a:	ee20 0a01 	vmul.f32	s0, s0, s2
 800394e:	ee61 3a81 	vmul.f32	s7, s3, s2
 8003952:	ee75 5a84 	vadd.f32	s11, s11, s8
 8003956:	ee22 7a01 	vmul.f32	s14, s4, s2
 800395a:	ee21 6a22 	vmul.f32	s12, s2, s5
 800395e:	3901      	subs	r1, #1
 8003960:	f103 0310 	add.w	r3, r3, #16
 8003964:	ee70 4a24 	vadd.f32	s9, s0, s9
 8003968:	ee33 5a85 	vadd.f32	s10, s7, s10
 800396c:	ee77 5a25 	vadd.f32	s11, s14, s11
 8003970:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003974:	4610      	mov	r0, r2
 8003976:	d1a9      	bne.n	80038cc <arm_correlate_f32+0x184>
 8003978:	9b01      	ldr	r3, [sp, #4]
 800397a:	b3f3      	cbz	r3, 80039fa <arm_correlate_f32+0x2b2>
 800397c:	edd5 7a00 	vldr	s15, [r5]
 8003980:	ed9b 4a00 	vldr	s8, [fp]
 8003984:	ee61 6aa7 	vmul.f32	s13, s3, s15
 8003988:	ee62 3a27 	vmul.f32	s7, s4, s15
 800398c:	ee22 7aa7 	vmul.f32	s14, s5, s15
 8003990:	ee64 7a27 	vmul.f32	s15, s8, s15
 8003994:	ee74 4aa6 	vadd.f32	s9, s9, s13
 8003998:	ee35 5a23 	vadd.f32	s10, s10, s7
 800399c:	ee75 5a87 	vadd.f32	s11, s11, s14
 80039a0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80039a4:	b34e      	cbz	r6, 80039fa <arm_correlate_f32+0x2b2>
 80039a6:	edd5 7a01 	vldr	s15, [r5, #4]
 80039aa:	eddb 6a01 	vldr	s13, [fp, #4]
 80039ae:	ee22 7a27 	vmul.f32	s14, s4, s15
 80039b2:	ee22 3aa7 	vmul.f32	s6, s5, s15
 80039b6:	ee67 3a84 	vmul.f32	s7, s15, s8
 80039ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039be:	2e01      	cmp	r6, #1
 80039c0:	ee74 4a87 	vadd.f32	s9, s9, s14
 80039c4:	ee35 5a03 	vadd.f32	s10, s10, s6
 80039c8:	ee75 5aa3 	vadd.f32	s11, s11, s7
 80039cc:	ee36 6a27 	vadd.f32	s12, s12, s15
 80039d0:	d013      	beq.n	80039fa <arm_correlate_f32+0x2b2>
 80039d2:	ed95 7a02 	vldr	s14, [r5, #8]
 80039d6:	eddb 3a02 	vldr	s7, [fp, #8]
 80039da:	ee62 7a87 	vmul.f32	s15, s5, s14
 80039de:	ee27 4a04 	vmul.f32	s8, s14, s8
 80039e2:	ee67 6a26 	vmul.f32	s13, s14, s13
 80039e6:	ee27 7a23 	vmul.f32	s14, s14, s7
 80039ea:	ee74 4aa7 	vadd.f32	s9, s9, s15
 80039ee:	ee35 5a04 	vadd.f32	s10, s10, s8
 80039f2:	ee75 5aa6 	vadd.f32	s11, s11, s13
 80039f6:	ee36 6a07 	vadd.f32	s12, s12, s14
 80039fa:	f108 0810 	add.w	r8, r8, #16
 80039fe:	eb09 020e 	add.w	r2, r9, lr
 8003a02:	eb0a 030e 	add.w	r3, sl, lr
 8003a06:	4547      	cmp	r7, r8
 8003a08:	edc9 4a00 	vstr	s9, [r9]
 8003a0c:	f10b 0b10 	add.w	fp, fp, #16
 8003a10:	ed82 5a00 	vstr	s10, [r2]
 8003a14:	44a1      	add	r9, r4
 8003a16:	edca 5a00 	vstr	s11, [sl]
 8003a1a:	ed83 6a00 	vstr	s12, [r3]
 8003a1e:	44a2      	add	sl, r4
 8003a20:	f47f af3d 	bne.w	800389e <arm_correlate_f32+0x156>
 8003a24:	e9dd 7c07 	ldrd	r7, ip, [sp, #28]
 8003a28:	e9dd 6009 	ldrd	r6, r0, [sp, #36]	; 0x24
 8003a2c:	9b03      	ldr	r3, [sp, #12]
 8003a2e:	9c05      	ldr	r4, [sp, #20]
 8003a30:	9904      	ldr	r1, [sp, #16]
 8003a32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003a34:	fb04 cc03 	mla	ip, r4, r3, ip
 8003a38:	4401      	add	r1, r0
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	460d      	mov	r5, r1
 8003a3e:	9303      	str	r3, [sp, #12]
 8003a40:	9b02      	ldr	r3, [sp, #8]
 8003a42:	f013 0303 	ands.w	r3, r3, #3
 8003a46:	9301      	str	r3, [sp, #4]
 8003a48:	d071      	beq.n	8003b2e <arm_correlate_f32+0x3e6>
 8003a4a:	9903      	ldr	r1, [sp, #12]
 8003a4c:	9205      	str	r2, [sp, #20]
 8003a4e:	f007 0403 	and.w	r4, r7, #3
 8003a52:	ea4f 0b97 	mov.w	fp, r7, lsr #2
 8003a56:	1c4f      	adds	r7, r1, #1
 8003a58:	1859      	adds	r1, r3, r1
 8003a5a:	1d03      	adds	r3, r0, #4
 8003a5c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8003a60:	9400      	str	r4, [sp, #0]
 8003a62:	f102 0110 	add.w	r1, r2, #16
 8003a66:	ea4f 1a0b 	mov.w	sl, fp, lsl #4
 8003a6a:	3c01      	subs	r4, #1
 8003a6c:	e9cd 6003 	strd	r6, r0, [sp, #12]
 8003a70:	eb02 090a 	add.w	r9, r2, sl
 8003a74:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8003a78:	46e0      	mov	r8, ip
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	460e      	mov	r6, r1
 8003a7e:	4622      	mov	r2, r4
 8003a80:	ed5f 7a6f 	vldr	s15, [pc, #-444]	; 80038c8 <arm_correlate_f32+0x180>
 8003a84:	f105 0110 	add.w	r1, r5, #16
 8003a88:	4633      	mov	r3, r6
 8003a8a:	465c      	mov	r4, fp
 8003a8c:	ed11 7a04 	vldr	s14, [r1, #-16]
 8003a90:	ed53 3a04 	vldr	s7, [r3, #-16]
 8003a94:	ed11 6a03 	vldr	s12, [r1, #-12]
 8003a98:	ed13 4a03 	vldr	s8, [r3, #-12]
 8003a9c:	ed51 6a02 	vldr	s13, [r1, #-8]
 8003aa0:	ed53 4a02 	vldr	s9, [r3, #-8]
 8003aa4:	ed51 5a01 	vldr	s11, [r1, #-4]
 8003aa8:	ed13 5a01 	vldr	s10, [r3, #-4]
 8003aac:	ee27 7a23 	vmul.f32	s14, s14, s7
 8003ab0:	ee26 6a04 	vmul.f32	s12, s12, s8
 8003ab4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ab8:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8003abc:	ee76 7a27 	vadd.f32	s15, s12, s15
 8003ac0:	ee65 6a85 	vmul.f32	s13, s11, s10
 8003ac4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ac8:	3c01      	subs	r4, #1
 8003aca:	f101 0110 	add.w	r1, r1, #16
 8003ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ad2:	f103 0310 	add.w	r3, r3, #16
 8003ad6:	d1d9      	bne.n	8003a8c <arm_correlate_f32+0x344>
 8003ad8:	9b00      	ldr	r3, [sp, #0]
 8003ada:	4455      	add	r5, sl
 8003adc:	b1d3      	cbz	r3, 8003b14 <arm_correlate_f32+0x3cc>
 8003ade:	ed99 7a00 	vldr	s14, [r9]
 8003ae2:	edd5 6a00 	vldr	s13, [r5]
 8003ae6:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003aea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003aee:	b18a      	cbz	r2, 8003b14 <arm_correlate_f32+0x3cc>
 8003af0:	ed99 7a01 	vldr	s14, [r9, #4]
 8003af4:	edd5 6a01 	vldr	s13, [r5, #4]
 8003af8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003afc:	2a01      	cmp	r2, #1
 8003afe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b02:	d007      	beq.n	8003b14 <arm_correlate_f32+0x3cc>
 8003b04:	ed95 7a02 	vldr	s14, [r5, #8]
 8003b08:	edd9 6a02 	vldr	s13, [r9, #8]
 8003b0c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003b10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b14:	463d      	mov	r5, r7
 8003b16:	3704      	adds	r7, #4
 8003b18:	42b8      	cmp	r0, r7
 8003b1a:	edc8 7a00 	vstr	s15, [r8]
 8003b1e:	44f0      	add	r8, lr
 8003b20:	d1ae      	bne.n	8003a80 <arm_correlate_f32+0x338>
 8003b22:	9b01      	ldr	r3, [sp, #4]
 8003b24:	9a05      	ldr	r2, [sp, #20]
 8003b26:	e9dd 6003 	ldrd	r6, r0, [sp, #12]
 8003b2a:	fb0e cc03 	mla	ip, lr, r3, ip
 8003b2e:	9b02      	ldr	r3, [sp, #8]
 8003b30:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003b34:	08b5      	lsrs	r5, r6, #2
 8003b36:	ed5f 5a9c 	vldr	s11, [pc, #-624]	; 80038c8 <arm_correlate_f32+0x180>
 8003b3a:	f000 80ac 	beq.w	8003c96 <arm_correlate_f32+0x54e>
 8003b3e:	f100 0110 	add.w	r1, r0, #16
 8003b42:	f102 0310 	add.w	r3, r2, #16
 8003b46:	462c      	mov	r4, r5
 8003b48:	ed51 6a04 	vldr	s13, [r1, #-16]
 8003b4c:	ed53 3a04 	vldr	s7, [r3, #-16]
 8003b50:	ed11 7a03 	vldr	s14, [r1, #-12]
 8003b54:	ed13 4a03 	vldr	s8, [r3, #-12]
 8003b58:	ed51 7a02 	vldr	s15, [r1, #-8]
 8003b5c:	ed53 4a02 	vldr	s9, [r3, #-8]
 8003b60:	ed11 6a01 	vldr	s12, [r1, #-4]
 8003b64:	ed13 5a01 	vldr	s10, [r3, #-4]
 8003b68:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8003b6c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8003b70:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8003b74:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8003b78:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003b7c:	ee66 6a05 	vmul.f32	s13, s12, s10
 8003b80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b84:	3c01      	subs	r4, #1
 8003b86:	f101 0110 	add.w	r1, r1, #16
 8003b8a:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8003b8e:	f103 0310 	add.w	r3, r3, #16
 8003b92:	d1d9      	bne.n	8003b48 <arm_correlate_f32+0x400>
 8003b94:	012d      	lsls	r5, r5, #4
 8003b96:	1941      	adds	r1, r0, r5
 8003b98:	4415      	add	r5, r2
 8003b9a:	f016 0303 	ands.w	r3, r6, #3
 8003b9e:	d01b      	beq.n	8003bd8 <arm_correlate_f32+0x490>
 8003ba0:	edd5 7a00 	vldr	s15, [r5]
 8003ba4:	ed91 7a00 	vldr	s14, [r1]
 8003ba8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bac:	3b01      	subs	r3, #1
 8003bae:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8003bb2:	d011      	beq.n	8003bd8 <arm_correlate_f32+0x490>
 8003bb4:	edd5 7a01 	vldr	s15, [r5, #4]
 8003bb8:	ed91 7a01 	vldr	s14, [r1, #4]
 8003bbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8003bc6:	d007      	beq.n	8003bd8 <arm_correlate_f32+0x490>
 8003bc8:	edd1 7a02 	vldr	s15, [r1, #8]
 8003bcc:	ed95 7a02 	vldr	s14, [r5, #8]
 8003bd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bd4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8003bd8:	3e01      	subs	r6, #1
 8003bda:	edcc 5a00 	vstr	s11, [ip]
 8003bde:	f100 0004 	add.w	r0, r0, #4
 8003be2:	44f4      	add	ip, lr
 8003be4:	d1a6      	bne.n	8003b34 <arm_correlate_f32+0x3ec>
 8003be6:	b00d      	add	sp, #52	; 0x34
 8003be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bec:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 8003bf0:	4606      	mov	r6, r0
 8003bf2:	3c02      	subs	r4, #2
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003bf8:	440c      	add	r4, r1
 8003bfa:	460d      	mov	r5, r1
 8003bfc:	eb02 0c84 	add.w	ip, r2, r4, lsl #2
 8003c00:	4619      	mov	r1, r3
 8003c02:	4632      	mov	r2, r6
 8003c04:	f06f 0e03 	mvn.w	lr, #3
 8003c08:	462b      	mov	r3, r5
 8003c0a:	e5aa      	b.n	8003762 <arm_correlate_f32+0x1a>
 8003c0c:	9902      	ldr	r1, [sp, #8]
 8003c0e:	2900      	cmp	r1, #0
 8003c10:	d090      	beq.n	8003b34 <arm_correlate_f32+0x3ec>
 8003c12:	9902      	ldr	r1, [sp, #8]
 8003c14:	ed1f 6ad4 	vldr	s12, [pc, #-848]	; 80038c8 <arm_correlate_f32+0x180>
 8003c18:	ea4f 0881 	mov.w	r8, r1, lsl #2
 8003c1c:	eb00 0708 	add.w	r7, r0, r8
 8003c20:	4601      	mov	r1, r0
 8003c22:	4665      	mov	r5, ip
 8003c24:	e020      	b.n	8003c68 <arm_correlate_f32+0x520>
 8003c26:	edd2 7a00 	vldr	s15, [r2]
 8003c2a:	ecb4 7a01 	vldmia	r4!, {s14}
 8003c2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c32:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003c36:	b18e      	cbz	r6, 8003c5c <arm_correlate_f32+0x514>
 8003c38:	ed92 7a01 	vldr	s14, [r2, #4]
 8003c3c:	edd1 6a01 	vldr	s13, [r1, #4]
 8003c40:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c4a:	d007      	beq.n	8003c5c <arm_correlate_f32+0x514>
 8003c4c:	ed91 7a02 	vldr	s14, [r1, #8]
 8003c50:	edd2 6a02 	vldr	s13, [r2, #8]
 8003c54:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003c58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c5c:	42bc      	cmp	r4, r7
 8003c5e:	edc5 7a00 	vstr	s15, [r5]
 8003c62:	4621      	mov	r1, r4
 8003c64:	4475      	add	r5, lr
 8003c66:	d00b      	beq.n	8003c80 <arm_correlate_f32+0x538>
 8003c68:	460c      	mov	r4, r1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1db      	bne.n	8003c26 <arm_correlate_f32+0x4de>
 8003c6e:	1d0c      	adds	r4, r1, #4
 8003c70:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8003cb0 <arm_correlate_f32+0x568>
 8003c74:	42bc      	cmp	r4, r7
 8003c76:	edc5 7a00 	vstr	s15, [r5]
 8003c7a:	4621      	mov	r1, r4
 8003c7c:	4475      	add	r5, lr
 8003c7e:	d1f3      	bne.n	8003c68 <arm_correlate_f32+0x520>
 8003c80:	9b02      	ldr	r3, [sp, #8]
 8003c82:	4440      	add	r0, r8
 8003c84:	fb0e cc03 	mla	ip, lr, r3, ip
 8003c88:	2e00      	cmp	r6, #0
 8003c8a:	d0ac      	beq.n	8003be6 <arm_correlate_f32+0x49e>
 8003c8c:	08b5      	lsrs	r5, r6, #2
 8003c8e:	eddf 5a08 	vldr	s11, [pc, #32]	; 8003cb0 <arm_correlate_f32+0x568>
 8003c92:	f47f af54 	bne.w	8003b3e <arm_correlate_f32+0x3f6>
 8003c96:	4615      	mov	r5, r2
 8003c98:	4601      	mov	r1, r0
 8003c9a:	e77e      	b.n	8003b9a <arm_correlate_f32+0x452>
 8003c9c:	4605      	mov	r5, r0
 8003c9e:	e6cf      	b.n	8003a40 <arm_correlate_f32+0x2f8>
 8003ca0:	9902      	ldr	r1, [sp, #8]
 8003ca2:	2900      	cmp	r1, #0
 8003ca4:	d1b5      	bne.n	8003c12 <arm_correlate_f32+0x4ca>
 8003ca6:	e79e      	b.n	8003be6 <arm_correlate_f32+0x49e>
 8003ca8:	eddf 7a01 	vldr	s15, [pc, #4]	; 8003cb0 <arm_correlate_f32+0x568>
 8003cac:	4605      	mov	r5, r0
 8003cae:	e5c7      	b.n	8003840 <arm_correlate_f32+0xf8>
 8003cb0:	00000000 	.word	0x00000000

08003cb4 <arm_conv_f32>:
 8003cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cb8:	b08b      	sub	sp, #44	; 0x2c
 8003cba:	4299      	cmp	r1, r3
 8003cbc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8003cbe:	d205      	bcs.n	8003ccc <arm_conv_f32+0x18>
 8003cc0:	4606      	mov	r6, r0
 8003cc2:	460c      	mov	r4, r1
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4632      	mov	r2, r6
 8003cca:	4623      	mov	r3, r4
 8003ccc:	f103 4b80 	add.w	fp, r3, #1073741824	; 0x40000000
 8003cd0:	3101      	adds	r1, #1
 8003cd2:	1ac9      	subs	r1, r1, r3
 8003cd4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003cd8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8003cdc:	9101      	str	r1, [sp, #4]
 8003cde:	1e59      	subs	r1, r3, #1
 8003ce0:	eb02 070b 	add.w	r7, r2, fp
 8003ce4:	f000 8277 	beq.w	80041d6 <arm_conv_f32+0x522>
 8003ce8:	eddf 7aaf 	vldr	s15, [pc, #700]	; 8003fa8 <arm_conv_f32+0x2f4>
 8003cec:	f102 0904 	add.w	r9, r2, #4
 8003cf0:	46aa      	mov	sl, r5
 8003cf2:	4680      	mov	r8, r0
 8003cf4:	2401      	movs	r4, #1
 8003cf6:	f014 0603 	ands.w	r6, r4, #3
 8003cfa:	d01b      	beq.n	8003d34 <arm_conv_f32+0x80>
 8003cfc:	ed92 7a00 	vldr	s14, [r2]
 8003d00:	edd8 6a00 	vldr	s13, [r8]
 8003d04:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003d08:	3e01      	subs	r6, #1
 8003d0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d0e:	d011      	beq.n	8003d34 <arm_conv_f32+0x80>
 8003d10:	ed12 7a01 	vldr	s14, [r2, #-4]
 8003d14:	edd8 6a01 	vldr	s13, [r8, #4]
 8003d18:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003d1c:	2e01      	cmp	r6, #1
 8003d1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d22:	d007      	beq.n	8003d34 <arm_conv_f32+0x80>
 8003d24:	ed98 7a02 	vldr	s14, [r8, #8]
 8003d28:	ed52 6a02 	vldr	s13, [r2, #-8]
 8003d2c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003d30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d34:	3401      	adds	r4, #1
 8003d36:	42a3      	cmp	r3, r4
 8003d38:	ecea 7a01 	vstmia	sl!, {s15}
 8003d3c:	464a      	mov	r2, r9
 8003d3e:	d03a      	beq.n	8003db6 <arm_conv_f32+0x102>
 8003d40:	ea5f 0e94 	movs.w	lr, r4, lsr #2
 8003d44:	f000 824c 	beq.w	80041e0 <arm_conv_f32+0x52c>
 8003d48:	f100 0210 	add.w	r2, r0, #16
 8003d4c:	ea4f 180e 	mov.w	r8, lr, lsl #4
 8003d50:	eddf 7a95 	vldr	s15, [pc, #596]	; 8003fa8 <arm_conv_f32+0x2f4>
 8003d54:	eb02 0c08 	add.w	ip, r2, r8
 8003d58:	f1a9 0610 	sub.w	r6, r9, #16
 8003d5c:	ed12 7a04 	vldr	s14, [r2, #-16]
 8003d60:	edd6 3a04 	vldr	s7, [r6, #16]
 8003d64:	ed12 6a03 	vldr	s12, [r2, #-12]
 8003d68:	ed96 4a03 	vldr	s8, [r6, #12]
 8003d6c:	ed52 6a02 	vldr	s13, [r2, #-8]
 8003d70:	edd6 4a02 	vldr	s9, [r6, #8]
 8003d74:	ed52 5a01 	vldr	s11, [r2, #-4]
 8003d78:	ed96 5a01 	vldr	s10, [r6, #4]
 8003d7c:	ee27 7a23 	vmul.f32	s14, s14, s7
 8003d80:	ee26 6a04 	vmul.f32	s12, s12, s8
 8003d84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d88:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8003d8c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8003d90:	ee65 6a85 	vmul.f32	s13, s11, s10
 8003d94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d98:	3210      	adds	r2, #16
 8003d9a:	4594      	cmp	ip, r2
 8003d9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003da0:	f1a6 0610 	sub.w	r6, r6, #16
 8003da4:	d1da      	bne.n	8003d5c <arm_conv_f32+0xa8>
 8003da6:	ebce 7e0e 	rsb	lr, lr, lr, lsl #28
 8003daa:	eb09 120e 	add.w	r2, r9, lr, lsl #4
 8003dae:	4480      	add	r8, r0
 8003db0:	f109 0904 	add.w	r9, r9, #4
 8003db4:	e79f      	b.n	8003cf6 <arm_conv_f32+0x42>
 8003db6:	2b03      	cmp	r3, #3
 8003db8:	445d      	add	r5, fp
 8003dba:	f240 80e9 	bls.w	8003f90 <arm_conv_f32+0x2dc>
 8003dbe:	9b01      	ldr	r3, [sp, #4]
 8003dc0:	089a      	lsrs	r2, r3, #2
 8003dc2:	9202      	str	r2, [sp, #8]
 8003dc4:	f000 8203 	beq.w	80041ce <arm_conv_f32+0x51a>
 8003dc8:	ea4f 0894 	mov.w	r8, r4, lsr #2
 8003dcc:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8003dd0:	0112      	lsls	r2, r2, #4
 8003dd2:	f004 0603 	and.w	r6, r4, #3
 8003dd6:	9203      	str	r2, [sp, #12]
 8003dd8:	f1a3 0a10 	sub.w	sl, r3, #16
 8003ddc:	f1a3 020c 	sub.w	r2, r3, #12
 8003de0:	3b08      	subs	r3, #8
 8003de2:	9204      	str	r2, [sp, #16]
 8003de4:	9305      	str	r3, [sp, #20]
 8003de6:	f106 39ff 	add.w	r9, r6, #4294967295
 8003dea:	e9cd 7008 	strd	r7, r0, [sp, #32]
 8003dee:	9a03      	ldr	r2, [sp, #12]
 8003df0:	f100 0c1c 	add.w	ip, r0, #28
 8003df4:	e9cd 4106 	strd	r4, r1, [sp, #24]
 8003df8:	464c      	mov	r4, r9
 8003dfa:	e9dd 9004 	ldrd	r9, r0, [sp, #16]
 8003dfe:	ebc8 7e08 	rsb	lr, r8, r8, lsl #28
 8003e02:	f1a7 0310 	sub.w	r3, r7, #16
 8003e06:	eb07 1e0e 	add.w	lr, r7, lr, lsl #4
 8003e0a:	eb05 0b02 	add.w	fp, r5, r2
 8003e0e:	461f      	mov	r7, r3
 8003e10:	3510      	adds	r5, #16
 8003e12:	ed9f 6a65 	vldr	s12, [pc, #404]	; 8003fa8 <arm_conv_f32+0x2f4>
 8003e16:	ed1c 1a07 	vldr	s2, [ip, #-28]	; 0xffffffe4
 8003e1a:	ed5c 1a06 	vldr	s3, [ip, #-24]	; 0xffffffe8
 8003e1e:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 8003e22:	eeb0 5a46 	vmov.f32	s10, s12
 8003e26:	eef0 4a46 	vmov.f32	s9, s12
 8003e2a:	eef0 5a46 	vmov.f32	s11, s12
 8003e2e:	463a      	mov	r2, r7
 8003e30:	4663      	mov	r3, ip
 8003e32:	4641      	mov	r1, r8
 8003e34:	edd2 6a04 	vldr	s13, [r2, #16]
 8003e38:	ed13 0a04 	vldr	s0, [r3, #-16]
 8003e3c:	ed92 7a03 	vldr	s14, [r2, #12]
 8003e40:	edd2 7a02 	vldr	s15, [r2, #8]
 8003e44:	edd2 0a01 	vldr	s1, [r2, #4]
 8003e48:	ee21 3aa6 	vmul.f32	s6, s3, s13
 8003e4c:	ee62 3a26 	vmul.f32	s7, s4, s13
 8003e50:	ee61 2a26 	vmul.f32	s5, s2, s13
 8003e54:	ed13 1a03 	vldr	s2, [r3, #-12]
 8003e58:	ee66 6a80 	vmul.f32	s13, s13, s0
 8003e5c:	ee21 4a87 	vmul.f32	s8, s3, s14
 8003e60:	ee73 4a24 	vadd.f32	s9, s6, s9
 8003e64:	ee33 5a85 	vadd.f32	s10, s7, s10
 8003e68:	ee22 3a07 	vmul.f32	s6, s4, s14
 8003e6c:	ed53 1a02 	vldr	s3, [r3, #-8]
 8003e70:	ee72 2aa5 	vadd.f32	s5, s5, s11
 8003e74:	ee36 6a86 	vadd.f32	s12, s13, s12
 8003e78:	ee60 3a07 	vmul.f32	s7, s0, s14
 8003e7c:	ee27 7a01 	vmul.f32	s14, s14, s2
 8003e80:	ee33 3a24 	vadd.f32	s6, s6, s9
 8003e84:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003e88:	ee74 2a22 	vadd.f32	s5, s8, s5
 8003e8c:	ee60 4a27 	vmul.f32	s9, s0, s15
 8003e90:	ee22 4a27 	vmul.f32	s8, s4, s15
 8003e94:	ee73 3a85 	vadd.f32	s7, s7, s10
 8003e98:	ed13 2a01 	vldr	s4, [r3, #-4]
 8003e9c:	ee21 5a27 	vmul.f32	s10, s2, s15
 8003ea0:	ee67 7aa1 	vmul.f32	s15, s15, s3
 8003ea4:	ee74 4a83 	vadd.f32	s9, s9, s6
 8003ea8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003eac:	ee34 4a22 	vadd.f32	s8, s8, s5
 8003eb0:	ee60 5a20 	vmul.f32	s11, s0, s1
 8003eb4:	ee21 3a20 	vmul.f32	s6, s2, s1
 8003eb8:	ee35 5a23 	vadd.f32	s10, s10, s7
 8003ebc:	ee21 7aa0 	vmul.f32	s14, s3, s1
 8003ec0:	ee20 6a82 	vmul.f32	s12, s1, s4
 8003ec4:	3901      	subs	r1, #1
 8003ec6:	f1a2 0210 	sub.w	r2, r2, #16
 8003eca:	ee75 5a84 	vadd.f32	s11, s11, s8
 8003ece:	ee73 4a24 	vadd.f32	s9, s6, s9
 8003ed2:	ee37 5a05 	vadd.f32	s10, s14, s10
 8003ed6:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003eda:	f103 0310 	add.w	r3, r3, #16
 8003ede:	d1a9      	bne.n	8003e34 <arm_conv_f32+0x180>
 8003ee0:	eb0a 030c 	add.w	r3, sl, ip
 8003ee4:	2e00      	cmp	r6, #0
 8003ee6:	d042      	beq.n	8003f6e <arm_conv_f32+0x2ba>
 8003ee8:	edde 7a00 	vldr	s15, [lr]
 8003eec:	ed93 4a00 	vldr	s8, [r3]
 8003ef0:	ee61 6a27 	vmul.f32	s13, s2, s15
 8003ef4:	ee61 3aa7 	vmul.f32	s7, s3, s15
 8003ef8:	ee22 7a27 	vmul.f32	s14, s4, s15
 8003efc:	ee64 7a27 	vmul.f32	s15, s8, s15
 8003f00:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8003f04:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8003f08:	ee35 5a07 	vadd.f32	s10, s10, s14
 8003f0c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003f10:	eb09 030c 	add.w	r3, r9, ip
 8003f14:	b35c      	cbz	r4, 8003f6e <arm_conv_f32+0x2ba>
 8003f16:	ed5e 7a01 	vldr	s15, [lr, #-4]
 8003f1a:	edd3 6a00 	vldr	s13, [r3]
 8003f1e:	ee21 7aa7 	vmul.f32	s14, s3, s15
 8003f22:	ee22 3a27 	vmul.f32	s6, s4, s15
 8003f26:	ee67 3a84 	vmul.f32	s7, s15, s8
 8003f2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f2e:	2c01      	cmp	r4, #1
 8003f30:	ee75 5a87 	vadd.f32	s11, s11, s14
 8003f34:	ee74 4a83 	vadd.f32	s9, s9, s6
 8003f38:	ee35 5a23 	vadd.f32	s10, s10, s7
 8003f3c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003f40:	eb00 030c 	add.w	r3, r0, ip
 8003f44:	d013      	beq.n	8003f6e <arm_conv_f32+0x2ba>
 8003f46:	ed1e 7a02 	vldr	s14, [lr, #-8]
 8003f4a:	edd3 3a00 	vldr	s7, [r3]
 8003f4e:	ee62 7a07 	vmul.f32	s15, s4, s14
 8003f52:	ee27 4a04 	vmul.f32	s8, s14, s8
 8003f56:	ee67 6a26 	vmul.f32	s13, s14, s13
 8003f5a:	ee27 7a23 	vmul.f32	s14, s14, s7
 8003f5e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8003f62:	ee74 4a84 	vadd.f32	s9, s9, s8
 8003f66:	ee35 5a26 	vadd.f32	s10, s10, s13
 8003f6a:	ee36 6a07 	vadd.f32	s12, s12, s14
 8003f6e:	45ab      	cmp	fp, r5
 8003f70:	ed45 5a04 	vstr	s11, [r5, #-16]
 8003f74:	ed45 4a03 	vstr	s9, [r5, #-12]
 8003f78:	ed05 5a02 	vstr	s10, [r5, #-8]
 8003f7c:	ed05 6a01 	vstr	s12, [r5, #-4]
 8003f80:	f10c 0c10 	add.w	ip, ip, #16
 8003f84:	f105 0310 	add.w	r3, r5, #16
 8003f88:	f000 809e 	beq.w	80040c8 <arm_conv_f32+0x414>
 8003f8c:	461d      	mov	r5, r3
 8003f8e:	e740      	b.n	8003e12 <arm_conv_f32+0x15e>
 8003f90:	9a01      	ldr	r2, [sp, #4]
 8003f92:	46ac      	mov	ip, r5
 8003f94:	2a00      	cmp	r2, #0
 8003f96:	d037      	beq.n	8004008 <arm_conv_f32+0x354>
 8003f98:	9a01      	ldr	r2, [sp, #4]
 8003f9a:	ed9f 6a03 	vldr	s12, [pc, #12]	; 8003fa8 <arm_conv_f32+0x2f4>
 8003f9e:	0096      	lsls	r6, r2, #2
 8003fa0:	eb05 0c06 	add.w	ip, r5, r6
 8003fa4:	4604      	mov	r4, r0
 8003fa6:	e021      	b.n	8003fec <arm_conv_f32+0x338>
 8003fa8:	00000000 	.word	0x00000000
 8003fac:	edd7 7a00 	vldr	s15, [r7]
 8003fb0:	ecb2 7a01 	vldmia	r2!, {s14}
 8003fb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fb8:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003fbc:	b189      	cbz	r1, 8003fe2 <arm_conv_f32+0x32e>
 8003fbe:	ed17 7a01 	vldr	s14, [r7, #-4]
 8003fc2:	edd4 6a01 	vldr	s13, [r4, #4]
 8003fc6:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003fd0:	d007      	beq.n	8003fe2 <arm_conv_f32+0x32e>
 8003fd2:	ed94 7a02 	vldr	s14, [r4, #8]
 8003fd6:	ed57 6a02 	vldr	s13, [r7, #-8]
 8003fda:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003fde:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003fe2:	ece5 7a01 	vstmia	r5!, {s15}
 8003fe6:	4565      	cmp	r5, ip
 8003fe8:	4614      	mov	r4, r2
 8003fea:	d00a      	beq.n	8004002 <arm_conv_f32+0x34e>
 8003fec:	4622      	mov	r2, r4
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1dc      	bne.n	8003fac <arm_conv_f32+0x2f8>
 8003ff2:	ed5f 7a13 	vldr	s15, [pc, #-76]	; 8003fa8 <arm_conv_f32+0x2f4>
 8003ff6:	ece5 7a01 	vstmia	r5!, {s15}
 8003ffa:	1d22      	adds	r2, r4, #4
 8003ffc:	4565      	cmp	r5, ip
 8003ffe:	4614      	mov	r4, r2
 8004000:	d1f4      	bne.n	8003fec <arm_conv_f32+0x338>
 8004002:	4430      	add	r0, r6
 8004004:	2900      	cmp	r1, #0
 8004006:	d059      	beq.n	80040bc <arm_conv_f32+0x408>
 8004008:	088d      	lsrs	r5, r1, #2
 800400a:	ed5f 5a19 	vldr	s11, [pc, #-100]	; 8003fa8 <arm_conv_f32+0x2f4>
 800400e:	d058      	beq.n	80040c2 <arm_conv_f32+0x40e>
 8004010:	f100 0210 	add.w	r2, r0, #16
 8004014:	f1a7 0310 	sub.w	r3, r7, #16
 8004018:	462c      	mov	r4, r5
 800401a:	ed52 6a04 	vldr	s13, [r2, #-16]
 800401e:	edd3 3a04 	vldr	s7, [r3, #16]
 8004022:	ed12 7a03 	vldr	s14, [r2, #-12]
 8004026:	ed93 4a03 	vldr	s8, [r3, #12]
 800402a:	ed52 7a02 	vldr	s15, [r2, #-8]
 800402e:	edd3 4a02 	vldr	s9, [r3, #8]
 8004032:	ed12 6a01 	vldr	s12, [r2, #-4]
 8004036:	ed93 5a01 	vldr	s10, [r3, #4]
 800403a:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800403e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8004042:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8004046:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800404a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800404e:	ee66 6a05 	vmul.f32	s13, s12, s10
 8004052:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004056:	3c01      	subs	r4, #1
 8004058:	f102 0210 	add.w	r2, r2, #16
 800405c:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8004060:	f1a3 0310 	sub.w	r3, r3, #16
 8004064:	d1d9      	bne.n	800401a <arm_conv_f32+0x366>
 8004066:	ebc5 7305 	rsb	r3, r5, r5, lsl #28
 800406a:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 800406e:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 8004072:	f011 0203 	ands.w	r2, r1, #3
 8004076:	d01b      	beq.n	80040b0 <arm_conv_f32+0x3fc>
 8004078:	edd3 7a00 	vldr	s15, [r3]
 800407c:	ed95 7a00 	vldr	s14, [r5]
 8004080:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004084:	3a01      	subs	r2, #1
 8004086:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800408a:	d011      	beq.n	80040b0 <arm_conv_f32+0x3fc>
 800408c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8004090:	ed95 7a01 	vldr	s14, [r5, #4]
 8004094:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004098:	2a01      	cmp	r2, #1
 800409a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800409e:	d007      	beq.n	80040b0 <arm_conv_f32+0x3fc>
 80040a0:	edd5 7a02 	vldr	s15, [r5, #8]
 80040a4:	ed13 7a02 	vldr	s14, [r3, #-8]
 80040a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040ac:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80040b0:	3901      	subs	r1, #1
 80040b2:	ecec 5a01 	vstmia	ip!, {s11}
 80040b6:	f100 0004 	add.w	r0, r0, #4
 80040ba:	d1a5      	bne.n	8004008 <arm_conv_f32+0x354>
 80040bc:	b00b      	add	sp, #44	; 0x2c
 80040be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040c2:	463b      	mov	r3, r7
 80040c4:	4605      	mov	r5, r0
 80040c6:	e7d4      	b.n	8004072 <arm_conv_f32+0x3be>
 80040c8:	9b02      	ldr	r3, [sp, #8]
 80040ca:	e9dd 7008 	ldrd	r7, r0, [sp, #32]
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	9302      	str	r3, [sp, #8]
 80040d2:	9b03      	ldr	r3, [sp, #12]
 80040d4:	e9dd 4106 	ldrd	r4, r1, [sp, #24]
 80040d8:	4403      	add	r3, r0
 80040da:	465d      	mov	r5, fp
 80040dc:	469e      	mov	lr, r3
 80040de:	9b01      	ldr	r3, [sp, #4]
 80040e0:	f013 0c03 	ands.w	ip, r3, #3
 80040e4:	d075      	beq.n	80041d2 <arm_conv_f32+0x51e>
 80040e6:	9b02      	ldr	r3, [sp, #8]
 80040e8:	ea4f 0a94 	mov.w	sl, r4, lsr #2
 80040ec:	f004 0403 	and.w	r4, r4, #3
 80040f0:	f104 3bff 	add.w	fp, r4, #4294967295
 80040f4:	f103 0801 	add.w	r8, r3, #1
 80040f8:	ea4f 130a 	mov.w	r3, sl, lsl #4
 80040fc:	e9cd 7002 	strd	r7, r0, [sp, #8]
 8004100:	ebca 790a 	rsb	r9, sl, sl, lsl #28
 8004104:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8004108:	f1a7 0210 	sub.w	r2, r7, #16
 800410c:	4618      	mov	r0, r3
 800410e:	465b      	mov	r3, fp
 8004110:	eb07 1909 	add.w	r9, r7, r9, lsl #4
 8004114:	468b      	mov	fp, r1
 8004116:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 800411a:	4621      	mov	r1, r4
 800411c:	4617      	mov	r7, r2
 800411e:	461c      	mov	r4, r3
 8004120:	ed5f 7a5f 	vldr	s15, [pc, #-380]	; 8003fa8 <arm_conv_f32+0x2f4>
 8004124:	f10e 0210 	add.w	r2, lr, #16
 8004128:	463b      	mov	r3, r7
 800412a:	4656      	mov	r6, sl
 800412c:	ed12 7a04 	vldr	s14, [r2, #-16]
 8004130:	edd3 3a04 	vldr	s7, [r3, #16]
 8004134:	ed12 6a03 	vldr	s12, [r2, #-12]
 8004138:	ed93 4a03 	vldr	s8, [r3, #12]
 800413c:	ed52 6a02 	vldr	s13, [r2, #-8]
 8004140:	edd3 4a02 	vldr	s9, [r3, #8]
 8004144:	ed52 5a01 	vldr	s11, [r2, #-4]
 8004148:	ed93 5a01 	vldr	s10, [r3, #4]
 800414c:	ee27 7a23 	vmul.f32	s14, s14, s7
 8004150:	ee26 6a04 	vmul.f32	s12, s12, s8
 8004154:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004158:	ee26 7aa4 	vmul.f32	s14, s13, s9
 800415c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8004160:	ee65 6a85 	vmul.f32	s13, s11, s10
 8004164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004168:	3e01      	subs	r6, #1
 800416a:	f102 0210 	add.w	r2, r2, #16
 800416e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004172:	f1a3 0310 	sub.w	r3, r3, #16
 8004176:	d1d9      	bne.n	800412c <arm_conv_f32+0x478>
 8004178:	4486      	add	lr, r0
 800417a:	b1d1      	cbz	r1, 80041b2 <arm_conv_f32+0x4fe>
 800417c:	ed99 7a00 	vldr	s14, [r9]
 8004180:	edde 6a00 	vldr	s13, [lr]
 8004184:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004188:	ee77 7a87 	vadd.f32	s15, s15, s14
 800418c:	b18c      	cbz	r4, 80041b2 <arm_conv_f32+0x4fe>
 800418e:	ed19 7a01 	vldr	s14, [r9, #-4]
 8004192:	edde 6a01 	vldr	s13, [lr, #4]
 8004196:	ee27 7a26 	vmul.f32	s14, s14, s13
 800419a:	2c01      	cmp	r4, #1
 800419c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041a0:	d007      	beq.n	80041b2 <arm_conv_f32+0x4fe>
 80041a2:	ed9e 7a02 	vldr	s14, [lr, #8]
 80041a6:	ed59 6a02 	vldr	s13, [r9, #-8]
 80041aa:	ee27 7a26 	vmul.f32	s14, s14, s13
 80041ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041b2:	ece5 7a01 	vstmia	r5!, {s15}
 80041b6:	4565      	cmp	r5, ip
 80041b8:	46c6      	mov	lr, r8
 80041ba:	f108 0804 	add.w	r8, r8, #4
 80041be:	d1af      	bne.n	8004120 <arm_conv_f32+0x46c>
 80041c0:	e9dd 7002 	ldrd	r7, r0, [sp, #8]
 80041c4:	4659      	mov	r1, fp
 80041c6:	9b01      	ldr	r3, [sp, #4]
 80041c8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80041cc:	e71c      	b.n	8004008 <arm_conv_f32+0x354>
 80041ce:	4686      	mov	lr, r0
 80041d0:	e785      	b.n	80040de <arm_conv_f32+0x42a>
 80041d2:	46ac      	mov	ip, r5
 80041d4:	e7f7      	b.n	80041c6 <arm_conv_f32+0x512>
 80041d6:	9a01      	ldr	r2, [sp, #4]
 80041d8:	2a00      	cmp	r2, #0
 80041da:	f47f aedd 	bne.w	8003f98 <arm_conv_f32+0x2e4>
 80041de:	e76d      	b.n	80040bc <arm_conv_f32+0x408>
 80041e0:	ed5f 7a8f 	vldr	s15, [pc, #-572]	; 8003fa8 <arm_conv_f32+0x2f4>
 80041e4:	4680      	mov	r8, r0
 80041e6:	e5e3      	b.n	8003db0 <arm_conv_f32+0xfc>

080041e8 <arm_sub_f32>:
 80041e8:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 80041ec:	b4f0      	push	{r4, r5, r6, r7}
 80041ee:	d033      	beq.n	8004258 <arm_sub_f32+0x70>
 80041f0:	f100 0610 	add.w	r6, r0, #16
 80041f4:	f101 0510 	add.w	r5, r1, #16
 80041f8:	f102 0410 	add.w	r4, r2, #16
 80041fc:	4667      	mov	r7, ip
 80041fe:	ed15 7a04 	vldr	s14, [r5, #-16]
 8004202:	ed56 7a04 	vldr	s15, [r6, #-16]
 8004206:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800420a:	3f01      	subs	r7, #1
 800420c:	ed44 7a04 	vstr	s15, [r4, #-16]
 8004210:	ed15 7a03 	vldr	s14, [r5, #-12]
 8004214:	ed56 7a03 	vldr	s15, [r6, #-12]
 8004218:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800421c:	f106 0610 	add.w	r6, r6, #16
 8004220:	ed44 7a03 	vstr	s15, [r4, #-12]
 8004224:	ed15 7a02 	vldr	s14, [r5, #-8]
 8004228:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 800422c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004230:	f105 0510 	add.w	r5, r5, #16
 8004234:	ed44 7a02 	vstr	s15, [r4, #-8]
 8004238:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 800423c:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8004240:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004244:	f104 0410 	add.w	r4, r4, #16
 8004248:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800424c:	d1d7      	bne.n	80041fe <arm_sub_f32+0x16>
 800424e:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8004252:	4420      	add	r0, r4
 8004254:	4421      	add	r1, r4
 8004256:	4422      	add	r2, r4
 8004258:	f013 0303 	ands.w	r3, r3, #3
 800425c:	d01b      	beq.n	8004296 <arm_sub_f32+0xae>
 800425e:	edd0 7a00 	vldr	s15, [r0]
 8004262:	ed91 7a00 	vldr	s14, [r1]
 8004266:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800426a:	3b01      	subs	r3, #1
 800426c:	edc2 7a00 	vstr	s15, [r2]
 8004270:	d011      	beq.n	8004296 <arm_sub_f32+0xae>
 8004272:	edd0 7a01 	vldr	s15, [r0, #4]
 8004276:	ed91 7a01 	vldr	s14, [r1, #4]
 800427a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800427e:	2b01      	cmp	r3, #1
 8004280:	edc2 7a01 	vstr	s15, [r2, #4]
 8004284:	d007      	beq.n	8004296 <arm_sub_f32+0xae>
 8004286:	edd0 7a02 	vldr	s15, [r0, #8]
 800428a:	ed91 7a02 	vldr	s14, [r1, #8]
 800428e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004292:	edc2 7a02 	vstr	s15, [r2, #8]
 8004296:	bcf0      	pop	{r4, r5, r6, r7}
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop

0800429c <arm_mult_f32>:
 800429c:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 80042a0:	b4f0      	push	{r4, r5, r6, r7}
 80042a2:	d033      	beq.n	800430c <arm_mult_f32+0x70>
 80042a4:	f100 0610 	add.w	r6, r0, #16
 80042a8:	f101 0510 	add.w	r5, r1, #16
 80042ac:	f102 0410 	add.w	r4, r2, #16
 80042b0:	4667      	mov	r7, ip
 80042b2:	ed15 7a04 	vldr	s14, [r5, #-16]
 80042b6:	ed56 7a04 	vldr	s15, [r6, #-16]
 80042ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042be:	3f01      	subs	r7, #1
 80042c0:	ed44 7a04 	vstr	s15, [r4, #-16]
 80042c4:	ed15 7a03 	vldr	s14, [r5, #-12]
 80042c8:	ed56 7a03 	vldr	s15, [r6, #-12]
 80042cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042d0:	f106 0610 	add.w	r6, r6, #16
 80042d4:	ed44 7a03 	vstr	s15, [r4, #-12]
 80042d8:	ed15 7a02 	vldr	s14, [r5, #-8]
 80042dc:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 80042e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042e4:	f105 0510 	add.w	r5, r5, #16
 80042e8:	ed44 7a02 	vstr	s15, [r4, #-8]
 80042ec:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 80042f0:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 80042f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042f8:	f104 0410 	add.w	r4, r4, #16
 80042fc:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8004300:	d1d7      	bne.n	80042b2 <arm_mult_f32+0x16>
 8004302:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8004306:	4420      	add	r0, r4
 8004308:	4421      	add	r1, r4
 800430a:	4422      	add	r2, r4
 800430c:	f013 0303 	ands.w	r3, r3, #3
 8004310:	d01b      	beq.n	800434a <arm_mult_f32+0xae>
 8004312:	edd1 7a00 	vldr	s15, [r1]
 8004316:	ed90 7a00 	vldr	s14, [r0]
 800431a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800431e:	3b01      	subs	r3, #1
 8004320:	edc2 7a00 	vstr	s15, [r2]
 8004324:	d011      	beq.n	800434a <arm_mult_f32+0xae>
 8004326:	edd0 7a01 	vldr	s15, [r0, #4]
 800432a:	ed91 7a01 	vldr	s14, [r1, #4]
 800432e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004332:	2b01      	cmp	r3, #1
 8004334:	edc2 7a01 	vstr	s15, [r2, #4]
 8004338:	d007      	beq.n	800434a <arm_mult_f32+0xae>
 800433a:	edd0 7a02 	vldr	s15, [r0, #8]
 800433e:	ed91 7a02 	vldr	s14, [r1, #8]
 8004342:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004346:	edc2 7a02 	vstr	s15, [r2, #8]
 800434a:	bcf0      	pop	{r4, r5, r6, r7}
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop

08004350 <arm_add_f32>:
 8004350:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8004354:	b4f0      	push	{r4, r5, r6, r7}
 8004356:	d033      	beq.n	80043c0 <arm_add_f32+0x70>
 8004358:	f100 0610 	add.w	r6, r0, #16
 800435c:	f101 0510 	add.w	r5, r1, #16
 8004360:	f102 0410 	add.w	r4, r2, #16
 8004364:	4667      	mov	r7, ip
 8004366:	ed15 7a04 	vldr	s14, [r5, #-16]
 800436a:	ed56 7a04 	vldr	s15, [r6, #-16]
 800436e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004372:	3f01      	subs	r7, #1
 8004374:	ed44 7a04 	vstr	s15, [r4, #-16]
 8004378:	ed15 7a03 	vldr	s14, [r5, #-12]
 800437c:	ed56 7a03 	vldr	s15, [r6, #-12]
 8004380:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004384:	f106 0610 	add.w	r6, r6, #16
 8004388:	ed44 7a03 	vstr	s15, [r4, #-12]
 800438c:	ed15 7a02 	vldr	s14, [r5, #-8]
 8004390:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8004394:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004398:	f105 0510 	add.w	r5, r5, #16
 800439c:	ed44 7a02 	vstr	s15, [r4, #-8]
 80043a0:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 80043a4:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 80043a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043ac:	f104 0410 	add.w	r4, r4, #16
 80043b0:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 80043b4:	d1d7      	bne.n	8004366 <arm_add_f32+0x16>
 80043b6:	ea4f 140c 	mov.w	r4, ip, lsl #4
 80043ba:	4420      	add	r0, r4
 80043bc:	4421      	add	r1, r4
 80043be:	4422      	add	r2, r4
 80043c0:	f013 0303 	ands.w	r3, r3, #3
 80043c4:	d01b      	beq.n	80043fe <arm_add_f32+0xae>
 80043c6:	edd1 7a00 	vldr	s15, [r1]
 80043ca:	ed90 7a00 	vldr	s14, [r0]
 80043ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043d2:	3b01      	subs	r3, #1
 80043d4:	edc2 7a00 	vstr	s15, [r2]
 80043d8:	d011      	beq.n	80043fe <arm_add_f32+0xae>
 80043da:	edd0 7a01 	vldr	s15, [r0, #4]
 80043de:	ed91 7a01 	vldr	s14, [r1, #4]
 80043e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	edc2 7a01 	vstr	s15, [r2, #4]
 80043ec:	d007      	beq.n	80043fe <arm_add_f32+0xae>
 80043ee:	edd0 7a02 	vldr	s15, [r0, #8]
 80043f2:	ed91 7a02 	vldr	s14, [r1, #8]
 80043f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043fa:	edc2 7a02 	vstr	s15, [r2, #8]
 80043fe:	bcf0      	pop	{r4, r5, r6, r7}
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop

08004404 <__errno>:
 8004404:	4b01      	ldr	r3, [pc, #4]	; (800440c <__errno+0x8>)
 8004406:	6818      	ldr	r0, [r3, #0]
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	200001a0 	.word	0x200001a0

08004410 <__libc_init_array>:
 8004410:	b570      	push	{r4, r5, r6, lr}
 8004412:	4e0d      	ldr	r6, [pc, #52]	; (8004448 <__libc_init_array+0x38>)
 8004414:	4c0d      	ldr	r4, [pc, #52]	; (800444c <__libc_init_array+0x3c>)
 8004416:	1ba4      	subs	r4, r4, r6
 8004418:	10a4      	asrs	r4, r4, #2
 800441a:	2500      	movs	r5, #0
 800441c:	42a5      	cmp	r5, r4
 800441e:	d109      	bne.n	8004434 <__libc_init_array+0x24>
 8004420:	4e0b      	ldr	r6, [pc, #44]	; (8004450 <__libc_init_array+0x40>)
 8004422:	4c0c      	ldr	r4, [pc, #48]	; (8004454 <__libc_init_array+0x44>)
 8004424:	f003 fc46 	bl	8007cb4 <_init>
 8004428:	1ba4      	subs	r4, r4, r6
 800442a:	10a4      	asrs	r4, r4, #2
 800442c:	2500      	movs	r5, #0
 800442e:	42a5      	cmp	r5, r4
 8004430:	d105      	bne.n	800443e <__libc_init_array+0x2e>
 8004432:	bd70      	pop	{r4, r5, r6, pc}
 8004434:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004438:	4798      	blx	r3
 800443a:	3501      	adds	r5, #1
 800443c:	e7ee      	b.n	800441c <__libc_init_array+0xc>
 800443e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004442:	4798      	blx	r3
 8004444:	3501      	adds	r5, #1
 8004446:	e7f2      	b.n	800442e <__libc_init_array+0x1e>
 8004448:	08008060 	.word	0x08008060
 800444c:	08008060 	.word	0x08008060
 8004450:	08008060 	.word	0x08008060
 8004454:	08008064 	.word	0x08008064

08004458 <memset>:
 8004458:	4402      	add	r2, r0
 800445a:	4603      	mov	r3, r0
 800445c:	4293      	cmp	r3, r2
 800445e:	d100      	bne.n	8004462 <memset+0xa>
 8004460:	4770      	bx	lr
 8004462:	f803 1b01 	strb.w	r1, [r3], #1
 8004466:	e7f9      	b.n	800445c <memset+0x4>

08004468 <__cvt>:
 8004468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800446c:	ec55 4b10 	vmov	r4, r5, d0
 8004470:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004472:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004476:	2d00      	cmp	r5, #0
 8004478:	460e      	mov	r6, r1
 800447a:	4691      	mov	r9, r2
 800447c:	4619      	mov	r1, r3
 800447e:	bfb8      	it	lt
 8004480:	4622      	movlt	r2, r4
 8004482:	462b      	mov	r3, r5
 8004484:	f027 0720 	bic.w	r7, r7, #32
 8004488:	bfbb      	ittet	lt
 800448a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800448e:	461d      	movlt	r5, r3
 8004490:	2300      	movge	r3, #0
 8004492:	232d      	movlt	r3, #45	; 0x2d
 8004494:	bfb8      	it	lt
 8004496:	4614      	movlt	r4, r2
 8004498:	2f46      	cmp	r7, #70	; 0x46
 800449a:	700b      	strb	r3, [r1, #0]
 800449c:	d004      	beq.n	80044a8 <__cvt+0x40>
 800449e:	2f45      	cmp	r7, #69	; 0x45
 80044a0:	d100      	bne.n	80044a4 <__cvt+0x3c>
 80044a2:	3601      	adds	r6, #1
 80044a4:	2102      	movs	r1, #2
 80044a6:	e000      	b.n	80044aa <__cvt+0x42>
 80044a8:	2103      	movs	r1, #3
 80044aa:	ab03      	add	r3, sp, #12
 80044ac:	9301      	str	r3, [sp, #4]
 80044ae:	ab02      	add	r3, sp, #8
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	4632      	mov	r2, r6
 80044b4:	4653      	mov	r3, sl
 80044b6:	ec45 4b10 	vmov	d0, r4, r5
 80044ba:	f000 fcd5 	bl	8004e68 <_dtoa_r>
 80044be:	2f47      	cmp	r7, #71	; 0x47
 80044c0:	4680      	mov	r8, r0
 80044c2:	d102      	bne.n	80044ca <__cvt+0x62>
 80044c4:	f019 0f01 	tst.w	r9, #1
 80044c8:	d026      	beq.n	8004518 <__cvt+0xb0>
 80044ca:	2f46      	cmp	r7, #70	; 0x46
 80044cc:	eb08 0906 	add.w	r9, r8, r6
 80044d0:	d111      	bne.n	80044f6 <__cvt+0x8e>
 80044d2:	f898 3000 	ldrb.w	r3, [r8]
 80044d6:	2b30      	cmp	r3, #48	; 0x30
 80044d8:	d10a      	bne.n	80044f0 <__cvt+0x88>
 80044da:	2200      	movs	r2, #0
 80044dc:	2300      	movs	r3, #0
 80044de:	4620      	mov	r0, r4
 80044e0:	4629      	mov	r1, r5
 80044e2:	f7fc fb09 	bl	8000af8 <__aeabi_dcmpeq>
 80044e6:	b918      	cbnz	r0, 80044f0 <__cvt+0x88>
 80044e8:	f1c6 0601 	rsb	r6, r6, #1
 80044ec:	f8ca 6000 	str.w	r6, [sl]
 80044f0:	f8da 3000 	ldr.w	r3, [sl]
 80044f4:	4499      	add	r9, r3
 80044f6:	2200      	movs	r2, #0
 80044f8:	2300      	movs	r3, #0
 80044fa:	4620      	mov	r0, r4
 80044fc:	4629      	mov	r1, r5
 80044fe:	f7fc fafb 	bl	8000af8 <__aeabi_dcmpeq>
 8004502:	b938      	cbnz	r0, 8004514 <__cvt+0xac>
 8004504:	2230      	movs	r2, #48	; 0x30
 8004506:	9b03      	ldr	r3, [sp, #12]
 8004508:	454b      	cmp	r3, r9
 800450a:	d205      	bcs.n	8004518 <__cvt+0xb0>
 800450c:	1c59      	adds	r1, r3, #1
 800450e:	9103      	str	r1, [sp, #12]
 8004510:	701a      	strb	r2, [r3, #0]
 8004512:	e7f8      	b.n	8004506 <__cvt+0x9e>
 8004514:	f8cd 900c 	str.w	r9, [sp, #12]
 8004518:	9b03      	ldr	r3, [sp, #12]
 800451a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800451c:	eba3 0308 	sub.w	r3, r3, r8
 8004520:	4640      	mov	r0, r8
 8004522:	6013      	str	r3, [r2, #0]
 8004524:	b004      	add	sp, #16
 8004526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800452a <__exponent>:
 800452a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800452c:	2900      	cmp	r1, #0
 800452e:	4604      	mov	r4, r0
 8004530:	bfba      	itte	lt
 8004532:	4249      	neglt	r1, r1
 8004534:	232d      	movlt	r3, #45	; 0x2d
 8004536:	232b      	movge	r3, #43	; 0x2b
 8004538:	2909      	cmp	r1, #9
 800453a:	f804 2b02 	strb.w	r2, [r4], #2
 800453e:	7043      	strb	r3, [r0, #1]
 8004540:	dd20      	ble.n	8004584 <__exponent+0x5a>
 8004542:	f10d 0307 	add.w	r3, sp, #7
 8004546:	461f      	mov	r7, r3
 8004548:	260a      	movs	r6, #10
 800454a:	fb91 f5f6 	sdiv	r5, r1, r6
 800454e:	fb06 1115 	mls	r1, r6, r5, r1
 8004552:	3130      	adds	r1, #48	; 0x30
 8004554:	2d09      	cmp	r5, #9
 8004556:	f803 1c01 	strb.w	r1, [r3, #-1]
 800455a:	f103 32ff 	add.w	r2, r3, #4294967295
 800455e:	4629      	mov	r1, r5
 8004560:	dc09      	bgt.n	8004576 <__exponent+0x4c>
 8004562:	3130      	adds	r1, #48	; 0x30
 8004564:	3b02      	subs	r3, #2
 8004566:	f802 1c01 	strb.w	r1, [r2, #-1]
 800456a:	42bb      	cmp	r3, r7
 800456c:	4622      	mov	r2, r4
 800456e:	d304      	bcc.n	800457a <__exponent+0x50>
 8004570:	1a10      	subs	r0, r2, r0
 8004572:	b003      	add	sp, #12
 8004574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004576:	4613      	mov	r3, r2
 8004578:	e7e7      	b.n	800454a <__exponent+0x20>
 800457a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800457e:	f804 2b01 	strb.w	r2, [r4], #1
 8004582:	e7f2      	b.n	800456a <__exponent+0x40>
 8004584:	2330      	movs	r3, #48	; 0x30
 8004586:	4419      	add	r1, r3
 8004588:	7083      	strb	r3, [r0, #2]
 800458a:	1d02      	adds	r2, r0, #4
 800458c:	70c1      	strb	r1, [r0, #3]
 800458e:	e7ef      	b.n	8004570 <__exponent+0x46>

08004590 <_printf_float>:
 8004590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004594:	b08d      	sub	sp, #52	; 0x34
 8004596:	460c      	mov	r4, r1
 8004598:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800459c:	4616      	mov	r6, r2
 800459e:	461f      	mov	r7, r3
 80045a0:	4605      	mov	r5, r0
 80045a2:	f001 fae3 	bl	8005b6c <_localeconv_r>
 80045a6:	6803      	ldr	r3, [r0, #0]
 80045a8:	9304      	str	r3, [sp, #16]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fb fe28 	bl	8000200 <strlen>
 80045b0:	2300      	movs	r3, #0
 80045b2:	930a      	str	r3, [sp, #40]	; 0x28
 80045b4:	f8d8 3000 	ldr.w	r3, [r8]
 80045b8:	9005      	str	r0, [sp, #20]
 80045ba:	3307      	adds	r3, #7
 80045bc:	f023 0307 	bic.w	r3, r3, #7
 80045c0:	f103 0208 	add.w	r2, r3, #8
 80045c4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80045c8:	f8d4 b000 	ldr.w	fp, [r4]
 80045cc:	f8c8 2000 	str.w	r2, [r8]
 80045d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80045d8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80045dc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80045e0:	9307      	str	r3, [sp, #28]
 80045e2:	f8cd 8018 	str.w	r8, [sp, #24]
 80045e6:	f04f 32ff 	mov.w	r2, #4294967295
 80045ea:	4ba7      	ldr	r3, [pc, #668]	; (8004888 <_printf_float+0x2f8>)
 80045ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045f0:	f7fc fab4 	bl	8000b5c <__aeabi_dcmpun>
 80045f4:	bb70      	cbnz	r0, 8004654 <_printf_float+0xc4>
 80045f6:	f04f 32ff 	mov.w	r2, #4294967295
 80045fa:	4ba3      	ldr	r3, [pc, #652]	; (8004888 <_printf_float+0x2f8>)
 80045fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004600:	f7fc fa8e 	bl	8000b20 <__aeabi_dcmple>
 8004604:	bb30      	cbnz	r0, 8004654 <_printf_float+0xc4>
 8004606:	2200      	movs	r2, #0
 8004608:	2300      	movs	r3, #0
 800460a:	4640      	mov	r0, r8
 800460c:	4649      	mov	r1, r9
 800460e:	f7fc fa7d 	bl	8000b0c <__aeabi_dcmplt>
 8004612:	b110      	cbz	r0, 800461a <_printf_float+0x8a>
 8004614:	232d      	movs	r3, #45	; 0x2d
 8004616:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800461a:	4a9c      	ldr	r2, [pc, #624]	; (800488c <_printf_float+0x2fc>)
 800461c:	4b9c      	ldr	r3, [pc, #624]	; (8004890 <_printf_float+0x300>)
 800461e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004622:	bf8c      	ite	hi
 8004624:	4690      	movhi	r8, r2
 8004626:	4698      	movls	r8, r3
 8004628:	2303      	movs	r3, #3
 800462a:	f02b 0204 	bic.w	r2, fp, #4
 800462e:	6123      	str	r3, [r4, #16]
 8004630:	6022      	str	r2, [r4, #0]
 8004632:	f04f 0900 	mov.w	r9, #0
 8004636:	9700      	str	r7, [sp, #0]
 8004638:	4633      	mov	r3, r6
 800463a:	aa0b      	add	r2, sp, #44	; 0x2c
 800463c:	4621      	mov	r1, r4
 800463e:	4628      	mov	r0, r5
 8004640:	f000 f9e6 	bl	8004a10 <_printf_common>
 8004644:	3001      	adds	r0, #1
 8004646:	f040 808d 	bne.w	8004764 <_printf_float+0x1d4>
 800464a:	f04f 30ff 	mov.w	r0, #4294967295
 800464e:	b00d      	add	sp, #52	; 0x34
 8004650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004654:	4642      	mov	r2, r8
 8004656:	464b      	mov	r3, r9
 8004658:	4640      	mov	r0, r8
 800465a:	4649      	mov	r1, r9
 800465c:	f7fc fa7e 	bl	8000b5c <__aeabi_dcmpun>
 8004660:	b110      	cbz	r0, 8004668 <_printf_float+0xd8>
 8004662:	4a8c      	ldr	r2, [pc, #560]	; (8004894 <_printf_float+0x304>)
 8004664:	4b8c      	ldr	r3, [pc, #560]	; (8004898 <_printf_float+0x308>)
 8004666:	e7da      	b.n	800461e <_printf_float+0x8e>
 8004668:	6861      	ldr	r1, [r4, #4]
 800466a:	1c4b      	adds	r3, r1, #1
 800466c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004670:	a80a      	add	r0, sp, #40	; 0x28
 8004672:	d13e      	bne.n	80046f2 <_printf_float+0x162>
 8004674:	2306      	movs	r3, #6
 8004676:	6063      	str	r3, [r4, #4]
 8004678:	2300      	movs	r3, #0
 800467a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800467e:	ab09      	add	r3, sp, #36	; 0x24
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	ec49 8b10 	vmov	d0, r8, r9
 8004686:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800468a:	6022      	str	r2, [r4, #0]
 800468c:	f8cd a004 	str.w	sl, [sp, #4]
 8004690:	6861      	ldr	r1, [r4, #4]
 8004692:	4628      	mov	r0, r5
 8004694:	f7ff fee8 	bl	8004468 <__cvt>
 8004698:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800469c:	2b47      	cmp	r3, #71	; 0x47
 800469e:	4680      	mov	r8, r0
 80046a0:	d109      	bne.n	80046b6 <_printf_float+0x126>
 80046a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046a4:	1cd8      	adds	r0, r3, #3
 80046a6:	db02      	blt.n	80046ae <_printf_float+0x11e>
 80046a8:	6862      	ldr	r2, [r4, #4]
 80046aa:	4293      	cmp	r3, r2
 80046ac:	dd47      	ble.n	800473e <_printf_float+0x1ae>
 80046ae:	f1aa 0a02 	sub.w	sl, sl, #2
 80046b2:	fa5f fa8a 	uxtb.w	sl, sl
 80046b6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80046ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80046bc:	d824      	bhi.n	8004708 <_printf_float+0x178>
 80046be:	3901      	subs	r1, #1
 80046c0:	4652      	mov	r2, sl
 80046c2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80046c6:	9109      	str	r1, [sp, #36]	; 0x24
 80046c8:	f7ff ff2f 	bl	800452a <__exponent>
 80046cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80046ce:	1813      	adds	r3, r2, r0
 80046d0:	2a01      	cmp	r2, #1
 80046d2:	4681      	mov	r9, r0
 80046d4:	6123      	str	r3, [r4, #16]
 80046d6:	dc02      	bgt.n	80046de <_printf_float+0x14e>
 80046d8:	6822      	ldr	r2, [r4, #0]
 80046da:	07d1      	lsls	r1, r2, #31
 80046dc:	d501      	bpl.n	80046e2 <_printf_float+0x152>
 80046de:	3301      	adds	r3, #1
 80046e0:	6123      	str	r3, [r4, #16]
 80046e2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0a5      	beq.n	8004636 <_printf_float+0xa6>
 80046ea:	232d      	movs	r3, #45	; 0x2d
 80046ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046f0:	e7a1      	b.n	8004636 <_printf_float+0xa6>
 80046f2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80046f6:	f000 8177 	beq.w	80049e8 <_printf_float+0x458>
 80046fa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80046fe:	d1bb      	bne.n	8004678 <_printf_float+0xe8>
 8004700:	2900      	cmp	r1, #0
 8004702:	d1b9      	bne.n	8004678 <_printf_float+0xe8>
 8004704:	2301      	movs	r3, #1
 8004706:	e7b6      	b.n	8004676 <_printf_float+0xe6>
 8004708:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800470c:	d119      	bne.n	8004742 <_printf_float+0x1b2>
 800470e:	2900      	cmp	r1, #0
 8004710:	6863      	ldr	r3, [r4, #4]
 8004712:	dd0c      	ble.n	800472e <_printf_float+0x19e>
 8004714:	6121      	str	r1, [r4, #16]
 8004716:	b913      	cbnz	r3, 800471e <_printf_float+0x18e>
 8004718:	6822      	ldr	r2, [r4, #0]
 800471a:	07d2      	lsls	r2, r2, #31
 800471c:	d502      	bpl.n	8004724 <_printf_float+0x194>
 800471e:	3301      	adds	r3, #1
 8004720:	440b      	add	r3, r1
 8004722:	6123      	str	r3, [r4, #16]
 8004724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004726:	65a3      	str	r3, [r4, #88]	; 0x58
 8004728:	f04f 0900 	mov.w	r9, #0
 800472c:	e7d9      	b.n	80046e2 <_printf_float+0x152>
 800472e:	b913      	cbnz	r3, 8004736 <_printf_float+0x1a6>
 8004730:	6822      	ldr	r2, [r4, #0]
 8004732:	07d0      	lsls	r0, r2, #31
 8004734:	d501      	bpl.n	800473a <_printf_float+0x1aa>
 8004736:	3302      	adds	r3, #2
 8004738:	e7f3      	b.n	8004722 <_printf_float+0x192>
 800473a:	2301      	movs	r3, #1
 800473c:	e7f1      	b.n	8004722 <_printf_float+0x192>
 800473e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004742:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004746:	4293      	cmp	r3, r2
 8004748:	db05      	blt.n	8004756 <_printf_float+0x1c6>
 800474a:	6822      	ldr	r2, [r4, #0]
 800474c:	6123      	str	r3, [r4, #16]
 800474e:	07d1      	lsls	r1, r2, #31
 8004750:	d5e8      	bpl.n	8004724 <_printf_float+0x194>
 8004752:	3301      	adds	r3, #1
 8004754:	e7e5      	b.n	8004722 <_printf_float+0x192>
 8004756:	2b00      	cmp	r3, #0
 8004758:	bfd4      	ite	le
 800475a:	f1c3 0302 	rsble	r3, r3, #2
 800475e:	2301      	movgt	r3, #1
 8004760:	4413      	add	r3, r2
 8004762:	e7de      	b.n	8004722 <_printf_float+0x192>
 8004764:	6823      	ldr	r3, [r4, #0]
 8004766:	055a      	lsls	r2, r3, #21
 8004768:	d407      	bmi.n	800477a <_printf_float+0x1ea>
 800476a:	6923      	ldr	r3, [r4, #16]
 800476c:	4642      	mov	r2, r8
 800476e:	4631      	mov	r1, r6
 8004770:	4628      	mov	r0, r5
 8004772:	47b8      	blx	r7
 8004774:	3001      	adds	r0, #1
 8004776:	d12b      	bne.n	80047d0 <_printf_float+0x240>
 8004778:	e767      	b.n	800464a <_printf_float+0xba>
 800477a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800477e:	f240 80dc 	bls.w	800493a <_printf_float+0x3aa>
 8004782:	2200      	movs	r2, #0
 8004784:	2300      	movs	r3, #0
 8004786:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800478a:	f7fc f9b5 	bl	8000af8 <__aeabi_dcmpeq>
 800478e:	2800      	cmp	r0, #0
 8004790:	d033      	beq.n	80047fa <_printf_float+0x26a>
 8004792:	2301      	movs	r3, #1
 8004794:	4a41      	ldr	r2, [pc, #260]	; (800489c <_printf_float+0x30c>)
 8004796:	4631      	mov	r1, r6
 8004798:	4628      	mov	r0, r5
 800479a:	47b8      	blx	r7
 800479c:	3001      	adds	r0, #1
 800479e:	f43f af54 	beq.w	800464a <_printf_float+0xba>
 80047a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047a6:	429a      	cmp	r2, r3
 80047a8:	db02      	blt.n	80047b0 <_printf_float+0x220>
 80047aa:	6823      	ldr	r3, [r4, #0]
 80047ac:	07d8      	lsls	r0, r3, #31
 80047ae:	d50f      	bpl.n	80047d0 <_printf_float+0x240>
 80047b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047b4:	4631      	mov	r1, r6
 80047b6:	4628      	mov	r0, r5
 80047b8:	47b8      	blx	r7
 80047ba:	3001      	adds	r0, #1
 80047bc:	f43f af45 	beq.w	800464a <_printf_float+0xba>
 80047c0:	f04f 0800 	mov.w	r8, #0
 80047c4:	f104 091a 	add.w	r9, r4, #26
 80047c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047ca:	3b01      	subs	r3, #1
 80047cc:	4543      	cmp	r3, r8
 80047ce:	dc09      	bgt.n	80047e4 <_printf_float+0x254>
 80047d0:	6823      	ldr	r3, [r4, #0]
 80047d2:	079b      	lsls	r3, r3, #30
 80047d4:	f100 8103 	bmi.w	80049de <_printf_float+0x44e>
 80047d8:	68e0      	ldr	r0, [r4, #12]
 80047da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047dc:	4298      	cmp	r0, r3
 80047de:	bfb8      	it	lt
 80047e0:	4618      	movlt	r0, r3
 80047e2:	e734      	b.n	800464e <_printf_float+0xbe>
 80047e4:	2301      	movs	r3, #1
 80047e6:	464a      	mov	r2, r9
 80047e8:	4631      	mov	r1, r6
 80047ea:	4628      	mov	r0, r5
 80047ec:	47b8      	blx	r7
 80047ee:	3001      	adds	r0, #1
 80047f0:	f43f af2b 	beq.w	800464a <_printf_float+0xba>
 80047f4:	f108 0801 	add.w	r8, r8, #1
 80047f8:	e7e6      	b.n	80047c8 <_printf_float+0x238>
 80047fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	dc2b      	bgt.n	8004858 <_printf_float+0x2c8>
 8004800:	2301      	movs	r3, #1
 8004802:	4a26      	ldr	r2, [pc, #152]	; (800489c <_printf_float+0x30c>)
 8004804:	4631      	mov	r1, r6
 8004806:	4628      	mov	r0, r5
 8004808:	47b8      	blx	r7
 800480a:	3001      	adds	r0, #1
 800480c:	f43f af1d 	beq.w	800464a <_printf_float+0xba>
 8004810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004812:	b923      	cbnz	r3, 800481e <_printf_float+0x28e>
 8004814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004816:	b913      	cbnz	r3, 800481e <_printf_float+0x28e>
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	07d9      	lsls	r1, r3, #31
 800481c:	d5d8      	bpl.n	80047d0 <_printf_float+0x240>
 800481e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004822:	4631      	mov	r1, r6
 8004824:	4628      	mov	r0, r5
 8004826:	47b8      	blx	r7
 8004828:	3001      	adds	r0, #1
 800482a:	f43f af0e 	beq.w	800464a <_printf_float+0xba>
 800482e:	f04f 0900 	mov.w	r9, #0
 8004832:	f104 0a1a 	add.w	sl, r4, #26
 8004836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004838:	425b      	negs	r3, r3
 800483a:	454b      	cmp	r3, r9
 800483c:	dc01      	bgt.n	8004842 <_printf_float+0x2b2>
 800483e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004840:	e794      	b.n	800476c <_printf_float+0x1dc>
 8004842:	2301      	movs	r3, #1
 8004844:	4652      	mov	r2, sl
 8004846:	4631      	mov	r1, r6
 8004848:	4628      	mov	r0, r5
 800484a:	47b8      	blx	r7
 800484c:	3001      	adds	r0, #1
 800484e:	f43f aefc 	beq.w	800464a <_printf_float+0xba>
 8004852:	f109 0901 	add.w	r9, r9, #1
 8004856:	e7ee      	b.n	8004836 <_printf_float+0x2a6>
 8004858:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800485a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800485c:	429a      	cmp	r2, r3
 800485e:	bfa8      	it	ge
 8004860:	461a      	movge	r2, r3
 8004862:	2a00      	cmp	r2, #0
 8004864:	4691      	mov	r9, r2
 8004866:	dd07      	ble.n	8004878 <_printf_float+0x2e8>
 8004868:	4613      	mov	r3, r2
 800486a:	4631      	mov	r1, r6
 800486c:	4642      	mov	r2, r8
 800486e:	4628      	mov	r0, r5
 8004870:	47b8      	blx	r7
 8004872:	3001      	adds	r0, #1
 8004874:	f43f aee9 	beq.w	800464a <_printf_float+0xba>
 8004878:	f104 031a 	add.w	r3, r4, #26
 800487c:	f04f 0b00 	mov.w	fp, #0
 8004880:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004884:	9306      	str	r3, [sp, #24]
 8004886:	e015      	b.n	80048b4 <_printf_float+0x324>
 8004888:	7fefffff 	.word	0x7fefffff
 800488c:	08007d54 	.word	0x08007d54
 8004890:	08007d50 	.word	0x08007d50
 8004894:	08007d5c 	.word	0x08007d5c
 8004898:	08007d58 	.word	0x08007d58
 800489c:	08007d60 	.word	0x08007d60
 80048a0:	2301      	movs	r3, #1
 80048a2:	9a06      	ldr	r2, [sp, #24]
 80048a4:	4631      	mov	r1, r6
 80048a6:	4628      	mov	r0, r5
 80048a8:	47b8      	blx	r7
 80048aa:	3001      	adds	r0, #1
 80048ac:	f43f aecd 	beq.w	800464a <_printf_float+0xba>
 80048b0:	f10b 0b01 	add.w	fp, fp, #1
 80048b4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80048b8:	ebaa 0309 	sub.w	r3, sl, r9
 80048bc:	455b      	cmp	r3, fp
 80048be:	dcef      	bgt.n	80048a0 <_printf_float+0x310>
 80048c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048c4:	429a      	cmp	r2, r3
 80048c6:	44d0      	add	r8, sl
 80048c8:	db15      	blt.n	80048f6 <_printf_float+0x366>
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	07da      	lsls	r2, r3, #31
 80048ce:	d412      	bmi.n	80048f6 <_printf_float+0x366>
 80048d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80048d4:	eba3 020a 	sub.w	r2, r3, sl
 80048d8:	eba3 0a01 	sub.w	sl, r3, r1
 80048dc:	4592      	cmp	sl, r2
 80048de:	bfa8      	it	ge
 80048e0:	4692      	movge	sl, r2
 80048e2:	f1ba 0f00 	cmp.w	sl, #0
 80048e6:	dc0e      	bgt.n	8004906 <_printf_float+0x376>
 80048e8:	f04f 0800 	mov.w	r8, #0
 80048ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80048f0:	f104 091a 	add.w	r9, r4, #26
 80048f4:	e019      	b.n	800492a <_printf_float+0x39a>
 80048f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048fa:	4631      	mov	r1, r6
 80048fc:	4628      	mov	r0, r5
 80048fe:	47b8      	blx	r7
 8004900:	3001      	adds	r0, #1
 8004902:	d1e5      	bne.n	80048d0 <_printf_float+0x340>
 8004904:	e6a1      	b.n	800464a <_printf_float+0xba>
 8004906:	4653      	mov	r3, sl
 8004908:	4642      	mov	r2, r8
 800490a:	4631      	mov	r1, r6
 800490c:	4628      	mov	r0, r5
 800490e:	47b8      	blx	r7
 8004910:	3001      	adds	r0, #1
 8004912:	d1e9      	bne.n	80048e8 <_printf_float+0x358>
 8004914:	e699      	b.n	800464a <_printf_float+0xba>
 8004916:	2301      	movs	r3, #1
 8004918:	464a      	mov	r2, r9
 800491a:	4631      	mov	r1, r6
 800491c:	4628      	mov	r0, r5
 800491e:	47b8      	blx	r7
 8004920:	3001      	adds	r0, #1
 8004922:	f43f ae92 	beq.w	800464a <_printf_float+0xba>
 8004926:	f108 0801 	add.w	r8, r8, #1
 800492a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800492e:	1a9b      	subs	r3, r3, r2
 8004930:	eba3 030a 	sub.w	r3, r3, sl
 8004934:	4543      	cmp	r3, r8
 8004936:	dcee      	bgt.n	8004916 <_printf_float+0x386>
 8004938:	e74a      	b.n	80047d0 <_printf_float+0x240>
 800493a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800493c:	2a01      	cmp	r2, #1
 800493e:	dc01      	bgt.n	8004944 <_printf_float+0x3b4>
 8004940:	07db      	lsls	r3, r3, #31
 8004942:	d53a      	bpl.n	80049ba <_printf_float+0x42a>
 8004944:	2301      	movs	r3, #1
 8004946:	4642      	mov	r2, r8
 8004948:	4631      	mov	r1, r6
 800494a:	4628      	mov	r0, r5
 800494c:	47b8      	blx	r7
 800494e:	3001      	adds	r0, #1
 8004950:	f43f ae7b 	beq.w	800464a <_printf_float+0xba>
 8004954:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004958:	4631      	mov	r1, r6
 800495a:	4628      	mov	r0, r5
 800495c:	47b8      	blx	r7
 800495e:	3001      	adds	r0, #1
 8004960:	f108 0801 	add.w	r8, r8, #1
 8004964:	f43f ae71 	beq.w	800464a <_printf_float+0xba>
 8004968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800496a:	2200      	movs	r2, #0
 800496c:	f103 3aff 	add.w	sl, r3, #4294967295
 8004970:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004974:	2300      	movs	r3, #0
 8004976:	f7fc f8bf 	bl	8000af8 <__aeabi_dcmpeq>
 800497a:	b9c8      	cbnz	r0, 80049b0 <_printf_float+0x420>
 800497c:	4653      	mov	r3, sl
 800497e:	4642      	mov	r2, r8
 8004980:	4631      	mov	r1, r6
 8004982:	4628      	mov	r0, r5
 8004984:	47b8      	blx	r7
 8004986:	3001      	adds	r0, #1
 8004988:	d10e      	bne.n	80049a8 <_printf_float+0x418>
 800498a:	e65e      	b.n	800464a <_printf_float+0xba>
 800498c:	2301      	movs	r3, #1
 800498e:	4652      	mov	r2, sl
 8004990:	4631      	mov	r1, r6
 8004992:	4628      	mov	r0, r5
 8004994:	47b8      	blx	r7
 8004996:	3001      	adds	r0, #1
 8004998:	f43f ae57 	beq.w	800464a <_printf_float+0xba>
 800499c:	f108 0801 	add.w	r8, r8, #1
 80049a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049a2:	3b01      	subs	r3, #1
 80049a4:	4543      	cmp	r3, r8
 80049a6:	dcf1      	bgt.n	800498c <_printf_float+0x3fc>
 80049a8:	464b      	mov	r3, r9
 80049aa:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80049ae:	e6de      	b.n	800476e <_printf_float+0x1de>
 80049b0:	f04f 0800 	mov.w	r8, #0
 80049b4:	f104 0a1a 	add.w	sl, r4, #26
 80049b8:	e7f2      	b.n	80049a0 <_printf_float+0x410>
 80049ba:	2301      	movs	r3, #1
 80049bc:	e7df      	b.n	800497e <_printf_float+0x3ee>
 80049be:	2301      	movs	r3, #1
 80049c0:	464a      	mov	r2, r9
 80049c2:	4631      	mov	r1, r6
 80049c4:	4628      	mov	r0, r5
 80049c6:	47b8      	blx	r7
 80049c8:	3001      	adds	r0, #1
 80049ca:	f43f ae3e 	beq.w	800464a <_printf_float+0xba>
 80049ce:	f108 0801 	add.w	r8, r8, #1
 80049d2:	68e3      	ldr	r3, [r4, #12]
 80049d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80049d6:	1a9b      	subs	r3, r3, r2
 80049d8:	4543      	cmp	r3, r8
 80049da:	dcf0      	bgt.n	80049be <_printf_float+0x42e>
 80049dc:	e6fc      	b.n	80047d8 <_printf_float+0x248>
 80049de:	f04f 0800 	mov.w	r8, #0
 80049e2:	f104 0919 	add.w	r9, r4, #25
 80049e6:	e7f4      	b.n	80049d2 <_printf_float+0x442>
 80049e8:	2900      	cmp	r1, #0
 80049ea:	f43f ae8b 	beq.w	8004704 <_printf_float+0x174>
 80049ee:	2300      	movs	r3, #0
 80049f0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80049f4:	ab09      	add	r3, sp, #36	; 0x24
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	ec49 8b10 	vmov	d0, r8, r9
 80049fc:	6022      	str	r2, [r4, #0]
 80049fe:	f8cd a004 	str.w	sl, [sp, #4]
 8004a02:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004a06:	4628      	mov	r0, r5
 8004a08:	f7ff fd2e 	bl	8004468 <__cvt>
 8004a0c:	4680      	mov	r8, r0
 8004a0e:	e648      	b.n	80046a2 <_printf_float+0x112>

08004a10 <_printf_common>:
 8004a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a14:	4691      	mov	r9, r2
 8004a16:	461f      	mov	r7, r3
 8004a18:	688a      	ldr	r2, [r1, #8]
 8004a1a:	690b      	ldr	r3, [r1, #16]
 8004a1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a20:	4293      	cmp	r3, r2
 8004a22:	bfb8      	it	lt
 8004a24:	4613      	movlt	r3, r2
 8004a26:	f8c9 3000 	str.w	r3, [r9]
 8004a2a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a2e:	4606      	mov	r6, r0
 8004a30:	460c      	mov	r4, r1
 8004a32:	b112      	cbz	r2, 8004a3a <_printf_common+0x2a>
 8004a34:	3301      	adds	r3, #1
 8004a36:	f8c9 3000 	str.w	r3, [r9]
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	0699      	lsls	r1, r3, #26
 8004a3e:	bf42      	ittt	mi
 8004a40:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004a44:	3302      	addmi	r3, #2
 8004a46:	f8c9 3000 	strmi.w	r3, [r9]
 8004a4a:	6825      	ldr	r5, [r4, #0]
 8004a4c:	f015 0506 	ands.w	r5, r5, #6
 8004a50:	d107      	bne.n	8004a62 <_printf_common+0x52>
 8004a52:	f104 0a19 	add.w	sl, r4, #25
 8004a56:	68e3      	ldr	r3, [r4, #12]
 8004a58:	f8d9 2000 	ldr.w	r2, [r9]
 8004a5c:	1a9b      	subs	r3, r3, r2
 8004a5e:	42ab      	cmp	r3, r5
 8004a60:	dc28      	bgt.n	8004ab4 <_printf_common+0xa4>
 8004a62:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004a66:	6822      	ldr	r2, [r4, #0]
 8004a68:	3300      	adds	r3, #0
 8004a6a:	bf18      	it	ne
 8004a6c:	2301      	movne	r3, #1
 8004a6e:	0692      	lsls	r2, r2, #26
 8004a70:	d42d      	bmi.n	8004ace <_printf_common+0xbe>
 8004a72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a76:	4639      	mov	r1, r7
 8004a78:	4630      	mov	r0, r6
 8004a7a:	47c0      	blx	r8
 8004a7c:	3001      	adds	r0, #1
 8004a7e:	d020      	beq.n	8004ac2 <_printf_common+0xb2>
 8004a80:	6823      	ldr	r3, [r4, #0]
 8004a82:	68e5      	ldr	r5, [r4, #12]
 8004a84:	f8d9 2000 	ldr.w	r2, [r9]
 8004a88:	f003 0306 	and.w	r3, r3, #6
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	bf08      	it	eq
 8004a90:	1aad      	subeq	r5, r5, r2
 8004a92:	68a3      	ldr	r3, [r4, #8]
 8004a94:	6922      	ldr	r2, [r4, #16]
 8004a96:	bf0c      	ite	eq
 8004a98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a9c:	2500      	movne	r5, #0
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	bfc4      	itt	gt
 8004aa2:	1a9b      	subgt	r3, r3, r2
 8004aa4:	18ed      	addgt	r5, r5, r3
 8004aa6:	f04f 0900 	mov.w	r9, #0
 8004aaa:	341a      	adds	r4, #26
 8004aac:	454d      	cmp	r5, r9
 8004aae:	d11a      	bne.n	8004ae6 <_printf_common+0xd6>
 8004ab0:	2000      	movs	r0, #0
 8004ab2:	e008      	b.n	8004ac6 <_printf_common+0xb6>
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	4652      	mov	r2, sl
 8004ab8:	4639      	mov	r1, r7
 8004aba:	4630      	mov	r0, r6
 8004abc:	47c0      	blx	r8
 8004abe:	3001      	adds	r0, #1
 8004ac0:	d103      	bne.n	8004aca <_printf_common+0xba>
 8004ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aca:	3501      	adds	r5, #1
 8004acc:	e7c3      	b.n	8004a56 <_printf_common+0x46>
 8004ace:	18e1      	adds	r1, r4, r3
 8004ad0:	1c5a      	adds	r2, r3, #1
 8004ad2:	2030      	movs	r0, #48	; 0x30
 8004ad4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ad8:	4422      	add	r2, r4
 8004ada:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ade:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ae2:	3302      	adds	r3, #2
 8004ae4:	e7c5      	b.n	8004a72 <_printf_common+0x62>
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	4622      	mov	r2, r4
 8004aea:	4639      	mov	r1, r7
 8004aec:	4630      	mov	r0, r6
 8004aee:	47c0      	blx	r8
 8004af0:	3001      	adds	r0, #1
 8004af2:	d0e6      	beq.n	8004ac2 <_printf_common+0xb2>
 8004af4:	f109 0901 	add.w	r9, r9, #1
 8004af8:	e7d8      	b.n	8004aac <_printf_common+0x9c>
	...

08004afc <_printf_i>:
 8004afc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b00:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004b04:	460c      	mov	r4, r1
 8004b06:	7e09      	ldrb	r1, [r1, #24]
 8004b08:	b085      	sub	sp, #20
 8004b0a:	296e      	cmp	r1, #110	; 0x6e
 8004b0c:	4617      	mov	r7, r2
 8004b0e:	4606      	mov	r6, r0
 8004b10:	4698      	mov	r8, r3
 8004b12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b14:	f000 80b3 	beq.w	8004c7e <_printf_i+0x182>
 8004b18:	d822      	bhi.n	8004b60 <_printf_i+0x64>
 8004b1a:	2963      	cmp	r1, #99	; 0x63
 8004b1c:	d036      	beq.n	8004b8c <_printf_i+0x90>
 8004b1e:	d80a      	bhi.n	8004b36 <_printf_i+0x3a>
 8004b20:	2900      	cmp	r1, #0
 8004b22:	f000 80b9 	beq.w	8004c98 <_printf_i+0x19c>
 8004b26:	2958      	cmp	r1, #88	; 0x58
 8004b28:	f000 8083 	beq.w	8004c32 <_printf_i+0x136>
 8004b2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b30:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004b34:	e032      	b.n	8004b9c <_printf_i+0xa0>
 8004b36:	2964      	cmp	r1, #100	; 0x64
 8004b38:	d001      	beq.n	8004b3e <_printf_i+0x42>
 8004b3a:	2969      	cmp	r1, #105	; 0x69
 8004b3c:	d1f6      	bne.n	8004b2c <_printf_i+0x30>
 8004b3e:	6820      	ldr	r0, [r4, #0]
 8004b40:	6813      	ldr	r3, [r2, #0]
 8004b42:	0605      	lsls	r5, r0, #24
 8004b44:	f103 0104 	add.w	r1, r3, #4
 8004b48:	d52a      	bpl.n	8004ba0 <_printf_i+0xa4>
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6011      	str	r1, [r2, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	da03      	bge.n	8004b5a <_printf_i+0x5e>
 8004b52:	222d      	movs	r2, #45	; 0x2d
 8004b54:	425b      	negs	r3, r3
 8004b56:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004b5a:	486f      	ldr	r0, [pc, #444]	; (8004d18 <_printf_i+0x21c>)
 8004b5c:	220a      	movs	r2, #10
 8004b5e:	e039      	b.n	8004bd4 <_printf_i+0xd8>
 8004b60:	2973      	cmp	r1, #115	; 0x73
 8004b62:	f000 809d 	beq.w	8004ca0 <_printf_i+0x1a4>
 8004b66:	d808      	bhi.n	8004b7a <_printf_i+0x7e>
 8004b68:	296f      	cmp	r1, #111	; 0x6f
 8004b6a:	d020      	beq.n	8004bae <_printf_i+0xb2>
 8004b6c:	2970      	cmp	r1, #112	; 0x70
 8004b6e:	d1dd      	bne.n	8004b2c <_printf_i+0x30>
 8004b70:	6823      	ldr	r3, [r4, #0]
 8004b72:	f043 0320 	orr.w	r3, r3, #32
 8004b76:	6023      	str	r3, [r4, #0]
 8004b78:	e003      	b.n	8004b82 <_printf_i+0x86>
 8004b7a:	2975      	cmp	r1, #117	; 0x75
 8004b7c:	d017      	beq.n	8004bae <_printf_i+0xb2>
 8004b7e:	2978      	cmp	r1, #120	; 0x78
 8004b80:	d1d4      	bne.n	8004b2c <_printf_i+0x30>
 8004b82:	2378      	movs	r3, #120	; 0x78
 8004b84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b88:	4864      	ldr	r0, [pc, #400]	; (8004d1c <_printf_i+0x220>)
 8004b8a:	e055      	b.n	8004c38 <_printf_i+0x13c>
 8004b8c:	6813      	ldr	r3, [r2, #0]
 8004b8e:	1d19      	adds	r1, r3, #4
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6011      	str	r1, [r2, #0]
 8004b94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e08c      	b.n	8004cba <_printf_i+0x1be>
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6011      	str	r1, [r2, #0]
 8004ba4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ba8:	bf18      	it	ne
 8004baa:	b21b      	sxthne	r3, r3
 8004bac:	e7cf      	b.n	8004b4e <_printf_i+0x52>
 8004bae:	6813      	ldr	r3, [r2, #0]
 8004bb0:	6825      	ldr	r5, [r4, #0]
 8004bb2:	1d18      	adds	r0, r3, #4
 8004bb4:	6010      	str	r0, [r2, #0]
 8004bb6:	0628      	lsls	r0, r5, #24
 8004bb8:	d501      	bpl.n	8004bbe <_printf_i+0xc2>
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	e002      	b.n	8004bc4 <_printf_i+0xc8>
 8004bbe:	0668      	lsls	r0, r5, #25
 8004bc0:	d5fb      	bpl.n	8004bba <_printf_i+0xbe>
 8004bc2:	881b      	ldrh	r3, [r3, #0]
 8004bc4:	4854      	ldr	r0, [pc, #336]	; (8004d18 <_printf_i+0x21c>)
 8004bc6:	296f      	cmp	r1, #111	; 0x6f
 8004bc8:	bf14      	ite	ne
 8004bca:	220a      	movne	r2, #10
 8004bcc:	2208      	moveq	r2, #8
 8004bce:	2100      	movs	r1, #0
 8004bd0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004bd4:	6865      	ldr	r5, [r4, #4]
 8004bd6:	60a5      	str	r5, [r4, #8]
 8004bd8:	2d00      	cmp	r5, #0
 8004bda:	f2c0 8095 	blt.w	8004d08 <_printf_i+0x20c>
 8004bde:	6821      	ldr	r1, [r4, #0]
 8004be0:	f021 0104 	bic.w	r1, r1, #4
 8004be4:	6021      	str	r1, [r4, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d13d      	bne.n	8004c66 <_printf_i+0x16a>
 8004bea:	2d00      	cmp	r5, #0
 8004bec:	f040 808e 	bne.w	8004d0c <_printf_i+0x210>
 8004bf0:	4665      	mov	r5, ip
 8004bf2:	2a08      	cmp	r2, #8
 8004bf4:	d10b      	bne.n	8004c0e <_printf_i+0x112>
 8004bf6:	6823      	ldr	r3, [r4, #0]
 8004bf8:	07db      	lsls	r3, r3, #31
 8004bfa:	d508      	bpl.n	8004c0e <_printf_i+0x112>
 8004bfc:	6923      	ldr	r3, [r4, #16]
 8004bfe:	6862      	ldr	r2, [r4, #4]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	bfde      	ittt	le
 8004c04:	2330      	movle	r3, #48	; 0x30
 8004c06:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c0a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c0e:	ebac 0305 	sub.w	r3, ip, r5
 8004c12:	6123      	str	r3, [r4, #16]
 8004c14:	f8cd 8000 	str.w	r8, [sp]
 8004c18:	463b      	mov	r3, r7
 8004c1a:	aa03      	add	r2, sp, #12
 8004c1c:	4621      	mov	r1, r4
 8004c1e:	4630      	mov	r0, r6
 8004c20:	f7ff fef6 	bl	8004a10 <_printf_common>
 8004c24:	3001      	adds	r0, #1
 8004c26:	d14d      	bne.n	8004cc4 <_printf_i+0x1c8>
 8004c28:	f04f 30ff 	mov.w	r0, #4294967295
 8004c2c:	b005      	add	sp, #20
 8004c2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c32:	4839      	ldr	r0, [pc, #228]	; (8004d18 <_printf_i+0x21c>)
 8004c34:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004c38:	6813      	ldr	r3, [r2, #0]
 8004c3a:	6821      	ldr	r1, [r4, #0]
 8004c3c:	1d1d      	adds	r5, r3, #4
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6015      	str	r5, [r2, #0]
 8004c42:	060a      	lsls	r2, r1, #24
 8004c44:	d50b      	bpl.n	8004c5e <_printf_i+0x162>
 8004c46:	07ca      	lsls	r2, r1, #31
 8004c48:	bf44      	itt	mi
 8004c4a:	f041 0120 	orrmi.w	r1, r1, #32
 8004c4e:	6021      	strmi	r1, [r4, #0]
 8004c50:	b91b      	cbnz	r3, 8004c5a <_printf_i+0x15e>
 8004c52:	6822      	ldr	r2, [r4, #0]
 8004c54:	f022 0220 	bic.w	r2, r2, #32
 8004c58:	6022      	str	r2, [r4, #0]
 8004c5a:	2210      	movs	r2, #16
 8004c5c:	e7b7      	b.n	8004bce <_printf_i+0xd2>
 8004c5e:	064d      	lsls	r5, r1, #25
 8004c60:	bf48      	it	mi
 8004c62:	b29b      	uxthmi	r3, r3
 8004c64:	e7ef      	b.n	8004c46 <_printf_i+0x14a>
 8004c66:	4665      	mov	r5, ip
 8004c68:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c6c:	fb02 3311 	mls	r3, r2, r1, r3
 8004c70:	5cc3      	ldrb	r3, [r0, r3]
 8004c72:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004c76:	460b      	mov	r3, r1
 8004c78:	2900      	cmp	r1, #0
 8004c7a:	d1f5      	bne.n	8004c68 <_printf_i+0x16c>
 8004c7c:	e7b9      	b.n	8004bf2 <_printf_i+0xf6>
 8004c7e:	6813      	ldr	r3, [r2, #0]
 8004c80:	6825      	ldr	r5, [r4, #0]
 8004c82:	6961      	ldr	r1, [r4, #20]
 8004c84:	1d18      	adds	r0, r3, #4
 8004c86:	6010      	str	r0, [r2, #0]
 8004c88:	0628      	lsls	r0, r5, #24
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	d501      	bpl.n	8004c92 <_printf_i+0x196>
 8004c8e:	6019      	str	r1, [r3, #0]
 8004c90:	e002      	b.n	8004c98 <_printf_i+0x19c>
 8004c92:	066a      	lsls	r2, r5, #25
 8004c94:	d5fb      	bpl.n	8004c8e <_printf_i+0x192>
 8004c96:	8019      	strh	r1, [r3, #0]
 8004c98:	2300      	movs	r3, #0
 8004c9a:	6123      	str	r3, [r4, #16]
 8004c9c:	4665      	mov	r5, ip
 8004c9e:	e7b9      	b.n	8004c14 <_printf_i+0x118>
 8004ca0:	6813      	ldr	r3, [r2, #0]
 8004ca2:	1d19      	adds	r1, r3, #4
 8004ca4:	6011      	str	r1, [r2, #0]
 8004ca6:	681d      	ldr	r5, [r3, #0]
 8004ca8:	6862      	ldr	r2, [r4, #4]
 8004caa:	2100      	movs	r1, #0
 8004cac:	4628      	mov	r0, r5
 8004cae:	f7fb faaf 	bl	8000210 <memchr>
 8004cb2:	b108      	cbz	r0, 8004cb8 <_printf_i+0x1bc>
 8004cb4:	1b40      	subs	r0, r0, r5
 8004cb6:	6060      	str	r0, [r4, #4]
 8004cb8:	6863      	ldr	r3, [r4, #4]
 8004cba:	6123      	str	r3, [r4, #16]
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cc2:	e7a7      	b.n	8004c14 <_printf_i+0x118>
 8004cc4:	6923      	ldr	r3, [r4, #16]
 8004cc6:	462a      	mov	r2, r5
 8004cc8:	4639      	mov	r1, r7
 8004cca:	4630      	mov	r0, r6
 8004ccc:	47c0      	blx	r8
 8004cce:	3001      	adds	r0, #1
 8004cd0:	d0aa      	beq.n	8004c28 <_printf_i+0x12c>
 8004cd2:	6823      	ldr	r3, [r4, #0]
 8004cd4:	079b      	lsls	r3, r3, #30
 8004cd6:	d413      	bmi.n	8004d00 <_printf_i+0x204>
 8004cd8:	68e0      	ldr	r0, [r4, #12]
 8004cda:	9b03      	ldr	r3, [sp, #12]
 8004cdc:	4298      	cmp	r0, r3
 8004cde:	bfb8      	it	lt
 8004ce0:	4618      	movlt	r0, r3
 8004ce2:	e7a3      	b.n	8004c2c <_printf_i+0x130>
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	464a      	mov	r2, r9
 8004ce8:	4639      	mov	r1, r7
 8004cea:	4630      	mov	r0, r6
 8004cec:	47c0      	blx	r8
 8004cee:	3001      	adds	r0, #1
 8004cf0:	d09a      	beq.n	8004c28 <_printf_i+0x12c>
 8004cf2:	3501      	adds	r5, #1
 8004cf4:	68e3      	ldr	r3, [r4, #12]
 8004cf6:	9a03      	ldr	r2, [sp, #12]
 8004cf8:	1a9b      	subs	r3, r3, r2
 8004cfa:	42ab      	cmp	r3, r5
 8004cfc:	dcf2      	bgt.n	8004ce4 <_printf_i+0x1e8>
 8004cfe:	e7eb      	b.n	8004cd8 <_printf_i+0x1dc>
 8004d00:	2500      	movs	r5, #0
 8004d02:	f104 0919 	add.w	r9, r4, #25
 8004d06:	e7f5      	b.n	8004cf4 <_printf_i+0x1f8>
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1ac      	bne.n	8004c66 <_printf_i+0x16a>
 8004d0c:	7803      	ldrb	r3, [r0, #0]
 8004d0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d12:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d16:	e76c      	b.n	8004bf2 <_printf_i+0xf6>
 8004d18:	08007d62 	.word	0x08007d62
 8004d1c:	08007d73 	.word	0x08007d73

08004d20 <iprintf>:
 8004d20:	b40f      	push	{r0, r1, r2, r3}
 8004d22:	4b0a      	ldr	r3, [pc, #40]	; (8004d4c <iprintf+0x2c>)
 8004d24:	b513      	push	{r0, r1, r4, lr}
 8004d26:	681c      	ldr	r4, [r3, #0]
 8004d28:	b124      	cbz	r4, 8004d34 <iprintf+0x14>
 8004d2a:	69a3      	ldr	r3, [r4, #24]
 8004d2c:	b913      	cbnz	r3, 8004d34 <iprintf+0x14>
 8004d2e:	4620      	mov	r0, r4
 8004d30:	f000 fe92 	bl	8005a58 <__sinit>
 8004d34:	ab05      	add	r3, sp, #20
 8004d36:	9a04      	ldr	r2, [sp, #16]
 8004d38:	68a1      	ldr	r1, [r4, #8]
 8004d3a:	9301      	str	r3, [sp, #4]
 8004d3c:	4620      	mov	r0, r4
 8004d3e:	f001 faf1 	bl	8006324 <_vfiprintf_r>
 8004d42:	b002      	add	sp, #8
 8004d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d48:	b004      	add	sp, #16
 8004d4a:	4770      	bx	lr
 8004d4c:	200001a0 	.word	0x200001a0

08004d50 <quorem>:
 8004d50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d54:	6903      	ldr	r3, [r0, #16]
 8004d56:	690c      	ldr	r4, [r1, #16]
 8004d58:	42a3      	cmp	r3, r4
 8004d5a:	4680      	mov	r8, r0
 8004d5c:	f2c0 8082 	blt.w	8004e64 <quorem+0x114>
 8004d60:	3c01      	subs	r4, #1
 8004d62:	f101 0714 	add.w	r7, r1, #20
 8004d66:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004d6a:	f100 0614 	add.w	r6, r0, #20
 8004d6e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004d72:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004d76:	eb06 030c 	add.w	r3, r6, ip
 8004d7a:	3501      	adds	r5, #1
 8004d7c:	eb07 090c 	add.w	r9, r7, ip
 8004d80:	9301      	str	r3, [sp, #4]
 8004d82:	fbb0 f5f5 	udiv	r5, r0, r5
 8004d86:	b395      	cbz	r5, 8004dee <quorem+0x9e>
 8004d88:	f04f 0a00 	mov.w	sl, #0
 8004d8c:	4638      	mov	r0, r7
 8004d8e:	46b6      	mov	lr, r6
 8004d90:	46d3      	mov	fp, sl
 8004d92:	f850 2b04 	ldr.w	r2, [r0], #4
 8004d96:	b293      	uxth	r3, r2
 8004d98:	fb05 a303 	mla	r3, r5, r3, sl
 8004d9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	ebab 0303 	sub.w	r3, fp, r3
 8004da6:	0c12      	lsrs	r2, r2, #16
 8004da8:	f8de b000 	ldr.w	fp, [lr]
 8004dac:	fb05 a202 	mla	r2, r5, r2, sl
 8004db0:	fa13 f38b 	uxtah	r3, r3, fp
 8004db4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004db8:	fa1f fb82 	uxth.w	fp, r2
 8004dbc:	f8de 2000 	ldr.w	r2, [lr]
 8004dc0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004dc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004dce:	4581      	cmp	r9, r0
 8004dd0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004dd4:	f84e 3b04 	str.w	r3, [lr], #4
 8004dd8:	d2db      	bcs.n	8004d92 <quorem+0x42>
 8004dda:	f856 300c 	ldr.w	r3, [r6, ip]
 8004dde:	b933      	cbnz	r3, 8004dee <quorem+0x9e>
 8004de0:	9b01      	ldr	r3, [sp, #4]
 8004de2:	3b04      	subs	r3, #4
 8004de4:	429e      	cmp	r6, r3
 8004de6:	461a      	mov	r2, r3
 8004de8:	d330      	bcc.n	8004e4c <quorem+0xfc>
 8004dea:	f8c8 4010 	str.w	r4, [r8, #16]
 8004dee:	4640      	mov	r0, r8
 8004df0:	f001 f8f2 	bl	8005fd8 <__mcmp>
 8004df4:	2800      	cmp	r0, #0
 8004df6:	db25      	blt.n	8004e44 <quorem+0xf4>
 8004df8:	3501      	adds	r5, #1
 8004dfa:	4630      	mov	r0, r6
 8004dfc:	f04f 0c00 	mov.w	ip, #0
 8004e00:	f857 2b04 	ldr.w	r2, [r7], #4
 8004e04:	f8d0 e000 	ldr.w	lr, [r0]
 8004e08:	b293      	uxth	r3, r2
 8004e0a:	ebac 0303 	sub.w	r3, ip, r3
 8004e0e:	0c12      	lsrs	r2, r2, #16
 8004e10:	fa13 f38e 	uxtah	r3, r3, lr
 8004e14:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004e18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e22:	45b9      	cmp	r9, r7
 8004e24:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004e28:	f840 3b04 	str.w	r3, [r0], #4
 8004e2c:	d2e8      	bcs.n	8004e00 <quorem+0xb0>
 8004e2e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004e32:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004e36:	b92a      	cbnz	r2, 8004e44 <quorem+0xf4>
 8004e38:	3b04      	subs	r3, #4
 8004e3a:	429e      	cmp	r6, r3
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	d30b      	bcc.n	8004e58 <quorem+0x108>
 8004e40:	f8c8 4010 	str.w	r4, [r8, #16]
 8004e44:	4628      	mov	r0, r5
 8004e46:	b003      	add	sp, #12
 8004e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e4c:	6812      	ldr	r2, [r2, #0]
 8004e4e:	3b04      	subs	r3, #4
 8004e50:	2a00      	cmp	r2, #0
 8004e52:	d1ca      	bne.n	8004dea <quorem+0x9a>
 8004e54:	3c01      	subs	r4, #1
 8004e56:	e7c5      	b.n	8004de4 <quorem+0x94>
 8004e58:	6812      	ldr	r2, [r2, #0]
 8004e5a:	3b04      	subs	r3, #4
 8004e5c:	2a00      	cmp	r2, #0
 8004e5e:	d1ef      	bne.n	8004e40 <quorem+0xf0>
 8004e60:	3c01      	subs	r4, #1
 8004e62:	e7ea      	b.n	8004e3a <quorem+0xea>
 8004e64:	2000      	movs	r0, #0
 8004e66:	e7ee      	b.n	8004e46 <quorem+0xf6>

08004e68 <_dtoa_r>:
 8004e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e6c:	ec57 6b10 	vmov	r6, r7, d0
 8004e70:	b097      	sub	sp, #92	; 0x5c
 8004e72:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004e74:	9106      	str	r1, [sp, #24]
 8004e76:	4604      	mov	r4, r0
 8004e78:	920b      	str	r2, [sp, #44]	; 0x2c
 8004e7a:	9312      	str	r3, [sp, #72]	; 0x48
 8004e7c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004e80:	e9cd 6700 	strd	r6, r7, [sp]
 8004e84:	b93d      	cbnz	r5, 8004e96 <_dtoa_r+0x2e>
 8004e86:	2010      	movs	r0, #16
 8004e88:	f000 fe7e 	bl	8005b88 <malloc>
 8004e8c:	6260      	str	r0, [r4, #36]	; 0x24
 8004e8e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004e92:	6005      	str	r5, [r0, #0]
 8004e94:	60c5      	str	r5, [r0, #12]
 8004e96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e98:	6819      	ldr	r1, [r3, #0]
 8004e9a:	b151      	cbz	r1, 8004eb2 <_dtoa_r+0x4a>
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	604a      	str	r2, [r1, #4]
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	4093      	lsls	r3, r2
 8004ea4:	608b      	str	r3, [r1, #8]
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	f000 feb5 	bl	8005c16 <_Bfree>
 8004eac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004eae:	2200      	movs	r2, #0
 8004eb0:	601a      	str	r2, [r3, #0]
 8004eb2:	1e3b      	subs	r3, r7, #0
 8004eb4:	bfbb      	ittet	lt
 8004eb6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004eba:	9301      	strlt	r3, [sp, #4]
 8004ebc:	2300      	movge	r3, #0
 8004ebe:	2201      	movlt	r2, #1
 8004ec0:	bfac      	ite	ge
 8004ec2:	f8c8 3000 	strge.w	r3, [r8]
 8004ec6:	f8c8 2000 	strlt.w	r2, [r8]
 8004eca:	4baf      	ldr	r3, [pc, #700]	; (8005188 <_dtoa_r+0x320>)
 8004ecc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004ed0:	ea33 0308 	bics.w	r3, r3, r8
 8004ed4:	d114      	bne.n	8004f00 <_dtoa_r+0x98>
 8004ed6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004ed8:	f242 730f 	movw	r3, #9999	; 0x270f
 8004edc:	6013      	str	r3, [r2, #0]
 8004ede:	9b00      	ldr	r3, [sp, #0]
 8004ee0:	b923      	cbnz	r3, 8004eec <_dtoa_r+0x84>
 8004ee2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004ee6:	2800      	cmp	r0, #0
 8004ee8:	f000 8542 	beq.w	8005970 <_dtoa_r+0xb08>
 8004eec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004eee:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800519c <_dtoa_r+0x334>
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 8544 	beq.w	8005980 <_dtoa_r+0xb18>
 8004ef8:	f10b 0303 	add.w	r3, fp, #3
 8004efc:	f000 bd3e 	b.w	800597c <_dtoa_r+0xb14>
 8004f00:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004f04:	2200      	movs	r2, #0
 8004f06:	2300      	movs	r3, #0
 8004f08:	4630      	mov	r0, r6
 8004f0a:	4639      	mov	r1, r7
 8004f0c:	f7fb fdf4 	bl	8000af8 <__aeabi_dcmpeq>
 8004f10:	4681      	mov	r9, r0
 8004f12:	b168      	cbz	r0, 8004f30 <_dtoa_r+0xc8>
 8004f14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004f16:	2301      	movs	r3, #1
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 8524 	beq.w	800596a <_dtoa_r+0xb02>
 8004f22:	4b9a      	ldr	r3, [pc, #616]	; (800518c <_dtoa_r+0x324>)
 8004f24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004f26:	f103 3bff 	add.w	fp, r3, #4294967295
 8004f2a:	6013      	str	r3, [r2, #0]
 8004f2c:	f000 bd28 	b.w	8005980 <_dtoa_r+0xb18>
 8004f30:	aa14      	add	r2, sp, #80	; 0x50
 8004f32:	a915      	add	r1, sp, #84	; 0x54
 8004f34:	ec47 6b10 	vmov	d0, r6, r7
 8004f38:	4620      	mov	r0, r4
 8004f3a:	f001 f8c4 	bl	80060c6 <__d2b>
 8004f3e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004f42:	9004      	str	r0, [sp, #16]
 8004f44:	2d00      	cmp	r5, #0
 8004f46:	d07c      	beq.n	8005042 <_dtoa_r+0x1da>
 8004f48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004f4c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004f50:	46b2      	mov	sl, r6
 8004f52:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8004f56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004f5a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8004f5e:	2200      	movs	r2, #0
 8004f60:	4b8b      	ldr	r3, [pc, #556]	; (8005190 <_dtoa_r+0x328>)
 8004f62:	4650      	mov	r0, sl
 8004f64:	4659      	mov	r1, fp
 8004f66:	f7fb f9a7 	bl	80002b8 <__aeabi_dsub>
 8004f6a:	a381      	add	r3, pc, #516	; (adr r3, 8005170 <_dtoa_r+0x308>)
 8004f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f70:	f7fb fb5a 	bl	8000628 <__aeabi_dmul>
 8004f74:	a380      	add	r3, pc, #512	; (adr r3, 8005178 <_dtoa_r+0x310>)
 8004f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7a:	f7fb f99f 	bl	80002bc <__adddf3>
 8004f7e:	4606      	mov	r6, r0
 8004f80:	4628      	mov	r0, r5
 8004f82:	460f      	mov	r7, r1
 8004f84:	f7fb fae6 	bl	8000554 <__aeabi_i2d>
 8004f88:	a37d      	add	r3, pc, #500	; (adr r3, 8005180 <_dtoa_r+0x318>)
 8004f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8e:	f7fb fb4b 	bl	8000628 <__aeabi_dmul>
 8004f92:	4602      	mov	r2, r0
 8004f94:	460b      	mov	r3, r1
 8004f96:	4630      	mov	r0, r6
 8004f98:	4639      	mov	r1, r7
 8004f9a:	f7fb f98f 	bl	80002bc <__adddf3>
 8004f9e:	4606      	mov	r6, r0
 8004fa0:	460f      	mov	r7, r1
 8004fa2:	f7fb fdf1 	bl	8000b88 <__aeabi_d2iz>
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	4682      	mov	sl, r0
 8004faa:	2300      	movs	r3, #0
 8004fac:	4630      	mov	r0, r6
 8004fae:	4639      	mov	r1, r7
 8004fb0:	f7fb fdac 	bl	8000b0c <__aeabi_dcmplt>
 8004fb4:	b148      	cbz	r0, 8004fca <_dtoa_r+0x162>
 8004fb6:	4650      	mov	r0, sl
 8004fb8:	f7fb facc 	bl	8000554 <__aeabi_i2d>
 8004fbc:	4632      	mov	r2, r6
 8004fbe:	463b      	mov	r3, r7
 8004fc0:	f7fb fd9a 	bl	8000af8 <__aeabi_dcmpeq>
 8004fc4:	b908      	cbnz	r0, 8004fca <_dtoa_r+0x162>
 8004fc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004fca:	f1ba 0f16 	cmp.w	sl, #22
 8004fce:	d859      	bhi.n	8005084 <_dtoa_r+0x21c>
 8004fd0:	4970      	ldr	r1, [pc, #448]	; (8005194 <_dtoa_r+0x32c>)
 8004fd2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004fd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004fda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004fde:	f7fb fdb3 	bl	8000b48 <__aeabi_dcmpgt>
 8004fe2:	2800      	cmp	r0, #0
 8004fe4:	d050      	beq.n	8005088 <_dtoa_r+0x220>
 8004fe6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004fea:	2300      	movs	r3, #0
 8004fec:	930f      	str	r3, [sp, #60]	; 0x3c
 8004fee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004ff0:	1b5d      	subs	r5, r3, r5
 8004ff2:	f1b5 0801 	subs.w	r8, r5, #1
 8004ff6:	bf49      	itett	mi
 8004ff8:	f1c5 0301 	rsbmi	r3, r5, #1
 8004ffc:	2300      	movpl	r3, #0
 8004ffe:	9305      	strmi	r3, [sp, #20]
 8005000:	f04f 0800 	movmi.w	r8, #0
 8005004:	bf58      	it	pl
 8005006:	9305      	strpl	r3, [sp, #20]
 8005008:	f1ba 0f00 	cmp.w	sl, #0
 800500c:	db3e      	blt.n	800508c <_dtoa_r+0x224>
 800500e:	2300      	movs	r3, #0
 8005010:	44d0      	add	r8, sl
 8005012:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005016:	9307      	str	r3, [sp, #28]
 8005018:	9b06      	ldr	r3, [sp, #24]
 800501a:	2b09      	cmp	r3, #9
 800501c:	f200 8090 	bhi.w	8005140 <_dtoa_r+0x2d8>
 8005020:	2b05      	cmp	r3, #5
 8005022:	bfc4      	itt	gt
 8005024:	3b04      	subgt	r3, #4
 8005026:	9306      	strgt	r3, [sp, #24]
 8005028:	9b06      	ldr	r3, [sp, #24]
 800502a:	f1a3 0302 	sub.w	r3, r3, #2
 800502e:	bfcc      	ite	gt
 8005030:	2500      	movgt	r5, #0
 8005032:	2501      	movle	r5, #1
 8005034:	2b03      	cmp	r3, #3
 8005036:	f200 808f 	bhi.w	8005158 <_dtoa_r+0x2f0>
 800503a:	e8df f003 	tbb	[pc, r3]
 800503e:	7f7d      	.short	0x7f7d
 8005040:	7131      	.short	0x7131
 8005042:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005046:	441d      	add	r5, r3
 8005048:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800504c:	2820      	cmp	r0, #32
 800504e:	dd13      	ble.n	8005078 <_dtoa_r+0x210>
 8005050:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005054:	9b00      	ldr	r3, [sp, #0]
 8005056:	fa08 f800 	lsl.w	r8, r8, r0
 800505a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800505e:	fa23 f000 	lsr.w	r0, r3, r0
 8005062:	ea48 0000 	orr.w	r0, r8, r0
 8005066:	f7fb fa65 	bl	8000534 <__aeabi_ui2d>
 800506a:	2301      	movs	r3, #1
 800506c:	4682      	mov	sl, r0
 800506e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005072:	3d01      	subs	r5, #1
 8005074:	9313      	str	r3, [sp, #76]	; 0x4c
 8005076:	e772      	b.n	8004f5e <_dtoa_r+0xf6>
 8005078:	9b00      	ldr	r3, [sp, #0]
 800507a:	f1c0 0020 	rsb	r0, r0, #32
 800507e:	fa03 f000 	lsl.w	r0, r3, r0
 8005082:	e7f0      	b.n	8005066 <_dtoa_r+0x1fe>
 8005084:	2301      	movs	r3, #1
 8005086:	e7b1      	b.n	8004fec <_dtoa_r+0x184>
 8005088:	900f      	str	r0, [sp, #60]	; 0x3c
 800508a:	e7b0      	b.n	8004fee <_dtoa_r+0x186>
 800508c:	9b05      	ldr	r3, [sp, #20]
 800508e:	eba3 030a 	sub.w	r3, r3, sl
 8005092:	9305      	str	r3, [sp, #20]
 8005094:	f1ca 0300 	rsb	r3, sl, #0
 8005098:	9307      	str	r3, [sp, #28]
 800509a:	2300      	movs	r3, #0
 800509c:	930e      	str	r3, [sp, #56]	; 0x38
 800509e:	e7bb      	b.n	8005018 <_dtoa_r+0x1b0>
 80050a0:	2301      	movs	r3, #1
 80050a2:	930a      	str	r3, [sp, #40]	; 0x28
 80050a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	dd59      	ble.n	800515e <_dtoa_r+0x2f6>
 80050aa:	9302      	str	r3, [sp, #8]
 80050ac:	4699      	mov	r9, r3
 80050ae:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80050b0:	2200      	movs	r2, #0
 80050b2:	6072      	str	r2, [r6, #4]
 80050b4:	2204      	movs	r2, #4
 80050b6:	f102 0014 	add.w	r0, r2, #20
 80050ba:	4298      	cmp	r0, r3
 80050bc:	6871      	ldr	r1, [r6, #4]
 80050be:	d953      	bls.n	8005168 <_dtoa_r+0x300>
 80050c0:	4620      	mov	r0, r4
 80050c2:	f000 fd74 	bl	8005bae <_Balloc>
 80050c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050c8:	6030      	str	r0, [r6, #0]
 80050ca:	f1b9 0f0e 	cmp.w	r9, #14
 80050ce:	f8d3 b000 	ldr.w	fp, [r3]
 80050d2:	f200 80e6 	bhi.w	80052a2 <_dtoa_r+0x43a>
 80050d6:	2d00      	cmp	r5, #0
 80050d8:	f000 80e3 	beq.w	80052a2 <_dtoa_r+0x43a>
 80050dc:	ed9d 7b00 	vldr	d7, [sp]
 80050e0:	f1ba 0f00 	cmp.w	sl, #0
 80050e4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80050e8:	dd74      	ble.n	80051d4 <_dtoa_r+0x36c>
 80050ea:	4a2a      	ldr	r2, [pc, #168]	; (8005194 <_dtoa_r+0x32c>)
 80050ec:	f00a 030f 	and.w	r3, sl, #15
 80050f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80050f4:	ed93 7b00 	vldr	d7, [r3]
 80050f8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80050fc:	06f0      	lsls	r0, r6, #27
 80050fe:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005102:	d565      	bpl.n	80051d0 <_dtoa_r+0x368>
 8005104:	4b24      	ldr	r3, [pc, #144]	; (8005198 <_dtoa_r+0x330>)
 8005106:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800510a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800510e:	f7fb fbb5 	bl	800087c <__aeabi_ddiv>
 8005112:	e9cd 0100 	strd	r0, r1, [sp]
 8005116:	f006 060f 	and.w	r6, r6, #15
 800511a:	2503      	movs	r5, #3
 800511c:	4f1e      	ldr	r7, [pc, #120]	; (8005198 <_dtoa_r+0x330>)
 800511e:	e04c      	b.n	80051ba <_dtoa_r+0x352>
 8005120:	2301      	movs	r3, #1
 8005122:	930a      	str	r3, [sp, #40]	; 0x28
 8005124:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005126:	4453      	add	r3, sl
 8005128:	f103 0901 	add.w	r9, r3, #1
 800512c:	9302      	str	r3, [sp, #8]
 800512e:	464b      	mov	r3, r9
 8005130:	2b01      	cmp	r3, #1
 8005132:	bfb8      	it	lt
 8005134:	2301      	movlt	r3, #1
 8005136:	e7ba      	b.n	80050ae <_dtoa_r+0x246>
 8005138:	2300      	movs	r3, #0
 800513a:	e7b2      	b.n	80050a2 <_dtoa_r+0x23a>
 800513c:	2300      	movs	r3, #0
 800513e:	e7f0      	b.n	8005122 <_dtoa_r+0x2ba>
 8005140:	2501      	movs	r5, #1
 8005142:	2300      	movs	r3, #0
 8005144:	9306      	str	r3, [sp, #24]
 8005146:	950a      	str	r5, [sp, #40]	; 0x28
 8005148:	f04f 33ff 	mov.w	r3, #4294967295
 800514c:	9302      	str	r3, [sp, #8]
 800514e:	4699      	mov	r9, r3
 8005150:	2200      	movs	r2, #0
 8005152:	2312      	movs	r3, #18
 8005154:	920b      	str	r2, [sp, #44]	; 0x2c
 8005156:	e7aa      	b.n	80050ae <_dtoa_r+0x246>
 8005158:	2301      	movs	r3, #1
 800515a:	930a      	str	r3, [sp, #40]	; 0x28
 800515c:	e7f4      	b.n	8005148 <_dtoa_r+0x2e0>
 800515e:	2301      	movs	r3, #1
 8005160:	9302      	str	r3, [sp, #8]
 8005162:	4699      	mov	r9, r3
 8005164:	461a      	mov	r2, r3
 8005166:	e7f5      	b.n	8005154 <_dtoa_r+0x2ec>
 8005168:	3101      	adds	r1, #1
 800516a:	6071      	str	r1, [r6, #4]
 800516c:	0052      	lsls	r2, r2, #1
 800516e:	e7a2      	b.n	80050b6 <_dtoa_r+0x24e>
 8005170:	636f4361 	.word	0x636f4361
 8005174:	3fd287a7 	.word	0x3fd287a7
 8005178:	8b60c8b3 	.word	0x8b60c8b3
 800517c:	3fc68a28 	.word	0x3fc68a28
 8005180:	509f79fb 	.word	0x509f79fb
 8005184:	3fd34413 	.word	0x3fd34413
 8005188:	7ff00000 	.word	0x7ff00000
 800518c:	08007d61 	.word	0x08007d61
 8005190:	3ff80000 	.word	0x3ff80000
 8005194:	08007e20 	.word	0x08007e20
 8005198:	08007df8 	.word	0x08007df8
 800519c:	08007d8d 	.word	0x08007d8d
 80051a0:	07f1      	lsls	r1, r6, #31
 80051a2:	d508      	bpl.n	80051b6 <_dtoa_r+0x34e>
 80051a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80051a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051ac:	f7fb fa3c 	bl	8000628 <__aeabi_dmul>
 80051b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80051b4:	3501      	adds	r5, #1
 80051b6:	1076      	asrs	r6, r6, #1
 80051b8:	3708      	adds	r7, #8
 80051ba:	2e00      	cmp	r6, #0
 80051bc:	d1f0      	bne.n	80051a0 <_dtoa_r+0x338>
 80051be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80051c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051c6:	f7fb fb59 	bl	800087c <__aeabi_ddiv>
 80051ca:	e9cd 0100 	strd	r0, r1, [sp]
 80051ce:	e01a      	b.n	8005206 <_dtoa_r+0x39e>
 80051d0:	2502      	movs	r5, #2
 80051d2:	e7a3      	b.n	800511c <_dtoa_r+0x2b4>
 80051d4:	f000 80a0 	beq.w	8005318 <_dtoa_r+0x4b0>
 80051d8:	f1ca 0600 	rsb	r6, sl, #0
 80051dc:	4b9f      	ldr	r3, [pc, #636]	; (800545c <_dtoa_r+0x5f4>)
 80051de:	4fa0      	ldr	r7, [pc, #640]	; (8005460 <_dtoa_r+0x5f8>)
 80051e0:	f006 020f 	and.w	r2, r6, #15
 80051e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80051f0:	f7fb fa1a 	bl	8000628 <__aeabi_dmul>
 80051f4:	e9cd 0100 	strd	r0, r1, [sp]
 80051f8:	1136      	asrs	r6, r6, #4
 80051fa:	2300      	movs	r3, #0
 80051fc:	2502      	movs	r5, #2
 80051fe:	2e00      	cmp	r6, #0
 8005200:	d17f      	bne.n	8005302 <_dtoa_r+0x49a>
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1e1      	bne.n	80051ca <_dtoa_r+0x362>
 8005206:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005208:	2b00      	cmp	r3, #0
 800520a:	f000 8087 	beq.w	800531c <_dtoa_r+0x4b4>
 800520e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005212:	2200      	movs	r2, #0
 8005214:	4b93      	ldr	r3, [pc, #588]	; (8005464 <_dtoa_r+0x5fc>)
 8005216:	4630      	mov	r0, r6
 8005218:	4639      	mov	r1, r7
 800521a:	f7fb fc77 	bl	8000b0c <__aeabi_dcmplt>
 800521e:	2800      	cmp	r0, #0
 8005220:	d07c      	beq.n	800531c <_dtoa_r+0x4b4>
 8005222:	f1b9 0f00 	cmp.w	r9, #0
 8005226:	d079      	beq.n	800531c <_dtoa_r+0x4b4>
 8005228:	9b02      	ldr	r3, [sp, #8]
 800522a:	2b00      	cmp	r3, #0
 800522c:	dd35      	ble.n	800529a <_dtoa_r+0x432>
 800522e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005232:	9308      	str	r3, [sp, #32]
 8005234:	4639      	mov	r1, r7
 8005236:	2200      	movs	r2, #0
 8005238:	4b8b      	ldr	r3, [pc, #556]	; (8005468 <_dtoa_r+0x600>)
 800523a:	4630      	mov	r0, r6
 800523c:	f7fb f9f4 	bl	8000628 <__aeabi_dmul>
 8005240:	e9cd 0100 	strd	r0, r1, [sp]
 8005244:	9f02      	ldr	r7, [sp, #8]
 8005246:	3501      	adds	r5, #1
 8005248:	4628      	mov	r0, r5
 800524a:	f7fb f983 	bl	8000554 <__aeabi_i2d>
 800524e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005252:	f7fb f9e9 	bl	8000628 <__aeabi_dmul>
 8005256:	2200      	movs	r2, #0
 8005258:	4b84      	ldr	r3, [pc, #528]	; (800546c <_dtoa_r+0x604>)
 800525a:	f7fb f82f 	bl	80002bc <__adddf3>
 800525e:	4605      	mov	r5, r0
 8005260:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005264:	2f00      	cmp	r7, #0
 8005266:	d15d      	bne.n	8005324 <_dtoa_r+0x4bc>
 8005268:	2200      	movs	r2, #0
 800526a:	4b81      	ldr	r3, [pc, #516]	; (8005470 <_dtoa_r+0x608>)
 800526c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005270:	f7fb f822 	bl	80002b8 <__aeabi_dsub>
 8005274:	462a      	mov	r2, r5
 8005276:	4633      	mov	r3, r6
 8005278:	e9cd 0100 	strd	r0, r1, [sp]
 800527c:	f7fb fc64 	bl	8000b48 <__aeabi_dcmpgt>
 8005280:	2800      	cmp	r0, #0
 8005282:	f040 8288 	bne.w	8005796 <_dtoa_r+0x92e>
 8005286:	462a      	mov	r2, r5
 8005288:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800528c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005290:	f7fb fc3c 	bl	8000b0c <__aeabi_dcmplt>
 8005294:	2800      	cmp	r0, #0
 8005296:	f040 827c 	bne.w	8005792 <_dtoa_r+0x92a>
 800529a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800529e:	e9cd 2300 	strd	r2, r3, [sp]
 80052a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f2c0 8150 	blt.w	800554a <_dtoa_r+0x6e2>
 80052aa:	f1ba 0f0e 	cmp.w	sl, #14
 80052ae:	f300 814c 	bgt.w	800554a <_dtoa_r+0x6e2>
 80052b2:	4b6a      	ldr	r3, [pc, #424]	; (800545c <_dtoa_r+0x5f4>)
 80052b4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80052b8:	ed93 7b00 	vldr	d7, [r3]
 80052bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052be:	2b00      	cmp	r3, #0
 80052c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80052c4:	f280 80d8 	bge.w	8005478 <_dtoa_r+0x610>
 80052c8:	f1b9 0f00 	cmp.w	r9, #0
 80052cc:	f300 80d4 	bgt.w	8005478 <_dtoa_r+0x610>
 80052d0:	f040 825e 	bne.w	8005790 <_dtoa_r+0x928>
 80052d4:	2200      	movs	r2, #0
 80052d6:	4b66      	ldr	r3, [pc, #408]	; (8005470 <_dtoa_r+0x608>)
 80052d8:	ec51 0b17 	vmov	r0, r1, d7
 80052dc:	f7fb f9a4 	bl	8000628 <__aeabi_dmul>
 80052e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80052e4:	f7fb fc26 	bl	8000b34 <__aeabi_dcmpge>
 80052e8:	464f      	mov	r7, r9
 80052ea:	464e      	mov	r6, r9
 80052ec:	2800      	cmp	r0, #0
 80052ee:	f040 8234 	bne.w	800575a <_dtoa_r+0x8f2>
 80052f2:	2331      	movs	r3, #49	; 0x31
 80052f4:	f10b 0501 	add.w	r5, fp, #1
 80052f8:	f88b 3000 	strb.w	r3, [fp]
 80052fc:	f10a 0a01 	add.w	sl, sl, #1
 8005300:	e22f      	b.n	8005762 <_dtoa_r+0x8fa>
 8005302:	07f2      	lsls	r2, r6, #31
 8005304:	d505      	bpl.n	8005312 <_dtoa_r+0x4aa>
 8005306:	e9d7 2300 	ldrd	r2, r3, [r7]
 800530a:	f7fb f98d 	bl	8000628 <__aeabi_dmul>
 800530e:	3501      	adds	r5, #1
 8005310:	2301      	movs	r3, #1
 8005312:	1076      	asrs	r6, r6, #1
 8005314:	3708      	adds	r7, #8
 8005316:	e772      	b.n	80051fe <_dtoa_r+0x396>
 8005318:	2502      	movs	r5, #2
 800531a:	e774      	b.n	8005206 <_dtoa_r+0x39e>
 800531c:	f8cd a020 	str.w	sl, [sp, #32]
 8005320:	464f      	mov	r7, r9
 8005322:	e791      	b.n	8005248 <_dtoa_r+0x3e0>
 8005324:	4b4d      	ldr	r3, [pc, #308]	; (800545c <_dtoa_r+0x5f4>)
 8005326:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800532a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800532e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005330:	2b00      	cmp	r3, #0
 8005332:	d047      	beq.n	80053c4 <_dtoa_r+0x55c>
 8005334:	4602      	mov	r2, r0
 8005336:	460b      	mov	r3, r1
 8005338:	2000      	movs	r0, #0
 800533a:	494e      	ldr	r1, [pc, #312]	; (8005474 <_dtoa_r+0x60c>)
 800533c:	f7fb fa9e 	bl	800087c <__aeabi_ddiv>
 8005340:	462a      	mov	r2, r5
 8005342:	4633      	mov	r3, r6
 8005344:	f7fa ffb8 	bl	80002b8 <__aeabi_dsub>
 8005348:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800534c:	465d      	mov	r5, fp
 800534e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005352:	f7fb fc19 	bl	8000b88 <__aeabi_d2iz>
 8005356:	4606      	mov	r6, r0
 8005358:	f7fb f8fc 	bl	8000554 <__aeabi_i2d>
 800535c:	4602      	mov	r2, r0
 800535e:	460b      	mov	r3, r1
 8005360:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005364:	f7fa ffa8 	bl	80002b8 <__aeabi_dsub>
 8005368:	3630      	adds	r6, #48	; 0x30
 800536a:	f805 6b01 	strb.w	r6, [r5], #1
 800536e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005372:	e9cd 0100 	strd	r0, r1, [sp]
 8005376:	f7fb fbc9 	bl	8000b0c <__aeabi_dcmplt>
 800537a:	2800      	cmp	r0, #0
 800537c:	d163      	bne.n	8005446 <_dtoa_r+0x5de>
 800537e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005382:	2000      	movs	r0, #0
 8005384:	4937      	ldr	r1, [pc, #220]	; (8005464 <_dtoa_r+0x5fc>)
 8005386:	f7fa ff97 	bl	80002b8 <__aeabi_dsub>
 800538a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800538e:	f7fb fbbd 	bl	8000b0c <__aeabi_dcmplt>
 8005392:	2800      	cmp	r0, #0
 8005394:	f040 80b7 	bne.w	8005506 <_dtoa_r+0x69e>
 8005398:	eba5 030b 	sub.w	r3, r5, fp
 800539c:	429f      	cmp	r7, r3
 800539e:	f77f af7c 	ble.w	800529a <_dtoa_r+0x432>
 80053a2:	2200      	movs	r2, #0
 80053a4:	4b30      	ldr	r3, [pc, #192]	; (8005468 <_dtoa_r+0x600>)
 80053a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80053aa:	f7fb f93d 	bl	8000628 <__aeabi_dmul>
 80053ae:	2200      	movs	r2, #0
 80053b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80053b4:	4b2c      	ldr	r3, [pc, #176]	; (8005468 <_dtoa_r+0x600>)
 80053b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80053ba:	f7fb f935 	bl	8000628 <__aeabi_dmul>
 80053be:	e9cd 0100 	strd	r0, r1, [sp]
 80053c2:	e7c4      	b.n	800534e <_dtoa_r+0x4e6>
 80053c4:	462a      	mov	r2, r5
 80053c6:	4633      	mov	r3, r6
 80053c8:	f7fb f92e 	bl	8000628 <__aeabi_dmul>
 80053cc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80053d0:	eb0b 0507 	add.w	r5, fp, r7
 80053d4:	465e      	mov	r6, fp
 80053d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80053da:	f7fb fbd5 	bl	8000b88 <__aeabi_d2iz>
 80053de:	4607      	mov	r7, r0
 80053e0:	f7fb f8b8 	bl	8000554 <__aeabi_i2d>
 80053e4:	3730      	adds	r7, #48	; 0x30
 80053e6:	4602      	mov	r2, r0
 80053e8:	460b      	mov	r3, r1
 80053ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80053ee:	f7fa ff63 	bl	80002b8 <__aeabi_dsub>
 80053f2:	f806 7b01 	strb.w	r7, [r6], #1
 80053f6:	42ae      	cmp	r6, r5
 80053f8:	e9cd 0100 	strd	r0, r1, [sp]
 80053fc:	f04f 0200 	mov.w	r2, #0
 8005400:	d126      	bne.n	8005450 <_dtoa_r+0x5e8>
 8005402:	4b1c      	ldr	r3, [pc, #112]	; (8005474 <_dtoa_r+0x60c>)
 8005404:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005408:	f7fa ff58 	bl	80002bc <__adddf3>
 800540c:	4602      	mov	r2, r0
 800540e:	460b      	mov	r3, r1
 8005410:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005414:	f7fb fb98 	bl	8000b48 <__aeabi_dcmpgt>
 8005418:	2800      	cmp	r0, #0
 800541a:	d174      	bne.n	8005506 <_dtoa_r+0x69e>
 800541c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005420:	2000      	movs	r0, #0
 8005422:	4914      	ldr	r1, [pc, #80]	; (8005474 <_dtoa_r+0x60c>)
 8005424:	f7fa ff48 	bl	80002b8 <__aeabi_dsub>
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005430:	f7fb fb6c 	bl	8000b0c <__aeabi_dcmplt>
 8005434:	2800      	cmp	r0, #0
 8005436:	f43f af30 	beq.w	800529a <_dtoa_r+0x432>
 800543a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800543e:	2b30      	cmp	r3, #48	; 0x30
 8005440:	f105 32ff 	add.w	r2, r5, #4294967295
 8005444:	d002      	beq.n	800544c <_dtoa_r+0x5e4>
 8005446:	f8dd a020 	ldr.w	sl, [sp, #32]
 800544a:	e04a      	b.n	80054e2 <_dtoa_r+0x67a>
 800544c:	4615      	mov	r5, r2
 800544e:	e7f4      	b.n	800543a <_dtoa_r+0x5d2>
 8005450:	4b05      	ldr	r3, [pc, #20]	; (8005468 <_dtoa_r+0x600>)
 8005452:	f7fb f8e9 	bl	8000628 <__aeabi_dmul>
 8005456:	e9cd 0100 	strd	r0, r1, [sp]
 800545a:	e7bc      	b.n	80053d6 <_dtoa_r+0x56e>
 800545c:	08007e20 	.word	0x08007e20
 8005460:	08007df8 	.word	0x08007df8
 8005464:	3ff00000 	.word	0x3ff00000
 8005468:	40240000 	.word	0x40240000
 800546c:	401c0000 	.word	0x401c0000
 8005470:	40140000 	.word	0x40140000
 8005474:	3fe00000 	.word	0x3fe00000
 8005478:	e9dd 6700 	ldrd	r6, r7, [sp]
 800547c:	465d      	mov	r5, fp
 800547e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005482:	4630      	mov	r0, r6
 8005484:	4639      	mov	r1, r7
 8005486:	f7fb f9f9 	bl	800087c <__aeabi_ddiv>
 800548a:	f7fb fb7d 	bl	8000b88 <__aeabi_d2iz>
 800548e:	4680      	mov	r8, r0
 8005490:	f7fb f860 	bl	8000554 <__aeabi_i2d>
 8005494:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005498:	f7fb f8c6 	bl	8000628 <__aeabi_dmul>
 800549c:	4602      	mov	r2, r0
 800549e:	460b      	mov	r3, r1
 80054a0:	4630      	mov	r0, r6
 80054a2:	4639      	mov	r1, r7
 80054a4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80054a8:	f7fa ff06 	bl	80002b8 <__aeabi_dsub>
 80054ac:	f805 6b01 	strb.w	r6, [r5], #1
 80054b0:	eba5 060b 	sub.w	r6, r5, fp
 80054b4:	45b1      	cmp	r9, r6
 80054b6:	4602      	mov	r2, r0
 80054b8:	460b      	mov	r3, r1
 80054ba:	d139      	bne.n	8005530 <_dtoa_r+0x6c8>
 80054bc:	f7fa fefe 	bl	80002bc <__adddf3>
 80054c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054c4:	4606      	mov	r6, r0
 80054c6:	460f      	mov	r7, r1
 80054c8:	f7fb fb3e 	bl	8000b48 <__aeabi_dcmpgt>
 80054cc:	b9c8      	cbnz	r0, 8005502 <_dtoa_r+0x69a>
 80054ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054d2:	4630      	mov	r0, r6
 80054d4:	4639      	mov	r1, r7
 80054d6:	f7fb fb0f 	bl	8000af8 <__aeabi_dcmpeq>
 80054da:	b110      	cbz	r0, 80054e2 <_dtoa_r+0x67a>
 80054dc:	f018 0f01 	tst.w	r8, #1
 80054e0:	d10f      	bne.n	8005502 <_dtoa_r+0x69a>
 80054e2:	9904      	ldr	r1, [sp, #16]
 80054e4:	4620      	mov	r0, r4
 80054e6:	f000 fb96 	bl	8005c16 <_Bfree>
 80054ea:	2300      	movs	r3, #0
 80054ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80054ee:	702b      	strb	r3, [r5, #0]
 80054f0:	f10a 0301 	add.w	r3, sl, #1
 80054f4:	6013      	str	r3, [r2, #0]
 80054f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f000 8241 	beq.w	8005980 <_dtoa_r+0xb18>
 80054fe:	601d      	str	r5, [r3, #0]
 8005500:	e23e      	b.n	8005980 <_dtoa_r+0xb18>
 8005502:	f8cd a020 	str.w	sl, [sp, #32]
 8005506:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800550a:	2a39      	cmp	r2, #57	; 0x39
 800550c:	f105 33ff 	add.w	r3, r5, #4294967295
 8005510:	d108      	bne.n	8005524 <_dtoa_r+0x6bc>
 8005512:	459b      	cmp	fp, r3
 8005514:	d10a      	bne.n	800552c <_dtoa_r+0x6c4>
 8005516:	9b08      	ldr	r3, [sp, #32]
 8005518:	3301      	adds	r3, #1
 800551a:	9308      	str	r3, [sp, #32]
 800551c:	2330      	movs	r3, #48	; 0x30
 800551e:	f88b 3000 	strb.w	r3, [fp]
 8005522:	465b      	mov	r3, fp
 8005524:	781a      	ldrb	r2, [r3, #0]
 8005526:	3201      	adds	r2, #1
 8005528:	701a      	strb	r2, [r3, #0]
 800552a:	e78c      	b.n	8005446 <_dtoa_r+0x5de>
 800552c:	461d      	mov	r5, r3
 800552e:	e7ea      	b.n	8005506 <_dtoa_r+0x69e>
 8005530:	2200      	movs	r2, #0
 8005532:	4b9b      	ldr	r3, [pc, #620]	; (80057a0 <_dtoa_r+0x938>)
 8005534:	f7fb f878 	bl	8000628 <__aeabi_dmul>
 8005538:	2200      	movs	r2, #0
 800553a:	2300      	movs	r3, #0
 800553c:	4606      	mov	r6, r0
 800553e:	460f      	mov	r7, r1
 8005540:	f7fb fada 	bl	8000af8 <__aeabi_dcmpeq>
 8005544:	2800      	cmp	r0, #0
 8005546:	d09a      	beq.n	800547e <_dtoa_r+0x616>
 8005548:	e7cb      	b.n	80054e2 <_dtoa_r+0x67a>
 800554a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800554c:	2a00      	cmp	r2, #0
 800554e:	f000 808b 	beq.w	8005668 <_dtoa_r+0x800>
 8005552:	9a06      	ldr	r2, [sp, #24]
 8005554:	2a01      	cmp	r2, #1
 8005556:	dc6e      	bgt.n	8005636 <_dtoa_r+0x7ce>
 8005558:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800555a:	2a00      	cmp	r2, #0
 800555c:	d067      	beq.n	800562e <_dtoa_r+0x7c6>
 800555e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005562:	9f07      	ldr	r7, [sp, #28]
 8005564:	9d05      	ldr	r5, [sp, #20]
 8005566:	9a05      	ldr	r2, [sp, #20]
 8005568:	2101      	movs	r1, #1
 800556a:	441a      	add	r2, r3
 800556c:	4620      	mov	r0, r4
 800556e:	9205      	str	r2, [sp, #20]
 8005570:	4498      	add	r8, r3
 8005572:	f000 fbf0 	bl	8005d56 <__i2b>
 8005576:	4606      	mov	r6, r0
 8005578:	2d00      	cmp	r5, #0
 800557a:	dd0c      	ble.n	8005596 <_dtoa_r+0x72e>
 800557c:	f1b8 0f00 	cmp.w	r8, #0
 8005580:	dd09      	ble.n	8005596 <_dtoa_r+0x72e>
 8005582:	4545      	cmp	r5, r8
 8005584:	9a05      	ldr	r2, [sp, #20]
 8005586:	462b      	mov	r3, r5
 8005588:	bfa8      	it	ge
 800558a:	4643      	movge	r3, r8
 800558c:	1ad2      	subs	r2, r2, r3
 800558e:	9205      	str	r2, [sp, #20]
 8005590:	1aed      	subs	r5, r5, r3
 8005592:	eba8 0803 	sub.w	r8, r8, r3
 8005596:	9b07      	ldr	r3, [sp, #28]
 8005598:	b1eb      	cbz	r3, 80055d6 <_dtoa_r+0x76e>
 800559a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800559c:	2b00      	cmp	r3, #0
 800559e:	d067      	beq.n	8005670 <_dtoa_r+0x808>
 80055a0:	b18f      	cbz	r7, 80055c6 <_dtoa_r+0x75e>
 80055a2:	4631      	mov	r1, r6
 80055a4:	463a      	mov	r2, r7
 80055a6:	4620      	mov	r0, r4
 80055a8:	f000 fc74 	bl	8005e94 <__pow5mult>
 80055ac:	9a04      	ldr	r2, [sp, #16]
 80055ae:	4601      	mov	r1, r0
 80055b0:	4606      	mov	r6, r0
 80055b2:	4620      	mov	r0, r4
 80055b4:	f000 fbd8 	bl	8005d68 <__multiply>
 80055b8:	9904      	ldr	r1, [sp, #16]
 80055ba:	9008      	str	r0, [sp, #32]
 80055bc:	4620      	mov	r0, r4
 80055be:	f000 fb2a 	bl	8005c16 <_Bfree>
 80055c2:	9b08      	ldr	r3, [sp, #32]
 80055c4:	9304      	str	r3, [sp, #16]
 80055c6:	9b07      	ldr	r3, [sp, #28]
 80055c8:	1bda      	subs	r2, r3, r7
 80055ca:	d004      	beq.n	80055d6 <_dtoa_r+0x76e>
 80055cc:	9904      	ldr	r1, [sp, #16]
 80055ce:	4620      	mov	r0, r4
 80055d0:	f000 fc60 	bl	8005e94 <__pow5mult>
 80055d4:	9004      	str	r0, [sp, #16]
 80055d6:	2101      	movs	r1, #1
 80055d8:	4620      	mov	r0, r4
 80055da:	f000 fbbc 	bl	8005d56 <__i2b>
 80055de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055e0:	4607      	mov	r7, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f000 81d0 	beq.w	8005988 <_dtoa_r+0xb20>
 80055e8:	461a      	mov	r2, r3
 80055ea:	4601      	mov	r1, r0
 80055ec:	4620      	mov	r0, r4
 80055ee:	f000 fc51 	bl	8005e94 <__pow5mult>
 80055f2:	9b06      	ldr	r3, [sp, #24]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	4607      	mov	r7, r0
 80055f8:	dc40      	bgt.n	800567c <_dtoa_r+0x814>
 80055fa:	9b00      	ldr	r3, [sp, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d139      	bne.n	8005674 <_dtoa_r+0x80c>
 8005600:	9b01      	ldr	r3, [sp, #4]
 8005602:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005606:	2b00      	cmp	r3, #0
 8005608:	d136      	bne.n	8005678 <_dtoa_r+0x810>
 800560a:	9b01      	ldr	r3, [sp, #4]
 800560c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005610:	0d1b      	lsrs	r3, r3, #20
 8005612:	051b      	lsls	r3, r3, #20
 8005614:	b12b      	cbz	r3, 8005622 <_dtoa_r+0x7ba>
 8005616:	9b05      	ldr	r3, [sp, #20]
 8005618:	3301      	adds	r3, #1
 800561a:	9305      	str	r3, [sp, #20]
 800561c:	f108 0801 	add.w	r8, r8, #1
 8005620:	2301      	movs	r3, #1
 8005622:	9307      	str	r3, [sp, #28]
 8005624:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005626:	2b00      	cmp	r3, #0
 8005628:	d12a      	bne.n	8005680 <_dtoa_r+0x818>
 800562a:	2001      	movs	r0, #1
 800562c:	e030      	b.n	8005690 <_dtoa_r+0x828>
 800562e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005630:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005634:	e795      	b.n	8005562 <_dtoa_r+0x6fa>
 8005636:	9b07      	ldr	r3, [sp, #28]
 8005638:	f109 37ff 	add.w	r7, r9, #4294967295
 800563c:	42bb      	cmp	r3, r7
 800563e:	bfbf      	itttt	lt
 8005640:	9b07      	ldrlt	r3, [sp, #28]
 8005642:	9707      	strlt	r7, [sp, #28]
 8005644:	1afa      	sublt	r2, r7, r3
 8005646:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005648:	bfbb      	ittet	lt
 800564a:	189b      	addlt	r3, r3, r2
 800564c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800564e:	1bdf      	subge	r7, r3, r7
 8005650:	2700      	movlt	r7, #0
 8005652:	f1b9 0f00 	cmp.w	r9, #0
 8005656:	bfb5      	itete	lt
 8005658:	9b05      	ldrlt	r3, [sp, #20]
 800565a:	9d05      	ldrge	r5, [sp, #20]
 800565c:	eba3 0509 	sublt.w	r5, r3, r9
 8005660:	464b      	movge	r3, r9
 8005662:	bfb8      	it	lt
 8005664:	2300      	movlt	r3, #0
 8005666:	e77e      	b.n	8005566 <_dtoa_r+0x6fe>
 8005668:	9f07      	ldr	r7, [sp, #28]
 800566a:	9d05      	ldr	r5, [sp, #20]
 800566c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800566e:	e783      	b.n	8005578 <_dtoa_r+0x710>
 8005670:	9a07      	ldr	r2, [sp, #28]
 8005672:	e7ab      	b.n	80055cc <_dtoa_r+0x764>
 8005674:	2300      	movs	r3, #0
 8005676:	e7d4      	b.n	8005622 <_dtoa_r+0x7ba>
 8005678:	9b00      	ldr	r3, [sp, #0]
 800567a:	e7d2      	b.n	8005622 <_dtoa_r+0x7ba>
 800567c:	2300      	movs	r3, #0
 800567e:	9307      	str	r3, [sp, #28]
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005686:	6918      	ldr	r0, [r3, #16]
 8005688:	f000 fb17 	bl	8005cba <__hi0bits>
 800568c:	f1c0 0020 	rsb	r0, r0, #32
 8005690:	4440      	add	r0, r8
 8005692:	f010 001f 	ands.w	r0, r0, #31
 8005696:	d047      	beq.n	8005728 <_dtoa_r+0x8c0>
 8005698:	f1c0 0320 	rsb	r3, r0, #32
 800569c:	2b04      	cmp	r3, #4
 800569e:	dd3b      	ble.n	8005718 <_dtoa_r+0x8b0>
 80056a0:	9b05      	ldr	r3, [sp, #20]
 80056a2:	f1c0 001c 	rsb	r0, r0, #28
 80056a6:	4403      	add	r3, r0
 80056a8:	9305      	str	r3, [sp, #20]
 80056aa:	4405      	add	r5, r0
 80056ac:	4480      	add	r8, r0
 80056ae:	9b05      	ldr	r3, [sp, #20]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	dd05      	ble.n	80056c0 <_dtoa_r+0x858>
 80056b4:	461a      	mov	r2, r3
 80056b6:	9904      	ldr	r1, [sp, #16]
 80056b8:	4620      	mov	r0, r4
 80056ba:	f000 fc39 	bl	8005f30 <__lshift>
 80056be:	9004      	str	r0, [sp, #16]
 80056c0:	f1b8 0f00 	cmp.w	r8, #0
 80056c4:	dd05      	ble.n	80056d2 <_dtoa_r+0x86a>
 80056c6:	4639      	mov	r1, r7
 80056c8:	4642      	mov	r2, r8
 80056ca:	4620      	mov	r0, r4
 80056cc:	f000 fc30 	bl	8005f30 <__lshift>
 80056d0:	4607      	mov	r7, r0
 80056d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056d4:	b353      	cbz	r3, 800572c <_dtoa_r+0x8c4>
 80056d6:	4639      	mov	r1, r7
 80056d8:	9804      	ldr	r0, [sp, #16]
 80056da:	f000 fc7d 	bl	8005fd8 <__mcmp>
 80056de:	2800      	cmp	r0, #0
 80056e0:	da24      	bge.n	800572c <_dtoa_r+0x8c4>
 80056e2:	2300      	movs	r3, #0
 80056e4:	220a      	movs	r2, #10
 80056e6:	9904      	ldr	r1, [sp, #16]
 80056e8:	4620      	mov	r0, r4
 80056ea:	f000 faab 	bl	8005c44 <__multadd>
 80056ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056f0:	9004      	str	r0, [sp, #16]
 80056f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f000 814d 	beq.w	8005996 <_dtoa_r+0xb2e>
 80056fc:	2300      	movs	r3, #0
 80056fe:	4631      	mov	r1, r6
 8005700:	220a      	movs	r2, #10
 8005702:	4620      	mov	r0, r4
 8005704:	f000 fa9e 	bl	8005c44 <__multadd>
 8005708:	9b02      	ldr	r3, [sp, #8]
 800570a:	2b00      	cmp	r3, #0
 800570c:	4606      	mov	r6, r0
 800570e:	dc4f      	bgt.n	80057b0 <_dtoa_r+0x948>
 8005710:	9b06      	ldr	r3, [sp, #24]
 8005712:	2b02      	cmp	r3, #2
 8005714:	dd4c      	ble.n	80057b0 <_dtoa_r+0x948>
 8005716:	e011      	b.n	800573c <_dtoa_r+0x8d4>
 8005718:	d0c9      	beq.n	80056ae <_dtoa_r+0x846>
 800571a:	9a05      	ldr	r2, [sp, #20]
 800571c:	331c      	adds	r3, #28
 800571e:	441a      	add	r2, r3
 8005720:	9205      	str	r2, [sp, #20]
 8005722:	441d      	add	r5, r3
 8005724:	4498      	add	r8, r3
 8005726:	e7c2      	b.n	80056ae <_dtoa_r+0x846>
 8005728:	4603      	mov	r3, r0
 800572a:	e7f6      	b.n	800571a <_dtoa_r+0x8b2>
 800572c:	f1b9 0f00 	cmp.w	r9, #0
 8005730:	dc38      	bgt.n	80057a4 <_dtoa_r+0x93c>
 8005732:	9b06      	ldr	r3, [sp, #24]
 8005734:	2b02      	cmp	r3, #2
 8005736:	dd35      	ble.n	80057a4 <_dtoa_r+0x93c>
 8005738:	f8cd 9008 	str.w	r9, [sp, #8]
 800573c:	9b02      	ldr	r3, [sp, #8]
 800573e:	b963      	cbnz	r3, 800575a <_dtoa_r+0x8f2>
 8005740:	4639      	mov	r1, r7
 8005742:	2205      	movs	r2, #5
 8005744:	4620      	mov	r0, r4
 8005746:	f000 fa7d 	bl	8005c44 <__multadd>
 800574a:	4601      	mov	r1, r0
 800574c:	4607      	mov	r7, r0
 800574e:	9804      	ldr	r0, [sp, #16]
 8005750:	f000 fc42 	bl	8005fd8 <__mcmp>
 8005754:	2800      	cmp	r0, #0
 8005756:	f73f adcc 	bgt.w	80052f2 <_dtoa_r+0x48a>
 800575a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800575c:	465d      	mov	r5, fp
 800575e:	ea6f 0a03 	mvn.w	sl, r3
 8005762:	f04f 0900 	mov.w	r9, #0
 8005766:	4639      	mov	r1, r7
 8005768:	4620      	mov	r0, r4
 800576a:	f000 fa54 	bl	8005c16 <_Bfree>
 800576e:	2e00      	cmp	r6, #0
 8005770:	f43f aeb7 	beq.w	80054e2 <_dtoa_r+0x67a>
 8005774:	f1b9 0f00 	cmp.w	r9, #0
 8005778:	d005      	beq.n	8005786 <_dtoa_r+0x91e>
 800577a:	45b1      	cmp	r9, r6
 800577c:	d003      	beq.n	8005786 <_dtoa_r+0x91e>
 800577e:	4649      	mov	r1, r9
 8005780:	4620      	mov	r0, r4
 8005782:	f000 fa48 	bl	8005c16 <_Bfree>
 8005786:	4631      	mov	r1, r6
 8005788:	4620      	mov	r0, r4
 800578a:	f000 fa44 	bl	8005c16 <_Bfree>
 800578e:	e6a8      	b.n	80054e2 <_dtoa_r+0x67a>
 8005790:	2700      	movs	r7, #0
 8005792:	463e      	mov	r6, r7
 8005794:	e7e1      	b.n	800575a <_dtoa_r+0x8f2>
 8005796:	f8dd a020 	ldr.w	sl, [sp, #32]
 800579a:	463e      	mov	r6, r7
 800579c:	e5a9      	b.n	80052f2 <_dtoa_r+0x48a>
 800579e:	bf00      	nop
 80057a0:	40240000 	.word	0x40240000
 80057a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057a6:	f8cd 9008 	str.w	r9, [sp, #8]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f000 80fa 	beq.w	80059a4 <_dtoa_r+0xb3c>
 80057b0:	2d00      	cmp	r5, #0
 80057b2:	dd05      	ble.n	80057c0 <_dtoa_r+0x958>
 80057b4:	4631      	mov	r1, r6
 80057b6:	462a      	mov	r2, r5
 80057b8:	4620      	mov	r0, r4
 80057ba:	f000 fbb9 	bl	8005f30 <__lshift>
 80057be:	4606      	mov	r6, r0
 80057c0:	9b07      	ldr	r3, [sp, #28]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d04c      	beq.n	8005860 <_dtoa_r+0x9f8>
 80057c6:	6871      	ldr	r1, [r6, #4]
 80057c8:	4620      	mov	r0, r4
 80057ca:	f000 f9f0 	bl	8005bae <_Balloc>
 80057ce:	6932      	ldr	r2, [r6, #16]
 80057d0:	3202      	adds	r2, #2
 80057d2:	4605      	mov	r5, r0
 80057d4:	0092      	lsls	r2, r2, #2
 80057d6:	f106 010c 	add.w	r1, r6, #12
 80057da:	300c      	adds	r0, #12
 80057dc:	f000 f9dc 	bl	8005b98 <memcpy>
 80057e0:	2201      	movs	r2, #1
 80057e2:	4629      	mov	r1, r5
 80057e4:	4620      	mov	r0, r4
 80057e6:	f000 fba3 	bl	8005f30 <__lshift>
 80057ea:	9b00      	ldr	r3, [sp, #0]
 80057ec:	f8cd b014 	str.w	fp, [sp, #20]
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	46b1      	mov	r9, r6
 80057f6:	9307      	str	r3, [sp, #28]
 80057f8:	4606      	mov	r6, r0
 80057fa:	4639      	mov	r1, r7
 80057fc:	9804      	ldr	r0, [sp, #16]
 80057fe:	f7ff faa7 	bl	8004d50 <quorem>
 8005802:	4649      	mov	r1, r9
 8005804:	4605      	mov	r5, r0
 8005806:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800580a:	9804      	ldr	r0, [sp, #16]
 800580c:	f000 fbe4 	bl	8005fd8 <__mcmp>
 8005810:	4632      	mov	r2, r6
 8005812:	9000      	str	r0, [sp, #0]
 8005814:	4639      	mov	r1, r7
 8005816:	4620      	mov	r0, r4
 8005818:	f000 fbf8 	bl	800600c <__mdiff>
 800581c:	68c3      	ldr	r3, [r0, #12]
 800581e:	4602      	mov	r2, r0
 8005820:	bb03      	cbnz	r3, 8005864 <_dtoa_r+0x9fc>
 8005822:	4601      	mov	r1, r0
 8005824:	9008      	str	r0, [sp, #32]
 8005826:	9804      	ldr	r0, [sp, #16]
 8005828:	f000 fbd6 	bl	8005fd8 <__mcmp>
 800582c:	9a08      	ldr	r2, [sp, #32]
 800582e:	4603      	mov	r3, r0
 8005830:	4611      	mov	r1, r2
 8005832:	4620      	mov	r0, r4
 8005834:	9308      	str	r3, [sp, #32]
 8005836:	f000 f9ee 	bl	8005c16 <_Bfree>
 800583a:	9b08      	ldr	r3, [sp, #32]
 800583c:	b9a3      	cbnz	r3, 8005868 <_dtoa_r+0xa00>
 800583e:	9a06      	ldr	r2, [sp, #24]
 8005840:	b992      	cbnz	r2, 8005868 <_dtoa_r+0xa00>
 8005842:	9a07      	ldr	r2, [sp, #28]
 8005844:	b982      	cbnz	r2, 8005868 <_dtoa_r+0xa00>
 8005846:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800584a:	d029      	beq.n	80058a0 <_dtoa_r+0xa38>
 800584c:	9b00      	ldr	r3, [sp, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	dd01      	ble.n	8005856 <_dtoa_r+0x9ee>
 8005852:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005856:	9b05      	ldr	r3, [sp, #20]
 8005858:	1c5d      	adds	r5, r3, #1
 800585a:	f883 8000 	strb.w	r8, [r3]
 800585e:	e782      	b.n	8005766 <_dtoa_r+0x8fe>
 8005860:	4630      	mov	r0, r6
 8005862:	e7c2      	b.n	80057ea <_dtoa_r+0x982>
 8005864:	2301      	movs	r3, #1
 8005866:	e7e3      	b.n	8005830 <_dtoa_r+0x9c8>
 8005868:	9a00      	ldr	r2, [sp, #0]
 800586a:	2a00      	cmp	r2, #0
 800586c:	db04      	blt.n	8005878 <_dtoa_r+0xa10>
 800586e:	d125      	bne.n	80058bc <_dtoa_r+0xa54>
 8005870:	9a06      	ldr	r2, [sp, #24]
 8005872:	bb1a      	cbnz	r2, 80058bc <_dtoa_r+0xa54>
 8005874:	9a07      	ldr	r2, [sp, #28]
 8005876:	bb0a      	cbnz	r2, 80058bc <_dtoa_r+0xa54>
 8005878:	2b00      	cmp	r3, #0
 800587a:	ddec      	ble.n	8005856 <_dtoa_r+0x9ee>
 800587c:	2201      	movs	r2, #1
 800587e:	9904      	ldr	r1, [sp, #16]
 8005880:	4620      	mov	r0, r4
 8005882:	f000 fb55 	bl	8005f30 <__lshift>
 8005886:	4639      	mov	r1, r7
 8005888:	9004      	str	r0, [sp, #16]
 800588a:	f000 fba5 	bl	8005fd8 <__mcmp>
 800588e:	2800      	cmp	r0, #0
 8005890:	dc03      	bgt.n	800589a <_dtoa_r+0xa32>
 8005892:	d1e0      	bne.n	8005856 <_dtoa_r+0x9ee>
 8005894:	f018 0f01 	tst.w	r8, #1
 8005898:	d0dd      	beq.n	8005856 <_dtoa_r+0x9ee>
 800589a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800589e:	d1d8      	bne.n	8005852 <_dtoa_r+0x9ea>
 80058a0:	9b05      	ldr	r3, [sp, #20]
 80058a2:	9a05      	ldr	r2, [sp, #20]
 80058a4:	1c5d      	adds	r5, r3, #1
 80058a6:	2339      	movs	r3, #57	; 0x39
 80058a8:	7013      	strb	r3, [r2, #0]
 80058aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80058ae:	2b39      	cmp	r3, #57	; 0x39
 80058b0:	f105 32ff 	add.w	r2, r5, #4294967295
 80058b4:	d04f      	beq.n	8005956 <_dtoa_r+0xaee>
 80058b6:	3301      	adds	r3, #1
 80058b8:	7013      	strb	r3, [r2, #0]
 80058ba:	e754      	b.n	8005766 <_dtoa_r+0x8fe>
 80058bc:	9a05      	ldr	r2, [sp, #20]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	f102 0501 	add.w	r5, r2, #1
 80058c4:	dd06      	ble.n	80058d4 <_dtoa_r+0xa6c>
 80058c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80058ca:	d0e9      	beq.n	80058a0 <_dtoa_r+0xa38>
 80058cc:	f108 0801 	add.w	r8, r8, #1
 80058d0:	9b05      	ldr	r3, [sp, #20]
 80058d2:	e7c2      	b.n	800585a <_dtoa_r+0x9f2>
 80058d4:	9a02      	ldr	r2, [sp, #8]
 80058d6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80058da:	eba5 030b 	sub.w	r3, r5, fp
 80058de:	4293      	cmp	r3, r2
 80058e0:	d021      	beq.n	8005926 <_dtoa_r+0xabe>
 80058e2:	2300      	movs	r3, #0
 80058e4:	220a      	movs	r2, #10
 80058e6:	9904      	ldr	r1, [sp, #16]
 80058e8:	4620      	mov	r0, r4
 80058ea:	f000 f9ab 	bl	8005c44 <__multadd>
 80058ee:	45b1      	cmp	r9, r6
 80058f0:	9004      	str	r0, [sp, #16]
 80058f2:	f04f 0300 	mov.w	r3, #0
 80058f6:	f04f 020a 	mov.w	r2, #10
 80058fa:	4649      	mov	r1, r9
 80058fc:	4620      	mov	r0, r4
 80058fe:	d105      	bne.n	800590c <_dtoa_r+0xaa4>
 8005900:	f000 f9a0 	bl	8005c44 <__multadd>
 8005904:	4681      	mov	r9, r0
 8005906:	4606      	mov	r6, r0
 8005908:	9505      	str	r5, [sp, #20]
 800590a:	e776      	b.n	80057fa <_dtoa_r+0x992>
 800590c:	f000 f99a 	bl	8005c44 <__multadd>
 8005910:	4631      	mov	r1, r6
 8005912:	4681      	mov	r9, r0
 8005914:	2300      	movs	r3, #0
 8005916:	220a      	movs	r2, #10
 8005918:	4620      	mov	r0, r4
 800591a:	f000 f993 	bl	8005c44 <__multadd>
 800591e:	4606      	mov	r6, r0
 8005920:	e7f2      	b.n	8005908 <_dtoa_r+0xaa0>
 8005922:	f04f 0900 	mov.w	r9, #0
 8005926:	2201      	movs	r2, #1
 8005928:	9904      	ldr	r1, [sp, #16]
 800592a:	4620      	mov	r0, r4
 800592c:	f000 fb00 	bl	8005f30 <__lshift>
 8005930:	4639      	mov	r1, r7
 8005932:	9004      	str	r0, [sp, #16]
 8005934:	f000 fb50 	bl	8005fd8 <__mcmp>
 8005938:	2800      	cmp	r0, #0
 800593a:	dcb6      	bgt.n	80058aa <_dtoa_r+0xa42>
 800593c:	d102      	bne.n	8005944 <_dtoa_r+0xadc>
 800593e:	f018 0f01 	tst.w	r8, #1
 8005942:	d1b2      	bne.n	80058aa <_dtoa_r+0xa42>
 8005944:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005948:	2b30      	cmp	r3, #48	; 0x30
 800594a:	f105 32ff 	add.w	r2, r5, #4294967295
 800594e:	f47f af0a 	bne.w	8005766 <_dtoa_r+0x8fe>
 8005952:	4615      	mov	r5, r2
 8005954:	e7f6      	b.n	8005944 <_dtoa_r+0xadc>
 8005956:	4593      	cmp	fp, r2
 8005958:	d105      	bne.n	8005966 <_dtoa_r+0xafe>
 800595a:	2331      	movs	r3, #49	; 0x31
 800595c:	f10a 0a01 	add.w	sl, sl, #1
 8005960:	f88b 3000 	strb.w	r3, [fp]
 8005964:	e6ff      	b.n	8005766 <_dtoa_r+0x8fe>
 8005966:	4615      	mov	r5, r2
 8005968:	e79f      	b.n	80058aa <_dtoa_r+0xa42>
 800596a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80059d0 <_dtoa_r+0xb68>
 800596e:	e007      	b.n	8005980 <_dtoa_r+0xb18>
 8005970:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005972:	f8df b060 	ldr.w	fp, [pc, #96]	; 80059d4 <_dtoa_r+0xb6c>
 8005976:	b11b      	cbz	r3, 8005980 <_dtoa_r+0xb18>
 8005978:	f10b 0308 	add.w	r3, fp, #8
 800597c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800597e:	6013      	str	r3, [r2, #0]
 8005980:	4658      	mov	r0, fp
 8005982:	b017      	add	sp, #92	; 0x5c
 8005984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005988:	9b06      	ldr	r3, [sp, #24]
 800598a:	2b01      	cmp	r3, #1
 800598c:	f77f ae35 	ble.w	80055fa <_dtoa_r+0x792>
 8005990:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005992:	9307      	str	r3, [sp, #28]
 8005994:	e649      	b.n	800562a <_dtoa_r+0x7c2>
 8005996:	9b02      	ldr	r3, [sp, #8]
 8005998:	2b00      	cmp	r3, #0
 800599a:	dc03      	bgt.n	80059a4 <_dtoa_r+0xb3c>
 800599c:	9b06      	ldr	r3, [sp, #24]
 800599e:	2b02      	cmp	r3, #2
 80059a0:	f73f aecc 	bgt.w	800573c <_dtoa_r+0x8d4>
 80059a4:	465d      	mov	r5, fp
 80059a6:	4639      	mov	r1, r7
 80059a8:	9804      	ldr	r0, [sp, #16]
 80059aa:	f7ff f9d1 	bl	8004d50 <quorem>
 80059ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80059b2:	f805 8b01 	strb.w	r8, [r5], #1
 80059b6:	9a02      	ldr	r2, [sp, #8]
 80059b8:	eba5 030b 	sub.w	r3, r5, fp
 80059bc:	429a      	cmp	r2, r3
 80059be:	ddb0      	ble.n	8005922 <_dtoa_r+0xaba>
 80059c0:	2300      	movs	r3, #0
 80059c2:	220a      	movs	r2, #10
 80059c4:	9904      	ldr	r1, [sp, #16]
 80059c6:	4620      	mov	r0, r4
 80059c8:	f000 f93c 	bl	8005c44 <__multadd>
 80059cc:	9004      	str	r0, [sp, #16]
 80059ce:	e7ea      	b.n	80059a6 <_dtoa_r+0xb3e>
 80059d0:	08007d60 	.word	0x08007d60
 80059d4:	08007d84 	.word	0x08007d84

080059d8 <std>:
 80059d8:	2300      	movs	r3, #0
 80059da:	b510      	push	{r4, lr}
 80059dc:	4604      	mov	r4, r0
 80059de:	e9c0 3300 	strd	r3, r3, [r0]
 80059e2:	6083      	str	r3, [r0, #8]
 80059e4:	8181      	strh	r1, [r0, #12]
 80059e6:	6643      	str	r3, [r0, #100]	; 0x64
 80059e8:	81c2      	strh	r2, [r0, #14]
 80059ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059ee:	6183      	str	r3, [r0, #24]
 80059f0:	4619      	mov	r1, r3
 80059f2:	2208      	movs	r2, #8
 80059f4:	305c      	adds	r0, #92	; 0x5c
 80059f6:	f7fe fd2f 	bl	8004458 <memset>
 80059fa:	4b05      	ldr	r3, [pc, #20]	; (8005a10 <std+0x38>)
 80059fc:	6263      	str	r3, [r4, #36]	; 0x24
 80059fe:	4b05      	ldr	r3, [pc, #20]	; (8005a14 <std+0x3c>)
 8005a00:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a02:	4b05      	ldr	r3, [pc, #20]	; (8005a18 <std+0x40>)
 8005a04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a06:	4b05      	ldr	r3, [pc, #20]	; (8005a1c <std+0x44>)
 8005a08:	6224      	str	r4, [r4, #32]
 8005a0a:	6323      	str	r3, [r4, #48]	; 0x30
 8005a0c:	bd10      	pop	{r4, pc}
 8005a0e:	bf00      	nop
 8005a10:	08006571 	.word	0x08006571
 8005a14:	08006593 	.word	0x08006593
 8005a18:	080065cb 	.word	0x080065cb
 8005a1c:	080065ef 	.word	0x080065ef

08005a20 <_cleanup_r>:
 8005a20:	4901      	ldr	r1, [pc, #4]	; (8005a28 <_cleanup_r+0x8>)
 8005a22:	f000 b885 	b.w	8005b30 <_fwalk_reent>
 8005a26:	bf00      	nop
 8005a28:	080068c9 	.word	0x080068c9

08005a2c <__sfmoreglue>:
 8005a2c:	b570      	push	{r4, r5, r6, lr}
 8005a2e:	1e4a      	subs	r2, r1, #1
 8005a30:	2568      	movs	r5, #104	; 0x68
 8005a32:	4355      	muls	r5, r2
 8005a34:	460e      	mov	r6, r1
 8005a36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005a3a:	f000 fbef 	bl	800621c <_malloc_r>
 8005a3e:	4604      	mov	r4, r0
 8005a40:	b140      	cbz	r0, 8005a54 <__sfmoreglue+0x28>
 8005a42:	2100      	movs	r1, #0
 8005a44:	e9c0 1600 	strd	r1, r6, [r0]
 8005a48:	300c      	adds	r0, #12
 8005a4a:	60a0      	str	r0, [r4, #8]
 8005a4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005a50:	f7fe fd02 	bl	8004458 <memset>
 8005a54:	4620      	mov	r0, r4
 8005a56:	bd70      	pop	{r4, r5, r6, pc}

08005a58 <__sinit>:
 8005a58:	6983      	ldr	r3, [r0, #24]
 8005a5a:	b510      	push	{r4, lr}
 8005a5c:	4604      	mov	r4, r0
 8005a5e:	bb33      	cbnz	r3, 8005aae <__sinit+0x56>
 8005a60:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005a64:	6503      	str	r3, [r0, #80]	; 0x50
 8005a66:	4b12      	ldr	r3, [pc, #72]	; (8005ab0 <__sinit+0x58>)
 8005a68:	4a12      	ldr	r2, [pc, #72]	; (8005ab4 <__sinit+0x5c>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6282      	str	r2, [r0, #40]	; 0x28
 8005a6e:	4298      	cmp	r0, r3
 8005a70:	bf04      	itt	eq
 8005a72:	2301      	moveq	r3, #1
 8005a74:	6183      	streq	r3, [r0, #24]
 8005a76:	f000 f81f 	bl	8005ab8 <__sfp>
 8005a7a:	6060      	str	r0, [r4, #4]
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	f000 f81b 	bl	8005ab8 <__sfp>
 8005a82:	60a0      	str	r0, [r4, #8]
 8005a84:	4620      	mov	r0, r4
 8005a86:	f000 f817 	bl	8005ab8 <__sfp>
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	60e0      	str	r0, [r4, #12]
 8005a8e:	2104      	movs	r1, #4
 8005a90:	6860      	ldr	r0, [r4, #4]
 8005a92:	f7ff ffa1 	bl	80059d8 <std>
 8005a96:	2201      	movs	r2, #1
 8005a98:	2109      	movs	r1, #9
 8005a9a:	68a0      	ldr	r0, [r4, #8]
 8005a9c:	f7ff ff9c 	bl	80059d8 <std>
 8005aa0:	2202      	movs	r2, #2
 8005aa2:	2112      	movs	r1, #18
 8005aa4:	68e0      	ldr	r0, [r4, #12]
 8005aa6:	f7ff ff97 	bl	80059d8 <std>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	61a3      	str	r3, [r4, #24]
 8005aae:	bd10      	pop	{r4, pc}
 8005ab0:	08007d4c 	.word	0x08007d4c
 8005ab4:	08005a21 	.word	0x08005a21

08005ab8 <__sfp>:
 8005ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aba:	4b1b      	ldr	r3, [pc, #108]	; (8005b28 <__sfp+0x70>)
 8005abc:	681e      	ldr	r6, [r3, #0]
 8005abe:	69b3      	ldr	r3, [r6, #24]
 8005ac0:	4607      	mov	r7, r0
 8005ac2:	b913      	cbnz	r3, 8005aca <__sfp+0x12>
 8005ac4:	4630      	mov	r0, r6
 8005ac6:	f7ff ffc7 	bl	8005a58 <__sinit>
 8005aca:	3648      	adds	r6, #72	; 0x48
 8005acc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	d503      	bpl.n	8005adc <__sfp+0x24>
 8005ad4:	6833      	ldr	r3, [r6, #0]
 8005ad6:	b133      	cbz	r3, 8005ae6 <__sfp+0x2e>
 8005ad8:	6836      	ldr	r6, [r6, #0]
 8005ada:	e7f7      	b.n	8005acc <__sfp+0x14>
 8005adc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ae0:	b16d      	cbz	r5, 8005afe <__sfp+0x46>
 8005ae2:	3468      	adds	r4, #104	; 0x68
 8005ae4:	e7f4      	b.n	8005ad0 <__sfp+0x18>
 8005ae6:	2104      	movs	r1, #4
 8005ae8:	4638      	mov	r0, r7
 8005aea:	f7ff ff9f 	bl	8005a2c <__sfmoreglue>
 8005aee:	6030      	str	r0, [r6, #0]
 8005af0:	2800      	cmp	r0, #0
 8005af2:	d1f1      	bne.n	8005ad8 <__sfp+0x20>
 8005af4:	230c      	movs	r3, #12
 8005af6:	603b      	str	r3, [r7, #0]
 8005af8:	4604      	mov	r4, r0
 8005afa:	4620      	mov	r0, r4
 8005afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005afe:	4b0b      	ldr	r3, [pc, #44]	; (8005b2c <__sfp+0x74>)
 8005b00:	6665      	str	r5, [r4, #100]	; 0x64
 8005b02:	e9c4 5500 	strd	r5, r5, [r4]
 8005b06:	60a5      	str	r5, [r4, #8]
 8005b08:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005b0c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005b10:	2208      	movs	r2, #8
 8005b12:	4629      	mov	r1, r5
 8005b14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005b18:	f7fe fc9e 	bl	8004458 <memset>
 8005b1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005b20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005b24:	e7e9      	b.n	8005afa <__sfp+0x42>
 8005b26:	bf00      	nop
 8005b28:	08007d4c 	.word	0x08007d4c
 8005b2c:	ffff0001 	.word	0xffff0001

08005b30 <_fwalk_reent>:
 8005b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b34:	4680      	mov	r8, r0
 8005b36:	4689      	mov	r9, r1
 8005b38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b3c:	2600      	movs	r6, #0
 8005b3e:	b914      	cbnz	r4, 8005b46 <_fwalk_reent+0x16>
 8005b40:	4630      	mov	r0, r6
 8005b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b46:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005b4a:	3f01      	subs	r7, #1
 8005b4c:	d501      	bpl.n	8005b52 <_fwalk_reent+0x22>
 8005b4e:	6824      	ldr	r4, [r4, #0]
 8005b50:	e7f5      	b.n	8005b3e <_fwalk_reent+0xe>
 8005b52:	89ab      	ldrh	r3, [r5, #12]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d907      	bls.n	8005b68 <_fwalk_reent+0x38>
 8005b58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	d003      	beq.n	8005b68 <_fwalk_reent+0x38>
 8005b60:	4629      	mov	r1, r5
 8005b62:	4640      	mov	r0, r8
 8005b64:	47c8      	blx	r9
 8005b66:	4306      	orrs	r6, r0
 8005b68:	3568      	adds	r5, #104	; 0x68
 8005b6a:	e7ee      	b.n	8005b4a <_fwalk_reent+0x1a>

08005b6c <_localeconv_r>:
 8005b6c:	4b04      	ldr	r3, [pc, #16]	; (8005b80 <_localeconv_r+0x14>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6a18      	ldr	r0, [r3, #32]
 8005b72:	4b04      	ldr	r3, [pc, #16]	; (8005b84 <_localeconv_r+0x18>)
 8005b74:	2800      	cmp	r0, #0
 8005b76:	bf08      	it	eq
 8005b78:	4618      	moveq	r0, r3
 8005b7a:	30f0      	adds	r0, #240	; 0xf0
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	200001a0 	.word	0x200001a0
 8005b84:	20000204 	.word	0x20000204

08005b88 <malloc>:
 8005b88:	4b02      	ldr	r3, [pc, #8]	; (8005b94 <malloc+0xc>)
 8005b8a:	4601      	mov	r1, r0
 8005b8c:	6818      	ldr	r0, [r3, #0]
 8005b8e:	f000 bb45 	b.w	800621c <_malloc_r>
 8005b92:	bf00      	nop
 8005b94:	200001a0 	.word	0x200001a0

08005b98 <memcpy>:
 8005b98:	b510      	push	{r4, lr}
 8005b9a:	1e43      	subs	r3, r0, #1
 8005b9c:	440a      	add	r2, r1
 8005b9e:	4291      	cmp	r1, r2
 8005ba0:	d100      	bne.n	8005ba4 <memcpy+0xc>
 8005ba2:	bd10      	pop	{r4, pc}
 8005ba4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ba8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bac:	e7f7      	b.n	8005b9e <memcpy+0x6>

08005bae <_Balloc>:
 8005bae:	b570      	push	{r4, r5, r6, lr}
 8005bb0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005bb2:	4604      	mov	r4, r0
 8005bb4:	460e      	mov	r6, r1
 8005bb6:	b93d      	cbnz	r5, 8005bc8 <_Balloc+0x1a>
 8005bb8:	2010      	movs	r0, #16
 8005bba:	f7ff ffe5 	bl	8005b88 <malloc>
 8005bbe:	6260      	str	r0, [r4, #36]	; 0x24
 8005bc0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005bc4:	6005      	str	r5, [r0, #0]
 8005bc6:	60c5      	str	r5, [r0, #12]
 8005bc8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005bca:	68eb      	ldr	r3, [r5, #12]
 8005bcc:	b183      	cbz	r3, 8005bf0 <_Balloc+0x42>
 8005bce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005bd6:	b9b8      	cbnz	r0, 8005c08 <_Balloc+0x5a>
 8005bd8:	2101      	movs	r1, #1
 8005bda:	fa01 f506 	lsl.w	r5, r1, r6
 8005bde:	1d6a      	adds	r2, r5, #5
 8005be0:	0092      	lsls	r2, r2, #2
 8005be2:	4620      	mov	r0, r4
 8005be4:	f000 fabe 	bl	8006164 <_calloc_r>
 8005be8:	b160      	cbz	r0, 8005c04 <_Balloc+0x56>
 8005bea:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005bee:	e00e      	b.n	8005c0e <_Balloc+0x60>
 8005bf0:	2221      	movs	r2, #33	; 0x21
 8005bf2:	2104      	movs	r1, #4
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	f000 fab5 	bl	8006164 <_calloc_r>
 8005bfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bfc:	60e8      	str	r0, [r5, #12]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1e4      	bne.n	8005bce <_Balloc+0x20>
 8005c04:	2000      	movs	r0, #0
 8005c06:	bd70      	pop	{r4, r5, r6, pc}
 8005c08:	6802      	ldr	r2, [r0, #0]
 8005c0a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005c0e:	2300      	movs	r3, #0
 8005c10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005c14:	e7f7      	b.n	8005c06 <_Balloc+0x58>

08005c16 <_Bfree>:
 8005c16:	b570      	push	{r4, r5, r6, lr}
 8005c18:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005c1a:	4606      	mov	r6, r0
 8005c1c:	460d      	mov	r5, r1
 8005c1e:	b93c      	cbnz	r4, 8005c30 <_Bfree+0x1a>
 8005c20:	2010      	movs	r0, #16
 8005c22:	f7ff ffb1 	bl	8005b88 <malloc>
 8005c26:	6270      	str	r0, [r6, #36]	; 0x24
 8005c28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c2c:	6004      	str	r4, [r0, #0]
 8005c2e:	60c4      	str	r4, [r0, #12]
 8005c30:	b13d      	cbz	r5, 8005c42 <_Bfree+0x2c>
 8005c32:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005c34:	686a      	ldr	r2, [r5, #4]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c3c:	6029      	str	r1, [r5, #0]
 8005c3e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005c42:	bd70      	pop	{r4, r5, r6, pc}

08005c44 <__multadd>:
 8005c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c48:	690d      	ldr	r5, [r1, #16]
 8005c4a:	461f      	mov	r7, r3
 8005c4c:	4606      	mov	r6, r0
 8005c4e:	460c      	mov	r4, r1
 8005c50:	f101 0c14 	add.w	ip, r1, #20
 8005c54:	2300      	movs	r3, #0
 8005c56:	f8dc 0000 	ldr.w	r0, [ip]
 8005c5a:	b281      	uxth	r1, r0
 8005c5c:	fb02 7101 	mla	r1, r2, r1, r7
 8005c60:	0c0f      	lsrs	r7, r1, #16
 8005c62:	0c00      	lsrs	r0, r0, #16
 8005c64:	fb02 7000 	mla	r0, r2, r0, r7
 8005c68:	b289      	uxth	r1, r1
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005c70:	429d      	cmp	r5, r3
 8005c72:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005c76:	f84c 1b04 	str.w	r1, [ip], #4
 8005c7a:	dcec      	bgt.n	8005c56 <__multadd+0x12>
 8005c7c:	b1d7      	cbz	r7, 8005cb4 <__multadd+0x70>
 8005c7e:	68a3      	ldr	r3, [r4, #8]
 8005c80:	42ab      	cmp	r3, r5
 8005c82:	dc12      	bgt.n	8005caa <__multadd+0x66>
 8005c84:	6861      	ldr	r1, [r4, #4]
 8005c86:	4630      	mov	r0, r6
 8005c88:	3101      	adds	r1, #1
 8005c8a:	f7ff ff90 	bl	8005bae <_Balloc>
 8005c8e:	6922      	ldr	r2, [r4, #16]
 8005c90:	3202      	adds	r2, #2
 8005c92:	f104 010c 	add.w	r1, r4, #12
 8005c96:	4680      	mov	r8, r0
 8005c98:	0092      	lsls	r2, r2, #2
 8005c9a:	300c      	adds	r0, #12
 8005c9c:	f7ff ff7c 	bl	8005b98 <memcpy>
 8005ca0:	4621      	mov	r1, r4
 8005ca2:	4630      	mov	r0, r6
 8005ca4:	f7ff ffb7 	bl	8005c16 <_Bfree>
 8005ca8:	4644      	mov	r4, r8
 8005caa:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005cae:	3501      	adds	r5, #1
 8005cb0:	615f      	str	r7, [r3, #20]
 8005cb2:	6125      	str	r5, [r4, #16]
 8005cb4:	4620      	mov	r0, r4
 8005cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005cba <__hi0bits>:
 8005cba:	0c02      	lsrs	r2, r0, #16
 8005cbc:	0412      	lsls	r2, r2, #16
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	b9b2      	cbnz	r2, 8005cf0 <__hi0bits+0x36>
 8005cc2:	0403      	lsls	r3, r0, #16
 8005cc4:	2010      	movs	r0, #16
 8005cc6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005cca:	bf04      	itt	eq
 8005ccc:	021b      	lsleq	r3, r3, #8
 8005cce:	3008      	addeq	r0, #8
 8005cd0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005cd4:	bf04      	itt	eq
 8005cd6:	011b      	lsleq	r3, r3, #4
 8005cd8:	3004      	addeq	r0, #4
 8005cda:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005cde:	bf04      	itt	eq
 8005ce0:	009b      	lsleq	r3, r3, #2
 8005ce2:	3002      	addeq	r0, #2
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	db06      	blt.n	8005cf6 <__hi0bits+0x3c>
 8005ce8:	005b      	lsls	r3, r3, #1
 8005cea:	d503      	bpl.n	8005cf4 <__hi0bits+0x3a>
 8005cec:	3001      	adds	r0, #1
 8005cee:	4770      	bx	lr
 8005cf0:	2000      	movs	r0, #0
 8005cf2:	e7e8      	b.n	8005cc6 <__hi0bits+0xc>
 8005cf4:	2020      	movs	r0, #32
 8005cf6:	4770      	bx	lr

08005cf8 <__lo0bits>:
 8005cf8:	6803      	ldr	r3, [r0, #0]
 8005cfa:	f013 0207 	ands.w	r2, r3, #7
 8005cfe:	4601      	mov	r1, r0
 8005d00:	d00b      	beq.n	8005d1a <__lo0bits+0x22>
 8005d02:	07da      	lsls	r2, r3, #31
 8005d04:	d423      	bmi.n	8005d4e <__lo0bits+0x56>
 8005d06:	0798      	lsls	r0, r3, #30
 8005d08:	bf49      	itett	mi
 8005d0a:	085b      	lsrmi	r3, r3, #1
 8005d0c:	089b      	lsrpl	r3, r3, #2
 8005d0e:	2001      	movmi	r0, #1
 8005d10:	600b      	strmi	r3, [r1, #0]
 8005d12:	bf5c      	itt	pl
 8005d14:	600b      	strpl	r3, [r1, #0]
 8005d16:	2002      	movpl	r0, #2
 8005d18:	4770      	bx	lr
 8005d1a:	b298      	uxth	r0, r3
 8005d1c:	b9a8      	cbnz	r0, 8005d4a <__lo0bits+0x52>
 8005d1e:	0c1b      	lsrs	r3, r3, #16
 8005d20:	2010      	movs	r0, #16
 8005d22:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005d26:	bf04      	itt	eq
 8005d28:	0a1b      	lsreq	r3, r3, #8
 8005d2a:	3008      	addeq	r0, #8
 8005d2c:	071a      	lsls	r2, r3, #28
 8005d2e:	bf04      	itt	eq
 8005d30:	091b      	lsreq	r3, r3, #4
 8005d32:	3004      	addeq	r0, #4
 8005d34:	079a      	lsls	r2, r3, #30
 8005d36:	bf04      	itt	eq
 8005d38:	089b      	lsreq	r3, r3, #2
 8005d3a:	3002      	addeq	r0, #2
 8005d3c:	07da      	lsls	r2, r3, #31
 8005d3e:	d402      	bmi.n	8005d46 <__lo0bits+0x4e>
 8005d40:	085b      	lsrs	r3, r3, #1
 8005d42:	d006      	beq.n	8005d52 <__lo0bits+0x5a>
 8005d44:	3001      	adds	r0, #1
 8005d46:	600b      	str	r3, [r1, #0]
 8005d48:	4770      	bx	lr
 8005d4a:	4610      	mov	r0, r2
 8005d4c:	e7e9      	b.n	8005d22 <__lo0bits+0x2a>
 8005d4e:	2000      	movs	r0, #0
 8005d50:	4770      	bx	lr
 8005d52:	2020      	movs	r0, #32
 8005d54:	4770      	bx	lr

08005d56 <__i2b>:
 8005d56:	b510      	push	{r4, lr}
 8005d58:	460c      	mov	r4, r1
 8005d5a:	2101      	movs	r1, #1
 8005d5c:	f7ff ff27 	bl	8005bae <_Balloc>
 8005d60:	2201      	movs	r2, #1
 8005d62:	6144      	str	r4, [r0, #20]
 8005d64:	6102      	str	r2, [r0, #16]
 8005d66:	bd10      	pop	{r4, pc}

08005d68 <__multiply>:
 8005d68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d6c:	4614      	mov	r4, r2
 8005d6e:	690a      	ldr	r2, [r1, #16]
 8005d70:	6923      	ldr	r3, [r4, #16]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	bfb8      	it	lt
 8005d76:	460b      	movlt	r3, r1
 8005d78:	4688      	mov	r8, r1
 8005d7a:	bfbc      	itt	lt
 8005d7c:	46a0      	movlt	r8, r4
 8005d7e:	461c      	movlt	r4, r3
 8005d80:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005d84:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005d88:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005d8c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005d90:	eb07 0609 	add.w	r6, r7, r9
 8005d94:	42b3      	cmp	r3, r6
 8005d96:	bfb8      	it	lt
 8005d98:	3101      	addlt	r1, #1
 8005d9a:	f7ff ff08 	bl	8005bae <_Balloc>
 8005d9e:	f100 0514 	add.w	r5, r0, #20
 8005da2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005da6:	462b      	mov	r3, r5
 8005da8:	2200      	movs	r2, #0
 8005daa:	4573      	cmp	r3, lr
 8005dac:	d316      	bcc.n	8005ddc <__multiply+0x74>
 8005dae:	f104 0214 	add.w	r2, r4, #20
 8005db2:	f108 0114 	add.w	r1, r8, #20
 8005db6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005dba:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	9b00      	ldr	r3, [sp, #0]
 8005dc2:	9201      	str	r2, [sp, #4]
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d80c      	bhi.n	8005de2 <__multiply+0x7a>
 8005dc8:	2e00      	cmp	r6, #0
 8005dca:	dd03      	ble.n	8005dd4 <__multiply+0x6c>
 8005dcc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d05d      	beq.n	8005e90 <__multiply+0x128>
 8005dd4:	6106      	str	r6, [r0, #16]
 8005dd6:	b003      	add	sp, #12
 8005dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ddc:	f843 2b04 	str.w	r2, [r3], #4
 8005de0:	e7e3      	b.n	8005daa <__multiply+0x42>
 8005de2:	f8b2 b000 	ldrh.w	fp, [r2]
 8005de6:	f1bb 0f00 	cmp.w	fp, #0
 8005dea:	d023      	beq.n	8005e34 <__multiply+0xcc>
 8005dec:	4689      	mov	r9, r1
 8005dee:	46ac      	mov	ip, r5
 8005df0:	f04f 0800 	mov.w	r8, #0
 8005df4:	f859 4b04 	ldr.w	r4, [r9], #4
 8005df8:	f8dc a000 	ldr.w	sl, [ip]
 8005dfc:	b2a3      	uxth	r3, r4
 8005dfe:	fa1f fa8a 	uxth.w	sl, sl
 8005e02:	fb0b a303 	mla	r3, fp, r3, sl
 8005e06:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005e0a:	f8dc 4000 	ldr.w	r4, [ip]
 8005e0e:	4443      	add	r3, r8
 8005e10:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005e14:	fb0b 840a 	mla	r4, fp, sl, r8
 8005e18:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005e1c:	46e2      	mov	sl, ip
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005e24:	454f      	cmp	r7, r9
 8005e26:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005e2a:	f84a 3b04 	str.w	r3, [sl], #4
 8005e2e:	d82b      	bhi.n	8005e88 <__multiply+0x120>
 8005e30:	f8cc 8004 	str.w	r8, [ip, #4]
 8005e34:	9b01      	ldr	r3, [sp, #4]
 8005e36:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005e3a:	3204      	adds	r2, #4
 8005e3c:	f1ba 0f00 	cmp.w	sl, #0
 8005e40:	d020      	beq.n	8005e84 <__multiply+0x11c>
 8005e42:	682b      	ldr	r3, [r5, #0]
 8005e44:	4689      	mov	r9, r1
 8005e46:	46a8      	mov	r8, r5
 8005e48:	f04f 0b00 	mov.w	fp, #0
 8005e4c:	f8b9 c000 	ldrh.w	ip, [r9]
 8005e50:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005e54:	fb0a 440c 	mla	r4, sl, ip, r4
 8005e58:	445c      	add	r4, fp
 8005e5a:	46c4      	mov	ip, r8
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005e62:	f84c 3b04 	str.w	r3, [ip], #4
 8005e66:	f859 3b04 	ldr.w	r3, [r9], #4
 8005e6a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005e6e:	0c1b      	lsrs	r3, r3, #16
 8005e70:	fb0a b303 	mla	r3, sl, r3, fp
 8005e74:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005e78:	454f      	cmp	r7, r9
 8005e7a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005e7e:	d805      	bhi.n	8005e8c <__multiply+0x124>
 8005e80:	f8c8 3004 	str.w	r3, [r8, #4]
 8005e84:	3504      	adds	r5, #4
 8005e86:	e79b      	b.n	8005dc0 <__multiply+0x58>
 8005e88:	46d4      	mov	ip, sl
 8005e8a:	e7b3      	b.n	8005df4 <__multiply+0x8c>
 8005e8c:	46e0      	mov	r8, ip
 8005e8e:	e7dd      	b.n	8005e4c <__multiply+0xe4>
 8005e90:	3e01      	subs	r6, #1
 8005e92:	e799      	b.n	8005dc8 <__multiply+0x60>

08005e94 <__pow5mult>:
 8005e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e98:	4615      	mov	r5, r2
 8005e9a:	f012 0203 	ands.w	r2, r2, #3
 8005e9e:	4606      	mov	r6, r0
 8005ea0:	460f      	mov	r7, r1
 8005ea2:	d007      	beq.n	8005eb4 <__pow5mult+0x20>
 8005ea4:	3a01      	subs	r2, #1
 8005ea6:	4c21      	ldr	r4, [pc, #132]	; (8005f2c <__pow5mult+0x98>)
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005eae:	f7ff fec9 	bl	8005c44 <__multadd>
 8005eb2:	4607      	mov	r7, r0
 8005eb4:	10ad      	asrs	r5, r5, #2
 8005eb6:	d035      	beq.n	8005f24 <__pow5mult+0x90>
 8005eb8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005eba:	b93c      	cbnz	r4, 8005ecc <__pow5mult+0x38>
 8005ebc:	2010      	movs	r0, #16
 8005ebe:	f7ff fe63 	bl	8005b88 <malloc>
 8005ec2:	6270      	str	r0, [r6, #36]	; 0x24
 8005ec4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ec8:	6004      	str	r4, [r0, #0]
 8005eca:	60c4      	str	r4, [r0, #12]
 8005ecc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005ed0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005ed4:	b94c      	cbnz	r4, 8005eea <__pow5mult+0x56>
 8005ed6:	f240 2171 	movw	r1, #625	; 0x271
 8005eda:	4630      	mov	r0, r6
 8005edc:	f7ff ff3b 	bl	8005d56 <__i2b>
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	f8c8 0008 	str.w	r0, [r8, #8]
 8005ee6:	4604      	mov	r4, r0
 8005ee8:	6003      	str	r3, [r0, #0]
 8005eea:	f04f 0800 	mov.w	r8, #0
 8005eee:	07eb      	lsls	r3, r5, #31
 8005ef0:	d50a      	bpl.n	8005f08 <__pow5mult+0x74>
 8005ef2:	4639      	mov	r1, r7
 8005ef4:	4622      	mov	r2, r4
 8005ef6:	4630      	mov	r0, r6
 8005ef8:	f7ff ff36 	bl	8005d68 <__multiply>
 8005efc:	4639      	mov	r1, r7
 8005efe:	4681      	mov	r9, r0
 8005f00:	4630      	mov	r0, r6
 8005f02:	f7ff fe88 	bl	8005c16 <_Bfree>
 8005f06:	464f      	mov	r7, r9
 8005f08:	106d      	asrs	r5, r5, #1
 8005f0a:	d00b      	beq.n	8005f24 <__pow5mult+0x90>
 8005f0c:	6820      	ldr	r0, [r4, #0]
 8005f0e:	b938      	cbnz	r0, 8005f20 <__pow5mult+0x8c>
 8005f10:	4622      	mov	r2, r4
 8005f12:	4621      	mov	r1, r4
 8005f14:	4630      	mov	r0, r6
 8005f16:	f7ff ff27 	bl	8005d68 <__multiply>
 8005f1a:	6020      	str	r0, [r4, #0]
 8005f1c:	f8c0 8000 	str.w	r8, [r0]
 8005f20:	4604      	mov	r4, r0
 8005f22:	e7e4      	b.n	8005eee <__pow5mult+0x5a>
 8005f24:	4638      	mov	r0, r7
 8005f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f2a:	bf00      	nop
 8005f2c:	08007ee8 	.word	0x08007ee8

08005f30 <__lshift>:
 8005f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f34:	460c      	mov	r4, r1
 8005f36:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005f3a:	6923      	ldr	r3, [r4, #16]
 8005f3c:	6849      	ldr	r1, [r1, #4]
 8005f3e:	eb0a 0903 	add.w	r9, sl, r3
 8005f42:	68a3      	ldr	r3, [r4, #8]
 8005f44:	4607      	mov	r7, r0
 8005f46:	4616      	mov	r6, r2
 8005f48:	f109 0501 	add.w	r5, r9, #1
 8005f4c:	42ab      	cmp	r3, r5
 8005f4e:	db32      	blt.n	8005fb6 <__lshift+0x86>
 8005f50:	4638      	mov	r0, r7
 8005f52:	f7ff fe2c 	bl	8005bae <_Balloc>
 8005f56:	2300      	movs	r3, #0
 8005f58:	4680      	mov	r8, r0
 8005f5a:	f100 0114 	add.w	r1, r0, #20
 8005f5e:	461a      	mov	r2, r3
 8005f60:	4553      	cmp	r3, sl
 8005f62:	db2b      	blt.n	8005fbc <__lshift+0x8c>
 8005f64:	6920      	ldr	r0, [r4, #16]
 8005f66:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005f6a:	f104 0314 	add.w	r3, r4, #20
 8005f6e:	f016 021f 	ands.w	r2, r6, #31
 8005f72:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005f76:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005f7a:	d025      	beq.n	8005fc8 <__lshift+0x98>
 8005f7c:	f1c2 0e20 	rsb	lr, r2, #32
 8005f80:	2000      	movs	r0, #0
 8005f82:	681e      	ldr	r6, [r3, #0]
 8005f84:	468a      	mov	sl, r1
 8005f86:	4096      	lsls	r6, r2
 8005f88:	4330      	orrs	r0, r6
 8005f8a:	f84a 0b04 	str.w	r0, [sl], #4
 8005f8e:	f853 0b04 	ldr.w	r0, [r3], #4
 8005f92:	459c      	cmp	ip, r3
 8005f94:	fa20 f00e 	lsr.w	r0, r0, lr
 8005f98:	d814      	bhi.n	8005fc4 <__lshift+0x94>
 8005f9a:	6048      	str	r0, [r1, #4]
 8005f9c:	b108      	cbz	r0, 8005fa2 <__lshift+0x72>
 8005f9e:	f109 0502 	add.w	r5, r9, #2
 8005fa2:	3d01      	subs	r5, #1
 8005fa4:	4638      	mov	r0, r7
 8005fa6:	f8c8 5010 	str.w	r5, [r8, #16]
 8005faa:	4621      	mov	r1, r4
 8005fac:	f7ff fe33 	bl	8005c16 <_Bfree>
 8005fb0:	4640      	mov	r0, r8
 8005fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fb6:	3101      	adds	r1, #1
 8005fb8:	005b      	lsls	r3, r3, #1
 8005fba:	e7c7      	b.n	8005f4c <__lshift+0x1c>
 8005fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	e7cd      	b.n	8005f60 <__lshift+0x30>
 8005fc4:	4651      	mov	r1, sl
 8005fc6:	e7dc      	b.n	8005f82 <__lshift+0x52>
 8005fc8:	3904      	subs	r1, #4
 8005fca:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fce:	f841 2f04 	str.w	r2, [r1, #4]!
 8005fd2:	459c      	cmp	ip, r3
 8005fd4:	d8f9      	bhi.n	8005fca <__lshift+0x9a>
 8005fd6:	e7e4      	b.n	8005fa2 <__lshift+0x72>

08005fd8 <__mcmp>:
 8005fd8:	6903      	ldr	r3, [r0, #16]
 8005fda:	690a      	ldr	r2, [r1, #16]
 8005fdc:	1a9b      	subs	r3, r3, r2
 8005fde:	b530      	push	{r4, r5, lr}
 8005fe0:	d10c      	bne.n	8005ffc <__mcmp+0x24>
 8005fe2:	0092      	lsls	r2, r2, #2
 8005fe4:	3014      	adds	r0, #20
 8005fe6:	3114      	adds	r1, #20
 8005fe8:	1884      	adds	r4, r0, r2
 8005fea:	4411      	add	r1, r2
 8005fec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005ff0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005ff4:	4295      	cmp	r5, r2
 8005ff6:	d003      	beq.n	8006000 <__mcmp+0x28>
 8005ff8:	d305      	bcc.n	8006006 <__mcmp+0x2e>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	bd30      	pop	{r4, r5, pc}
 8006000:	42a0      	cmp	r0, r4
 8006002:	d3f3      	bcc.n	8005fec <__mcmp+0x14>
 8006004:	e7fa      	b.n	8005ffc <__mcmp+0x24>
 8006006:	f04f 33ff 	mov.w	r3, #4294967295
 800600a:	e7f7      	b.n	8005ffc <__mcmp+0x24>

0800600c <__mdiff>:
 800600c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006010:	460d      	mov	r5, r1
 8006012:	4607      	mov	r7, r0
 8006014:	4611      	mov	r1, r2
 8006016:	4628      	mov	r0, r5
 8006018:	4614      	mov	r4, r2
 800601a:	f7ff ffdd 	bl	8005fd8 <__mcmp>
 800601e:	1e06      	subs	r6, r0, #0
 8006020:	d108      	bne.n	8006034 <__mdiff+0x28>
 8006022:	4631      	mov	r1, r6
 8006024:	4638      	mov	r0, r7
 8006026:	f7ff fdc2 	bl	8005bae <_Balloc>
 800602a:	2301      	movs	r3, #1
 800602c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006034:	bfa4      	itt	ge
 8006036:	4623      	movge	r3, r4
 8006038:	462c      	movge	r4, r5
 800603a:	4638      	mov	r0, r7
 800603c:	6861      	ldr	r1, [r4, #4]
 800603e:	bfa6      	itte	ge
 8006040:	461d      	movge	r5, r3
 8006042:	2600      	movge	r6, #0
 8006044:	2601      	movlt	r6, #1
 8006046:	f7ff fdb2 	bl	8005bae <_Balloc>
 800604a:	692b      	ldr	r3, [r5, #16]
 800604c:	60c6      	str	r6, [r0, #12]
 800604e:	6926      	ldr	r6, [r4, #16]
 8006050:	f105 0914 	add.w	r9, r5, #20
 8006054:	f104 0214 	add.w	r2, r4, #20
 8006058:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800605c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006060:	f100 0514 	add.w	r5, r0, #20
 8006064:	f04f 0e00 	mov.w	lr, #0
 8006068:	f852 ab04 	ldr.w	sl, [r2], #4
 800606c:	f859 4b04 	ldr.w	r4, [r9], #4
 8006070:	fa1e f18a 	uxtah	r1, lr, sl
 8006074:	b2a3      	uxth	r3, r4
 8006076:	1ac9      	subs	r1, r1, r3
 8006078:	0c23      	lsrs	r3, r4, #16
 800607a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800607e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006082:	b289      	uxth	r1, r1
 8006084:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006088:	45c8      	cmp	r8, r9
 800608a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800608e:	4694      	mov	ip, r2
 8006090:	f845 3b04 	str.w	r3, [r5], #4
 8006094:	d8e8      	bhi.n	8006068 <__mdiff+0x5c>
 8006096:	45bc      	cmp	ip, r7
 8006098:	d304      	bcc.n	80060a4 <__mdiff+0x98>
 800609a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800609e:	b183      	cbz	r3, 80060c2 <__mdiff+0xb6>
 80060a0:	6106      	str	r6, [r0, #16]
 80060a2:	e7c5      	b.n	8006030 <__mdiff+0x24>
 80060a4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80060a8:	fa1e f381 	uxtah	r3, lr, r1
 80060ac:	141a      	asrs	r2, r3, #16
 80060ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060b8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80060bc:	f845 3b04 	str.w	r3, [r5], #4
 80060c0:	e7e9      	b.n	8006096 <__mdiff+0x8a>
 80060c2:	3e01      	subs	r6, #1
 80060c4:	e7e9      	b.n	800609a <__mdiff+0x8e>

080060c6 <__d2b>:
 80060c6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80060ca:	460e      	mov	r6, r1
 80060cc:	2101      	movs	r1, #1
 80060ce:	ec59 8b10 	vmov	r8, r9, d0
 80060d2:	4615      	mov	r5, r2
 80060d4:	f7ff fd6b 	bl	8005bae <_Balloc>
 80060d8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80060dc:	4607      	mov	r7, r0
 80060de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80060e2:	bb34      	cbnz	r4, 8006132 <__d2b+0x6c>
 80060e4:	9301      	str	r3, [sp, #4]
 80060e6:	f1b8 0300 	subs.w	r3, r8, #0
 80060ea:	d027      	beq.n	800613c <__d2b+0x76>
 80060ec:	a802      	add	r0, sp, #8
 80060ee:	f840 3d08 	str.w	r3, [r0, #-8]!
 80060f2:	f7ff fe01 	bl	8005cf8 <__lo0bits>
 80060f6:	9900      	ldr	r1, [sp, #0]
 80060f8:	b1f0      	cbz	r0, 8006138 <__d2b+0x72>
 80060fa:	9a01      	ldr	r2, [sp, #4]
 80060fc:	f1c0 0320 	rsb	r3, r0, #32
 8006100:	fa02 f303 	lsl.w	r3, r2, r3
 8006104:	430b      	orrs	r3, r1
 8006106:	40c2      	lsrs	r2, r0
 8006108:	617b      	str	r3, [r7, #20]
 800610a:	9201      	str	r2, [sp, #4]
 800610c:	9b01      	ldr	r3, [sp, #4]
 800610e:	61bb      	str	r3, [r7, #24]
 8006110:	2b00      	cmp	r3, #0
 8006112:	bf14      	ite	ne
 8006114:	2102      	movne	r1, #2
 8006116:	2101      	moveq	r1, #1
 8006118:	6139      	str	r1, [r7, #16]
 800611a:	b1c4      	cbz	r4, 800614e <__d2b+0x88>
 800611c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006120:	4404      	add	r4, r0
 8006122:	6034      	str	r4, [r6, #0]
 8006124:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006128:	6028      	str	r0, [r5, #0]
 800612a:	4638      	mov	r0, r7
 800612c:	b003      	add	sp, #12
 800612e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006132:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006136:	e7d5      	b.n	80060e4 <__d2b+0x1e>
 8006138:	6179      	str	r1, [r7, #20]
 800613a:	e7e7      	b.n	800610c <__d2b+0x46>
 800613c:	a801      	add	r0, sp, #4
 800613e:	f7ff fddb 	bl	8005cf8 <__lo0bits>
 8006142:	9b01      	ldr	r3, [sp, #4]
 8006144:	617b      	str	r3, [r7, #20]
 8006146:	2101      	movs	r1, #1
 8006148:	6139      	str	r1, [r7, #16]
 800614a:	3020      	adds	r0, #32
 800614c:	e7e5      	b.n	800611a <__d2b+0x54>
 800614e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006152:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006156:	6030      	str	r0, [r6, #0]
 8006158:	6918      	ldr	r0, [r3, #16]
 800615a:	f7ff fdae 	bl	8005cba <__hi0bits>
 800615e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006162:	e7e1      	b.n	8006128 <__d2b+0x62>

08006164 <_calloc_r>:
 8006164:	b538      	push	{r3, r4, r5, lr}
 8006166:	fb02 f401 	mul.w	r4, r2, r1
 800616a:	4621      	mov	r1, r4
 800616c:	f000 f856 	bl	800621c <_malloc_r>
 8006170:	4605      	mov	r5, r0
 8006172:	b118      	cbz	r0, 800617c <_calloc_r+0x18>
 8006174:	4622      	mov	r2, r4
 8006176:	2100      	movs	r1, #0
 8006178:	f7fe f96e 	bl	8004458 <memset>
 800617c:	4628      	mov	r0, r5
 800617e:	bd38      	pop	{r3, r4, r5, pc}

08006180 <_free_r>:
 8006180:	b538      	push	{r3, r4, r5, lr}
 8006182:	4605      	mov	r5, r0
 8006184:	2900      	cmp	r1, #0
 8006186:	d045      	beq.n	8006214 <_free_r+0x94>
 8006188:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800618c:	1f0c      	subs	r4, r1, #4
 800618e:	2b00      	cmp	r3, #0
 8006190:	bfb8      	it	lt
 8006192:	18e4      	addlt	r4, r4, r3
 8006194:	f000 fc4a 	bl	8006a2c <__malloc_lock>
 8006198:	4a1f      	ldr	r2, [pc, #124]	; (8006218 <_free_r+0x98>)
 800619a:	6813      	ldr	r3, [r2, #0]
 800619c:	4610      	mov	r0, r2
 800619e:	b933      	cbnz	r3, 80061ae <_free_r+0x2e>
 80061a0:	6063      	str	r3, [r4, #4]
 80061a2:	6014      	str	r4, [r2, #0]
 80061a4:	4628      	mov	r0, r5
 80061a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061aa:	f000 bc40 	b.w	8006a2e <__malloc_unlock>
 80061ae:	42a3      	cmp	r3, r4
 80061b0:	d90c      	bls.n	80061cc <_free_r+0x4c>
 80061b2:	6821      	ldr	r1, [r4, #0]
 80061b4:	1862      	adds	r2, r4, r1
 80061b6:	4293      	cmp	r3, r2
 80061b8:	bf04      	itt	eq
 80061ba:	681a      	ldreq	r2, [r3, #0]
 80061bc:	685b      	ldreq	r3, [r3, #4]
 80061be:	6063      	str	r3, [r4, #4]
 80061c0:	bf04      	itt	eq
 80061c2:	1852      	addeq	r2, r2, r1
 80061c4:	6022      	streq	r2, [r4, #0]
 80061c6:	6004      	str	r4, [r0, #0]
 80061c8:	e7ec      	b.n	80061a4 <_free_r+0x24>
 80061ca:	4613      	mov	r3, r2
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	b10a      	cbz	r2, 80061d4 <_free_r+0x54>
 80061d0:	42a2      	cmp	r2, r4
 80061d2:	d9fa      	bls.n	80061ca <_free_r+0x4a>
 80061d4:	6819      	ldr	r1, [r3, #0]
 80061d6:	1858      	adds	r0, r3, r1
 80061d8:	42a0      	cmp	r0, r4
 80061da:	d10b      	bne.n	80061f4 <_free_r+0x74>
 80061dc:	6820      	ldr	r0, [r4, #0]
 80061de:	4401      	add	r1, r0
 80061e0:	1858      	adds	r0, r3, r1
 80061e2:	4282      	cmp	r2, r0
 80061e4:	6019      	str	r1, [r3, #0]
 80061e6:	d1dd      	bne.n	80061a4 <_free_r+0x24>
 80061e8:	6810      	ldr	r0, [r2, #0]
 80061ea:	6852      	ldr	r2, [r2, #4]
 80061ec:	605a      	str	r2, [r3, #4]
 80061ee:	4401      	add	r1, r0
 80061f0:	6019      	str	r1, [r3, #0]
 80061f2:	e7d7      	b.n	80061a4 <_free_r+0x24>
 80061f4:	d902      	bls.n	80061fc <_free_r+0x7c>
 80061f6:	230c      	movs	r3, #12
 80061f8:	602b      	str	r3, [r5, #0]
 80061fa:	e7d3      	b.n	80061a4 <_free_r+0x24>
 80061fc:	6820      	ldr	r0, [r4, #0]
 80061fe:	1821      	adds	r1, r4, r0
 8006200:	428a      	cmp	r2, r1
 8006202:	bf04      	itt	eq
 8006204:	6811      	ldreq	r1, [r2, #0]
 8006206:	6852      	ldreq	r2, [r2, #4]
 8006208:	6062      	str	r2, [r4, #4]
 800620a:	bf04      	itt	eq
 800620c:	1809      	addeq	r1, r1, r0
 800620e:	6021      	streq	r1, [r4, #0]
 8006210:	605c      	str	r4, [r3, #4]
 8006212:	e7c7      	b.n	80061a4 <_free_r+0x24>
 8006214:	bd38      	pop	{r3, r4, r5, pc}
 8006216:	bf00      	nop
 8006218:	20000394 	.word	0x20000394

0800621c <_malloc_r>:
 800621c:	b570      	push	{r4, r5, r6, lr}
 800621e:	1ccd      	adds	r5, r1, #3
 8006220:	f025 0503 	bic.w	r5, r5, #3
 8006224:	3508      	adds	r5, #8
 8006226:	2d0c      	cmp	r5, #12
 8006228:	bf38      	it	cc
 800622a:	250c      	movcc	r5, #12
 800622c:	2d00      	cmp	r5, #0
 800622e:	4606      	mov	r6, r0
 8006230:	db01      	blt.n	8006236 <_malloc_r+0x1a>
 8006232:	42a9      	cmp	r1, r5
 8006234:	d903      	bls.n	800623e <_malloc_r+0x22>
 8006236:	230c      	movs	r3, #12
 8006238:	6033      	str	r3, [r6, #0]
 800623a:	2000      	movs	r0, #0
 800623c:	bd70      	pop	{r4, r5, r6, pc}
 800623e:	f000 fbf5 	bl	8006a2c <__malloc_lock>
 8006242:	4a21      	ldr	r2, [pc, #132]	; (80062c8 <_malloc_r+0xac>)
 8006244:	6814      	ldr	r4, [r2, #0]
 8006246:	4621      	mov	r1, r4
 8006248:	b991      	cbnz	r1, 8006270 <_malloc_r+0x54>
 800624a:	4c20      	ldr	r4, [pc, #128]	; (80062cc <_malloc_r+0xb0>)
 800624c:	6823      	ldr	r3, [r4, #0]
 800624e:	b91b      	cbnz	r3, 8006258 <_malloc_r+0x3c>
 8006250:	4630      	mov	r0, r6
 8006252:	f000 f97d 	bl	8006550 <_sbrk_r>
 8006256:	6020      	str	r0, [r4, #0]
 8006258:	4629      	mov	r1, r5
 800625a:	4630      	mov	r0, r6
 800625c:	f000 f978 	bl	8006550 <_sbrk_r>
 8006260:	1c43      	adds	r3, r0, #1
 8006262:	d124      	bne.n	80062ae <_malloc_r+0x92>
 8006264:	230c      	movs	r3, #12
 8006266:	6033      	str	r3, [r6, #0]
 8006268:	4630      	mov	r0, r6
 800626a:	f000 fbe0 	bl	8006a2e <__malloc_unlock>
 800626e:	e7e4      	b.n	800623a <_malloc_r+0x1e>
 8006270:	680b      	ldr	r3, [r1, #0]
 8006272:	1b5b      	subs	r3, r3, r5
 8006274:	d418      	bmi.n	80062a8 <_malloc_r+0x8c>
 8006276:	2b0b      	cmp	r3, #11
 8006278:	d90f      	bls.n	800629a <_malloc_r+0x7e>
 800627a:	600b      	str	r3, [r1, #0]
 800627c:	50cd      	str	r5, [r1, r3]
 800627e:	18cc      	adds	r4, r1, r3
 8006280:	4630      	mov	r0, r6
 8006282:	f000 fbd4 	bl	8006a2e <__malloc_unlock>
 8006286:	f104 000b 	add.w	r0, r4, #11
 800628a:	1d23      	adds	r3, r4, #4
 800628c:	f020 0007 	bic.w	r0, r0, #7
 8006290:	1ac3      	subs	r3, r0, r3
 8006292:	d0d3      	beq.n	800623c <_malloc_r+0x20>
 8006294:	425a      	negs	r2, r3
 8006296:	50e2      	str	r2, [r4, r3]
 8006298:	e7d0      	b.n	800623c <_malloc_r+0x20>
 800629a:	428c      	cmp	r4, r1
 800629c:	684b      	ldr	r3, [r1, #4]
 800629e:	bf16      	itet	ne
 80062a0:	6063      	strne	r3, [r4, #4]
 80062a2:	6013      	streq	r3, [r2, #0]
 80062a4:	460c      	movne	r4, r1
 80062a6:	e7eb      	b.n	8006280 <_malloc_r+0x64>
 80062a8:	460c      	mov	r4, r1
 80062aa:	6849      	ldr	r1, [r1, #4]
 80062ac:	e7cc      	b.n	8006248 <_malloc_r+0x2c>
 80062ae:	1cc4      	adds	r4, r0, #3
 80062b0:	f024 0403 	bic.w	r4, r4, #3
 80062b4:	42a0      	cmp	r0, r4
 80062b6:	d005      	beq.n	80062c4 <_malloc_r+0xa8>
 80062b8:	1a21      	subs	r1, r4, r0
 80062ba:	4630      	mov	r0, r6
 80062bc:	f000 f948 	bl	8006550 <_sbrk_r>
 80062c0:	3001      	adds	r0, #1
 80062c2:	d0cf      	beq.n	8006264 <_malloc_r+0x48>
 80062c4:	6025      	str	r5, [r4, #0]
 80062c6:	e7db      	b.n	8006280 <_malloc_r+0x64>
 80062c8:	20000394 	.word	0x20000394
 80062cc:	20000398 	.word	0x20000398

080062d0 <__sfputc_r>:
 80062d0:	6893      	ldr	r3, [r2, #8]
 80062d2:	3b01      	subs	r3, #1
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	b410      	push	{r4}
 80062d8:	6093      	str	r3, [r2, #8]
 80062da:	da08      	bge.n	80062ee <__sfputc_r+0x1e>
 80062dc:	6994      	ldr	r4, [r2, #24]
 80062de:	42a3      	cmp	r3, r4
 80062e0:	db01      	blt.n	80062e6 <__sfputc_r+0x16>
 80062e2:	290a      	cmp	r1, #10
 80062e4:	d103      	bne.n	80062ee <__sfputc_r+0x1e>
 80062e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062ea:	f000 b985 	b.w	80065f8 <__swbuf_r>
 80062ee:	6813      	ldr	r3, [r2, #0]
 80062f0:	1c58      	adds	r0, r3, #1
 80062f2:	6010      	str	r0, [r2, #0]
 80062f4:	7019      	strb	r1, [r3, #0]
 80062f6:	4608      	mov	r0, r1
 80062f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <__sfputs_r>:
 80062fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006300:	4606      	mov	r6, r0
 8006302:	460f      	mov	r7, r1
 8006304:	4614      	mov	r4, r2
 8006306:	18d5      	adds	r5, r2, r3
 8006308:	42ac      	cmp	r4, r5
 800630a:	d101      	bne.n	8006310 <__sfputs_r+0x12>
 800630c:	2000      	movs	r0, #0
 800630e:	e007      	b.n	8006320 <__sfputs_r+0x22>
 8006310:	463a      	mov	r2, r7
 8006312:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006316:	4630      	mov	r0, r6
 8006318:	f7ff ffda 	bl	80062d0 <__sfputc_r>
 800631c:	1c43      	adds	r3, r0, #1
 800631e:	d1f3      	bne.n	8006308 <__sfputs_r+0xa>
 8006320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006324 <_vfiprintf_r>:
 8006324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006328:	460c      	mov	r4, r1
 800632a:	b09d      	sub	sp, #116	; 0x74
 800632c:	4617      	mov	r7, r2
 800632e:	461d      	mov	r5, r3
 8006330:	4606      	mov	r6, r0
 8006332:	b118      	cbz	r0, 800633c <_vfiprintf_r+0x18>
 8006334:	6983      	ldr	r3, [r0, #24]
 8006336:	b90b      	cbnz	r3, 800633c <_vfiprintf_r+0x18>
 8006338:	f7ff fb8e 	bl	8005a58 <__sinit>
 800633c:	4b7c      	ldr	r3, [pc, #496]	; (8006530 <_vfiprintf_r+0x20c>)
 800633e:	429c      	cmp	r4, r3
 8006340:	d158      	bne.n	80063f4 <_vfiprintf_r+0xd0>
 8006342:	6874      	ldr	r4, [r6, #4]
 8006344:	89a3      	ldrh	r3, [r4, #12]
 8006346:	0718      	lsls	r0, r3, #28
 8006348:	d55e      	bpl.n	8006408 <_vfiprintf_r+0xe4>
 800634a:	6923      	ldr	r3, [r4, #16]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d05b      	beq.n	8006408 <_vfiprintf_r+0xe4>
 8006350:	2300      	movs	r3, #0
 8006352:	9309      	str	r3, [sp, #36]	; 0x24
 8006354:	2320      	movs	r3, #32
 8006356:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800635a:	2330      	movs	r3, #48	; 0x30
 800635c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006360:	9503      	str	r5, [sp, #12]
 8006362:	f04f 0b01 	mov.w	fp, #1
 8006366:	46b8      	mov	r8, r7
 8006368:	4645      	mov	r5, r8
 800636a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800636e:	b10b      	cbz	r3, 8006374 <_vfiprintf_r+0x50>
 8006370:	2b25      	cmp	r3, #37	; 0x25
 8006372:	d154      	bne.n	800641e <_vfiprintf_r+0xfa>
 8006374:	ebb8 0a07 	subs.w	sl, r8, r7
 8006378:	d00b      	beq.n	8006392 <_vfiprintf_r+0x6e>
 800637a:	4653      	mov	r3, sl
 800637c:	463a      	mov	r2, r7
 800637e:	4621      	mov	r1, r4
 8006380:	4630      	mov	r0, r6
 8006382:	f7ff ffbc 	bl	80062fe <__sfputs_r>
 8006386:	3001      	adds	r0, #1
 8006388:	f000 80c2 	beq.w	8006510 <_vfiprintf_r+0x1ec>
 800638c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800638e:	4453      	add	r3, sl
 8006390:	9309      	str	r3, [sp, #36]	; 0x24
 8006392:	f898 3000 	ldrb.w	r3, [r8]
 8006396:	2b00      	cmp	r3, #0
 8006398:	f000 80ba 	beq.w	8006510 <_vfiprintf_r+0x1ec>
 800639c:	2300      	movs	r3, #0
 800639e:	f04f 32ff 	mov.w	r2, #4294967295
 80063a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063a6:	9304      	str	r3, [sp, #16]
 80063a8:	9307      	str	r3, [sp, #28]
 80063aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063ae:	931a      	str	r3, [sp, #104]	; 0x68
 80063b0:	46a8      	mov	r8, r5
 80063b2:	2205      	movs	r2, #5
 80063b4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80063b8:	485e      	ldr	r0, [pc, #376]	; (8006534 <_vfiprintf_r+0x210>)
 80063ba:	f7f9 ff29 	bl	8000210 <memchr>
 80063be:	9b04      	ldr	r3, [sp, #16]
 80063c0:	bb78      	cbnz	r0, 8006422 <_vfiprintf_r+0xfe>
 80063c2:	06d9      	lsls	r1, r3, #27
 80063c4:	bf44      	itt	mi
 80063c6:	2220      	movmi	r2, #32
 80063c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80063cc:	071a      	lsls	r2, r3, #28
 80063ce:	bf44      	itt	mi
 80063d0:	222b      	movmi	r2, #43	; 0x2b
 80063d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80063d6:	782a      	ldrb	r2, [r5, #0]
 80063d8:	2a2a      	cmp	r2, #42	; 0x2a
 80063da:	d02a      	beq.n	8006432 <_vfiprintf_r+0x10e>
 80063dc:	9a07      	ldr	r2, [sp, #28]
 80063de:	46a8      	mov	r8, r5
 80063e0:	2000      	movs	r0, #0
 80063e2:	250a      	movs	r5, #10
 80063e4:	4641      	mov	r1, r8
 80063e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063ea:	3b30      	subs	r3, #48	; 0x30
 80063ec:	2b09      	cmp	r3, #9
 80063ee:	d969      	bls.n	80064c4 <_vfiprintf_r+0x1a0>
 80063f0:	b360      	cbz	r0, 800644c <_vfiprintf_r+0x128>
 80063f2:	e024      	b.n	800643e <_vfiprintf_r+0x11a>
 80063f4:	4b50      	ldr	r3, [pc, #320]	; (8006538 <_vfiprintf_r+0x214>)
 80063f6:	429c      	cmp	r4, r3
 80063f8:	d101      	bne.n	80063fe <_vfiprintf_r+0xda>
 80063fa:	68b4      	ldr	r4, [r6, #8]
 80063fc:	e7a2      	b.n	8006344 <_vfiprintf_r+0x20>
 80063fe:	4b4f      	ldr	r3, [pc, #316]	; (800653c <_vfiprintf_r+0x218>)
 8006400:	429c      	cmp	r4, r3
 8006402:	bf08      	it	eq
 8006404:	68f4      	ldreq	r4, [r6, #12]
 8006406:	e79d      	b.n	8006344 <_vfiprintf_r+0x20>
 8006408:	4621      	mov	r1, r4
 800640a:	4630      	mov	r0, r6
 800640c:	f000 f958 	bl	80066c0 <__swsetup_r>
 8006410:	2800      	cmp	r0, #0
 8006412:	d09d      	beq.n	8006350 <_vfiprintf_r+0x2c>
 8006414:	f04f 30ff 	mov.w	r0, #4294967295
 8006418:	b01d      	add	sp, #116	; 0x74
 800641a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800641e:	46a8      	mov	r8, r5
 8006420:	e7a2      	b.n	8006368 <_vfiprintf_r+0x44>
 8006422:	4a44      	ldr	r2, [pc, #272]	; (8006534 <_vfiprintf_r+0x210>)
 8006424:	1a80      	subs	r0, r0, r2
 8006426:	fa0b f000 	lsl.w	r0, fp, r0
 800642a:	4318      	orrs	r0, r3
 800642c:	9004      	str	r0, [sp, #16]
 800642e:	4645      	mov	r5, r8
 8006430:	e7be      	b.n	80063b0 <_vfiprintf_r+0x8c>
 8006432:	9a03      	ldr	r2, [sp, #12]
 8006434:	1d11      	adds	r1, r2, #4
 8006436:	6812      	ldr	r2, [r2, #0]
 8006438:	9103      	str	r1, [sp, #12]
 800643a:	2a00      	cmp	r2, #0
 800643c:	db01      	blt.n	8006442 <_vfiprintf_r+0x11e>
 800643e:	9207      	str	r2, [sp, #28]
 8006440:	e004      	b.n	800644c <_vfiprintf_r+0x128>
 8006442:	4252      	negs	r2, r2
 8006444:	f043 0302 	orr.w	r3, r3, #2
 8006448:	9207      	str	r2, [sp, #28]
 800644a:	9304      	str	r3, [sp, #16]
 800644c:	f898 3000 	ldrb.w	r3, [r8]
 8006450:	2b2e      	cmp	r3, #46	; 0x2e
 8006452:	d10e      	bne.n	8006472 <_vfiprintf_r+0x14e>
 8006454:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006458:	2b2a      	cmp	r3, #42	; 0x2a
 800645a:	d138      	bne.n	80064ce <_vfiprintf_r+0x1aa>
 800645c:	9b03      	ldr	r3, [sp, #12]
 800645e:	1d1a      	adds	r2, r3, #4
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	9203      	str	r2, [sp, #12]
 8006464:	2b00      	cmp	r3, #0
 8006466:	bfb8      	it	lt
 8006468:	f04f 33ff 	movlt.w	r3, #4294967295
 800646c:	f108 0802 	add.w	r8, r8, #2
 8006470:	9305      	str	r3, [sp, #20]
 8006472:	4d33      	ldr	r5, [pc, #204]	; (8006540 <_vfiprintf_r+0x21c>)
 8006474:	f898 1000 	ldrb.w	r1, [r8]
 8006478:	2203      	movs	r2, #3
 800647a:	4628      	mov	r0, r5
 800647c:	f7f9 fec8 	bl	8000210 <memchr>
 8006480:	b140      	cbz	r0, 8006494 <_vfiprintf_r+0x170>
 8006482:	2340      	movs	r3, #64	; 0x40
 8006484:	1b40      	subs	r0, r0, r5
 8006486:	fa03 f000 	lsl.w	r0, r3, r0
 800648a:	9b04      	ldr	r3, [sp, #16]
 800648c:	4303      	orrs	r3, r0
 800648e:	f108 0801 	add.w	r8, r8, #1
 8006492:	9304      	str	r3, [sp, #16]
 8006494:	f898 1000 	ldrb.w	r1, [r8]
 8006498:	482a      	ldr	r0, [pc, #168]	; (8006544 <_vfiprintf_r+0x220>)
 800649a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800649e:	2206      	movs	r2, #6
 80064a0:	f108 0701 	add.w	r7, r8, #1
 80064a4:	f7f9 feb4 	bl	8000210 <memchr>
 80064a8:	2800      	cmp	r0, #0
 80064aa:	d037      	beq.n	800651c <_vfiprintf_r+0x1f8>
 80064ac:	4b26      	ldr	r3, [pc, #152]	; (8006548 <_vfiprintf_r+0x224>)
 80064ae:	bb1b      	cbnz	r3, 80064f8 <_vfiprintf_r+0x1d4>
 80064b0:	9b03      	ldr	r3, [sp, #12]
 80064b2:	3307      	adds	r3, #7
 80064b4:	f023 0307 	bic.w	r3, r3, #7
 80064b8:	3308      	adds	r3, #8
 80064ba:	9303      	str	r3, [sp, #12]
 80064bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064be:	444b      	add	r3, r9
 80064c0:	9309      	str	r3, [sp, #36]	; 0x24
 80064c2:	e750      	b.n	8006366 <_vfiprintf_r+0x42>
 80064c4:	fb05 3202 	mla	r2, r5, r2, r3
 80064c8:	2001      	movs	r0, #1
 80064ca:	4688      	mov	r8, r1
 80064cc:	e78a      	b.n	80063e4 <_vfiprintf_r+0xc0>
 80064ce:	2300      	movs	r3, #0
 80064d0:	f108 0801 	add.w	r8, r8, #1
 80064d4:	9305      	str	r3, [sp, #20]
 80064d6:	4619      	mov	r1, r3
 80064d8:	250a      	movs	r5, #10
 80064da:	4640      	mov	r0, r8
 80064dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064e0:	3a30      	subs	r2, #48	; 0x30
 80064e2:	2a09      	cmp	r2, #9
 80064e4:	d903      	bls.n	80064ee <_vfiprintf_r+0x1ca>
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d0c3      	beq.n	8006472 <_vfiprintf_r+0x14e>
 80064ea:	9105      	str	r1, [sp, #20]
 80064ec:	e7c1      	b.n	8006472 <_vfiprintf_r+0x14e>
 80064ee:	fb05 2101 	mla	r1, r5, r1, r2
 80064f2:	2301      	movs	r3, #1
 80064f4:	4680      	mov	r8, r0
 80064f6:	e7f0      	b.n	80064da <_vfiprintf_r+0x1b6>
 80064f8:	ab03      	add	r3, sp, #12
 80064fa:	9300      	str	r3, [sp, #0]
 80064fc:	4622      	mov	r2, r4
 80064fe:	4b13      	ldr	r3, [pc, #76]	; (800654c <_vfiprintf_r+0x228>)
 8006500:	a904      	add	r1, sp, #16
 8006502:	4630      	mov	r0, r6
 8006504:	f7fe f844 	bl	8004590 <_printf_float>
 8006508:	f1b0 3fff 	cmp.w	r0, #4294967295
 800650c:	4681      	mov	r9, r0
 800650e:	d1d5      	bne.n	80064bc <_vfiprintf_r+0x198>
 8006510:	89a3      	ldrh	r3, [r4, #12]
 8006512:	065b      	lsls	r3, r3, #25
 8006514:	f53f af7e 	bmi.w	8006414 <_vfiprintf_r+0xf0>
 8006518:	9809      	ldr	r0, [sp, #36]	; 0x24
 800651a:	e77d      	b.n	8006418 <_vfiprintf_r+0xf4>
 800651c:	ab03      	add	r3, sp, #12
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	4622      	mov	r2, r4
 8006522:	4b0a      	ldr	r3, [pc, #40]	; (800654c <_vfiprintf_r+0x228>)
 8006524:	a904      	add	r1, sp, #16
 8006526:	4630      	mov	r0, r6
 8006528:	f7fe fae8 	bl	8004afc <_printf_i>
 800652c:	e7ec      	b.n	8006508 <_vfiprintf_r+0x1e4>
 800652e:	bf00      	nop
 8006530:	08007db4 	.word	0x08007db4
 8006534:	08007ef4 	.word	0x08007ef4
 8006538:	08007dd4 	.word	0x08007dd4
 800653c:	08007d94 	.word	0x08007d94
 8006540:	08007efa 	.word	0x08007efa
 8006544:	08007efe 	.word	0x08007efe
 8006548:	08004591 	.word	0x08004591
 800654c:	080062ff 	.word	0x080062ff

08006550 <_sbrk_r>:
 8006550:	b538      	push	{r3, r4, r5, lr}
 8006552:	4c06      	ldr	r4, [pc, #24]	; (800656c <_sbrk_r+0x1c>)
 8006554:	2300      	movs	r3, #0
 8006556:	4605      	mov	r5, r0
 8006558:	4608      	mov	r0, r1
 800655a:	6023      	str	r3, [r4, #0]
 800655c:	f7fb fa72 	bl	8001a44 <_sbrk>
 8006560:	1c43      	adds	r3, r0, #1
 8006562:	d102      	bne.n	800656a <_sbrk_r+0x1a>
 8006564:	6823      	ldr	r3, [r4, #0]
 8006566:	b103      	cbz	r3, 800656a <_sbrk_r+0x1a>
 8006568:	602b      	str	r3, [r5, #0]
 800656a:	bd38      	pop	{r3, r4, r5, pc}
 800656c:	200003ec 	.word	0x200003ec

08006570 <__sread>:
 8006570:	b510      	push	{r4, lr}
 8006572:	460c      	mov	r4, r1
 8006574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006578:	f000 fa5a 	bl	8006a30 <_read_r>
 800657c:	2800      	cmp	r0, #0
 800657e:	bfab      	itete	ge
 8006580:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006582:	89a3      	ldrhlt	r3, [r4, #12]
 8006584:	181b      	addge	r3, r3, r0
 8006586:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800658a:	bfac      	ite	ge
 800658c:	6563      	strge	r3, [r4, #84]	; 0x54
 800658e:	81a3      	strhlt	r3, [r4, #12]
 8006590:	bd10      	pop	{r4, pc}

08006592 <__swrite>:
 8006592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006596:	461f      	mov	r7, r3
 8006598:	898b      	ldrh	r3, [r1, #12]
 800659a:	05db      	lsls	r3, r3, #23
 800659c:	4605      	mov	r5, r0
 800659e:	460c      	mov	r4, r1
 80065a0:	4616      	mov	r6, r2
 80065a2:	d505      	bpl.n	80065b0 <__swrite+0x1e>
 80065a4:	2302      	movs	r3, #2
 80065a6:	2200      	movs	r2, #0
 80065a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065ac:	f000 f9b6 	bl	800691c <_lseek_r>
 80065b0:	89a3      	ldrh	r3, [r4, #12]
 80065b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065ba:	81a3      	strh	r3, [r4, #12]
 80065bc:	4632      	mov	r2, r6
 80065be:	463b      	mov	r3, r7
 80065c0:	4628      	mov	r0, r5
 80065c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065c6:	f000 b869 	b.w	800669c <_write_r>

080065ca <__sseek>:
 80065ca:	b510      	push	{r4, lr}
 80065cc:	460c      	mov	r4, r1
 80065ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065d2:	f000 f9a3 	bl	800691c <_lseek_r>
 80065d6:	1c43      	adds	r3, r0, #1
 80065d8:	89a3      	ldrh	r3, [r4, #12]
 80065da:	bf15      	itete	ne
 80065dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80065de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80065e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80065e6:	81a3      	strheq	r3, [r4, #12]
 80065e8:	bf18      	it	ne
 80065ea:	81a3      	strhne	r3, [r4, #12]
 80065ec:	bd10      	pop	{r4, pc}

080065ee <__sclose>:
 80065ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065f2:	f000 b8d3 	b.w	800679c <_close_r>
	...

080065f8 <__swbuf_r>:
 80065f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065fa:	460e      	mov	r6, r1
 80065fc:	4614      	mov	r4, r2
 80065fe:	4605      	mov	r5, r0
 8006600:	b118      	cbz	r0, 800660a <__swbuf_r+0x12>
 8006602:	6983      	ldr	r3, [r0, #24]
 8006604:	b90b      	cbnz	r3, 800660a <__swbuf_r+0x12>
 8006606:	f7ff fa27 	bl	8005a58 <__sinit>
 800660a:	4b21      	ldr	r3, [pc, #132]	; (8006690 <__swbuf_r+0x98>)
 800660c:	429c      	cmp	r4, r3
 800660e:	d12a      	bne.n	8006666 <__swbuf_r+0x6e>
 8006610:	686c      	ldr	r4, [r5, #4]
 8006612:	69a3      	ldr	r3, [r4, #24]
 8006614:	60a3      	str	r3, [r4, #8]
 8006616:	89a3      	ldrh	r3, [r4, #12]
 8006618:	071a      	lsls	r2, r3, #28
 800661a:	d52e      	bpl.n	800667a <__swbuf_r+0x82>
 800661c:	6923      	ldr	r3, [r4, #16]
 800661e:	b363      	cbz	r3, 800667a <__swbuf_r+0x82>
 8006620:	6923      	ldr	r3, [r4, #16]
 8006622:	6820      	ldr	r0, [r4, #0]
 8006624:	1ac0      	subs	r0, r0, r3
 8006626:	6963      	ldr	r3, [r4, #20]
 8006628:	b2f6      	uxtb	r6, r6
 800662a:	4283      	cmp	r3, r0
 800662c:	4637      	mov	r7, r6
 800662e:	dc04      	bgt.n	800663a <__swbuf_r+0x42>
 8006630:	4621      	mov	r1, r4
 8006632:	4628      	mov	r0, r5
 8006634:	f000 f948 	bl	80068c8 <_fflush_r>
 8006638:	bb28      	cbnz	r0, 8006686 <__swbuf_r+0x8e>
 800663a:	68a3      	ldr	r3, [r4, #8]
 800663c:	3b01      	subs	r3, #1
 800663e:	60a3      	str	r3, [r4, #8]
 8006640:	6823      	ldr	r3, [r4, #0]
 8006642:	1c5a      	adds	r2, r3, #1
 8006644:	6022      	str	r2, [r4, #0]
 8006646:	701e      	strb	r6, [r3, #0]
 8006648:	6963      	ldr	r3, [r4, #20]
 800664a:	3001      	adds	r0, #1
 800664c:	4283      	cmp	r3, r0
 800664e:	d004      	beq.n	800665a <__swbuf_r+0x62>
 8006650:	89a3      	ldrh	r3, [r4, #12]
 8006652:	07db      	lsls	r3, r3, #31
 8006654:	d519      	bpl.n	800668a <__swbuf_r+0x92>
 8006656:	2e0a      	cmp	r6, #10
 8006658:	d117      	bne.n	800668a <__swbuf_r+0x92>
 800665a:	4621      	mov	r1, r4
 800665c:	4628      	mov	r0, r5
 800665e:	f000 f933 	bl	80068c8 <_fflush_r>
 8006662:	b190      	cbz	r0, 800668a <__swbuf_r+0x92>
 8006664:	e00f      	b.n	8006686 <__swbuf_r+0x8e>
 8006666:	4b0b      	ldr	r3, [pc, #44]	; (8006694 <__swbuf_r+0x9c>)
 8006668:	429c      	cmp	r4, r3
 800666a:	d101      	bne.n	8006670 <__swbuf_r+0x78>
 800666c:	68ac      	ldr	r4, [r5, #8]
 800666e:	e7d0      	b.n	8006612 <__swbuf_r+0x1a>
 8006670:	4b09      	ldr	r3, [pc, #36]	; (8006698 <__swbuf_r+0xa0>)
 8006672:	429c      	cmp	r4, r3
 8006674:	bf08      	it	eq
 8006676:	68ec      	ldreq	r4, [r5, #12]
 8006678:	e7cb      	b.n	8006612 <__swbuf_r+0x1a>
 800667a:	4621      	mov	r1, r4
 800667c:	4628      	mov	r0, r5
 800667e:	f000 f81f 	bl	80066c0 <__swsetup_r>
 8006682:	2800      	cmp	r0, #0
 8006684:	d0cc      	beq.n	8006620 <__swbuf_r+0x28>
 8006686:	f04f 37ff 	mov.w	r7, #4294967295
 800668a:	4638      	mov	r0, r7
 800668c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800668e:	bf00      	nop
 8006690:	08007db4 	.word	0x08007db4
 8006694:	08007dd4 	.word	0x08007dd4
 8006698:	08007d94 	.word	0x08007d94

0800669c <_write_r>:
 800669c:	b538      	push	{r3, r4, r5, lr}
 800669e:	4c07      	ldr	r4, [pc, #28]	; (80066bc <_write_r+0x20>)
 80066a0:	4605      	mov	r5, r0
 80066a2:	4608      	mov	r0, r1
 80066a4:	4611      	mov	r1, r2
 80066a6:	2200      	movs	r2, #0
 80066a8:	6022      	str	r2, [r4, #0]
 80066aa:	461a      	mov	r2, r3
 80066ac:	f7fb f979 	bl	80019a2 <_write>
 80066b0:	1c43      	adds	r3, r0, #1
 80066b2:	d102      	bne.n	80066ba <_write_r+0x1e>
 80066b4:	6823      	ldr	r3, [r4, #0]
 80066b6:	b103      	cbz	r3, 80066ba <_write_r+0x1e>
 80066b8:	602b      	str	r3, [r5, #0]
 80066ba:	bd38      	pop	{r3, r4, r5, pc}
 80066bc:	200003ec 	.word	0x200003ec

080066c0 <__swsetup_r>:
 80066c0:	4b32      	ldr	r3, [pc, #200]	; (800678c <__swsetup_r+0xcc>)
 80066c2:	b570      	push	{r4, r5, r6, lr}
 80066c4:	681d      	ldr	r5, [r3, #0]
 80066c6:	4606      	mov	r6, r0
 80066c8:	460c      	mov	r4, r1
 80066ca:	b125      	cbz	r5, 80066d6 <__swsetup_r+0x16>
 80066cc:	69ab      	ldr	r3, [r5, #24]
 80066ce:	b913      	cbnz	r3, 80066d6 <__swsetup_r+0x16>
 80066d0:	4628      	mov	r0, r5
 80066d2:	f7ff f9c1 	bl	8005a58 <__sinit>
 80066d6:	4b2e      	ldr	r3, [pc, #184]	; (8006790 <__swsetup_r+0xd0>)
 80066d8:	429c      	cmp	r4, r3
 80066da:	d10f      	bne.n	80066fc <__swsetup_r+0x3c>
 80066dc:	686c      	ldr	r4, [r5, #4]
 80066de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	0715      	lsls	r5, r2, #28
 80066e6:	d42c      	bmi.n	8006742 <__swsetup_r+0x82>
 80066e8:	06d0      	lsls	r0, r2, #27
 80066ea:	d411      	bmi.n	8006710 <__swsetup_r+0x50>
 80066ec:	2209      	movs	r2, #9
 80066ee:	6032      	str	r2, [r6, #0]
 80066f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066f4:	81a3      	strh	r3, [r4, #12]
 80066f6:	f04f 30ff 	mov.w	r0, #4294967295
 80066fa:	e03e      	b.n	800677a <__swsetup_r+0xba>
 80066fc:	4b25      	ldr	r3, [pc, #148]	; (8006794 <__swsetup_r+0xd4>)
 80066fe:	429c      	cmp	r4, r3
 8006700:	d101      	bne.n	8006706 <__swsetup_r+0x46>
 8006702:	68ac      	ldr	r4, [r5, #8]
 8006704:	e7eb      	b.n	80066de <__swsetup_r+0x1e>
 8006706:	4b24      	ldr	r3, [pc, #144]	; (8006798 <__swsetup_r+0xd8>)
 8006708:	429c      	cmp	r4, r3
 800670a:	bf08      	it	eq
 800670c:	68ec      	ldreq	r4, [r5, #12]
 800670e:	e7e6      	b.n	80066de <__swsetup_r+0x1e>
 8006710:	0751      	lsls	r1, r2, #29
 8006712:	d512      	bpl.n	800673a <__swsetup_r+0x7a>
 8006714:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006716:	b141      	cbz	r1, 800672a <__swsetup_r+0x6a>
 8006718:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800671c:	4299      	cmp	r1, r3
 800671e:	d002      	beq.n	8006726 <__swsetup_r+0x66>
 8006720:	4630      	mov	r0, r6
 8006722:	f7ff fd2d 	bl	8006180 <_free_r>
 8006726:	2300      	movs	r3, #0
 8006728:	6363      	str	r3, [r4, #52]	; 0x34
 800672a:	89a3      	ldrh	r3, [r4, #12]
 800672c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006730:	81a3      	strh	r3, [r4, #12]
 8006732:	2300      	movs	r3, #0
 8006734:	6063      	str	r3, [r4, #4]
 8006736:	6923      	ldr	r3, [r4, #16]
 8006738:	6023      	str	r3, [r4, #0]
 800673a:	89a3      	ldrh	r3, [r4, #12]
 800673c:	f043 0308 	orr.w	r3, r3, #8
 8006740:	81a3      	strh	r3, [r4, #12]
 8006742:	6923      	ldr	r3, [r4, #16]
 8006744:	b94b      	cbnz	r3, 800675a <__swsetup_r+0x9a>
 8006746:	89a3      	ldrh	r3, [r4, #12]
 8006748:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800674c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006750:	d003      	beq.n	800675a <__swsetup_r+0x9a>
 8006752:	4621      	mov	r1, r4
 8006754:	4630      	mov	r0, r6
 8006756:	f000 f917 	bl	8006988 <__smakebuf_r>
 800675a:	89a2      	ldrh	r2, [r4, #12]
 800675c:	f012 0301 	ands.w	r3, r2, #1
 8006760:	d00c      	beq.n	800677c <__swsetup_r+0xbc>
 8006762:	2300      	movs	r3, #0
 8006764:	60a3      	str	r3, [r4, #8]
 8006766:	6963      	ldr	r3, [r4, #20]
 8006768:	425b      	negs	r3, r3
 800676a:	61a3      	str	r3, [r4, #24]
 800676c:	6923      	ldr	r3, [r4, #16]
 800676e:	b953      	cbnz	r3, 8006786 <__swsetup_r+0xc6>
 8006770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006774:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006778:	d1ba      	bne.n	80066f0 <__swsetup_r+0x30>
 800677a:	bd70      	pop	{r4, r5, r6, pc}
 800677c:	0792      	lsls	r2, r2, #30
 800677e:	bf58      	it	pl
 8006780:	6963      	ldrpl	r3, [r4, #20]
 8006782:	60a3      	str	r3, [r4, #8]
 8006784:	e7f2      	b.n	800676c <__swsetup_r+0xac>
 8006786:	2000      	movs	r0, #0
 8006788:	e7f7      	b.n	800677a <__swsetup_r+0xba>
 800678a:	bf00      	nop
 800678c:	200001a0 	.word	0x200001a0
 8006790:	08007db4 	.word	0x08007db4
 8006794:	08007dd4 	.word	0x08007dd4
 8006798:	08007d94 	.word	0x08007d94

0800679c <_close_r>:
 800679c:	b538      	push	{r3, r4, r5, lr}
 800679e:	4c06      	ldr	r4, [pc, #24]	; (80067b8 <_close_r+0x1c>)
 80067a0:	2300      	movs	r3, #0
 80067a2:	4605      	mov	r5, r0
 80067a4:	4608      	mov	r0, r1
 80067a6:	6023      	str	r3, [r4, #0]
 80067a8:	f7fb f917 	bl	80019da <_close>
 80067ac:	1c43      	adds	r3, r0, #1
 80067ae:	d102      	bne.n	80067b6 <_close_r+0x1a>
 80067b0:	6823      	ldr	r3, [r4, #0]
 80067b2:	b103      	cbz	r3, 80067b6 <_close_r+0x1a>
 80067b4:	602b      	str	r3, [r5, #0]
 80067b6:	bd38      	pop	{r3, r4, r5, pc}
 80067b8:	200003ec 	.word	0x200003ec

080067bc <__sflush_r>:
 80067bc:	898a      	ldrh	r2, [r1, #12]
 80067be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067c2:	4605      	mov	r5, r0
 80067c4:	0710      	lsls	r0, r2, #28
 80067c6:	460c      	mov	r4, r1
 80067c8:	d458      	bmi.n	800687c <__sflush_r+0xc0>
 80067ca:	684b      	ldr	r3, [r1, #4]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	dc05      	bgt.n	80067dc <__sflush_r+0x20>
 80067d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	dc02      	bgt.n	80067dc <__sflush_r+0x20>
 80067d6:	2000      	movs	r0, #0
 80067d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067de:	2e00      	cmp	r6, #0
 80067e0:	d0f9      	beq.n	80067d6 <__sflush_r+0x1a>
 80067e2:	2300      	movs	r3, #0
 80067e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80067e8:	682f      	ldr	r7, [r5, #0]
 80067ea:	6a21      	ldr	r1, [r4, #32]
 80067ec:	602b      	str	r3, [r5, #0]
 80067ee:	d032      	beq.n	8006856 <__sflush_r+0x9a>
 80067f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80067f2:	89a3      	ldrh	r3, [r4, #12]
 80067f4:	075a      	lsls	r2, r3, #29
 80067f6:	d505      	bpl.n	8006804 <__sflush_r+0x48>
 80067f8:	6863      	ldr	r3, [r4, #4]
 80067fa:	1ac0      	subs	r0, r0, r3
 80067fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80067fe:	b10b      	cbz	r3, 8006804 <__sflush_r+0x48>
 8006800:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006802:	1ac0      	subs	r0, r0, r3
 8006804:	2300      	movs	r3, #0
 8006806:	4602      	mov	r2, r0
 8006808:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800680a:	6a21      	ldr	r1, [r4, #32]
 800680c:	4628      	mov	r0, r5
 800680e:	47b0      	blx	r6
 8006810:	1c43      	adds	r3, r0, #1
 8006812:	89a3      	ldrh	r3, [r4, #12]
 8006814:	d106      	bne.n	8006824 <__sflush_r+0x68>
 8006816:	6829      	ldr	r1, [r5, #0]
 8006818:	291d      	cmp	r1, #29
 800681a:	d848      	bhi.n	80068ae <__sflush_r+0xf2>
 800681c:	4a29      	ldr	r2, [pc, #164]	; (80068c4 <__sflush_r+0x108>)
 800681e:	40ca      	lsrs	r2, r1
 8006820:	07d6      	lsls	r6, r2, #31
 8006822:	d544      	bpl.n	80068ae <__sflush_r+0xf2>
 8006824:	2200      	movs	r2, #0
 8006826:	6062      	str	r2, [r4, #4]
 8006828:	04d9      	lsls	r1, r3, #19
 800682a:	6922      	ldr	r2, [r4, #16]
 800682c:	6022      	str	r2, [r4, #0]
 800682e:	d504      	bpl.n	800683a <__sflush_r+0x7e>
 8006830:	1c42      	adds	r2, r0, #1
 8006832:	d101      	bne.n	8006838 <__sflush_r+0x7c>
 8006834:	682b      	ldr	r3, [r5, #0]
 8006836:	b903      	cbnz	r3, 800683a <__sflush_r+0x7e>
 8006838:	6560      	str	r0, [r4, #84]	; 0x54
 800683a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800683c:	602f      	str	r7, [r5, #0]
 800683e:	2900      	cmp	r1, #0
 8006840:	d0c9      	beq.n	80067d6 <__sflush_r+0x1a>
 8006842:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006846:	4299      	cmp	r1, r3
 8006848:	d002      	beq.n	8006850 <__sflush_r+0x94>
 800684a:	4628      	mov	r0, r5
 800684c:	f7ff fc98 	bl	8006180 <_free_r>
 8006850:	2000      	movs	r0, #0
 8006852:	6360      	str	r0, [r4, #52]	; 0x34
 8006854:	e7c0      	b.n	80067d8 <__sflush_r+0x1c>
 8006856:	2301      	movs	r3, #1
 8006858:	4628      	mov	r0, r5
 800685a:	47b0      	blx	r6
 800685c:	1c41      	adds	r1, r0, #1
 800685e:	d1c8      	bne.n	80067f2 <__sflush_r+0x36>
 8006860:	682b      	ldr	r3, [r5, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d0c5      	beq.n	80067f2 <__sflush_r+0x36>
 8006866:	2b1d      	cmp	r3, #29
 8006868:	d001      	beq.n	800686e <__sflush_r+0xb2>
 800686a:	2b16      	cmp	r3, #22
 800686c:	d101      	bne.n	8006872 <__sflush_r+0xb6>
 800686e:	602f      	str	r7, [r5, #0]
 8006870:	e7b1      	b.n	80067d6 <__sflush_r+0x1a>
 8006872:	89a3      	ldrh	r3, [r4, #12]
 8006874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006878:	81a3      	strh	r3, [r4, #12]
 800687a:	e7ad      	b.n	80067d8 <__sflush_r+0x1c>
 800687c:	690f      	ldr	r7, [r1, #16]
 800687e:	2f00      	cmp	r7, #0
 8006880:	d0a9      	beq.n	80067d6 <__sflush_r+0x1a>
 8006882:	0793      	lsls	r3, r2, #30
 8006884:	680e      	ldr	r6, [r1, #0]
 8006886:	bf08      	it	eq
 8006888:	694b      	ldreq	r3, [r1, #20]
 800688a:	600f      	str	r7, [r1, #0]
 800688c:	bf18      	it	ne
 800688e:	2300      	movne	r3, #0
 8006890:	eba6 0807 	sub.w	r8, r6, r7
 8006894:	608b      	str	r3, [r1, #8]
 8006896:	f1b8 0f00 	cmp.w	r8, #0
 800689a:	dd9c      	ble.n	80067d6 <__sflush_r+0x1a>
 800689c:	4643      	mov	r3, r8
 800689e:	463a      	mov	r2, r7
 80068a0:	6a21      	ldr	r1, [r4, #32]
 80068a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80068a4:	4628      	mov	r0, r5
 80068a6:	47b0      	blx	r6
 80068a8:	2800      	cmp	r0, #0
 80068aa:	dc06      	bgt.n	80068ba <__sflush_r+0xfe>
 80068ac:	89a3      	ldrh	r3, [r4, #12]
 80068ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068b2:	81a3      	strh	r3, [r4, #12]
 80068b4:	f04f 30ff 	mov.w	r0, #4294967295
 80068b8:	e78e      	b.n	80067d8 <__sflush_r+0x1c>
 80068ba:	4407      	add	r7, r0
 80068bc:	eba8 0800 	sub.w	r8, r8, r0
 80068c0:	e7e9      	b.n	8006896 <__sflush_r+0xda>
 80068c2:	bf00      	nop
 80068c4:	20400001 	.word	0x20400001

080068c8 <_fflush_r>:
 80068c8:	b538      	push	{r3, r4, r5, lr}
 80068ca:	690b      	ldr	r3, [r1, #16]
 80068cc:	4605      	mov	r5, r0
 80068ce:	460c      	mov	r4, r1
 80068d0:	b1db      	cbz	r3, 800690a <_fflush_r+0x42>
 80068d2:	b118      	cbz	r0, 80068dc <_fflush_r+0x14>
 80068d4:	6983      	ldr	r3, [r0, #24]
 80068d6:	b90b      	cbnz	r3, 80068dc <_fflush_r+0x14>
 80068d8:	f7ff f8be 	bl	8005a58 <__sinit>
 80068dc:	4b0c      	ldr	r3, [pc, #48]	; (8006910 <_fflush_r+0x48>)
 80068de:	429c      	cmp	r4, r3
 80068e0:	d109      	bne.n	80068f6 <_fflush_r+0x2e>
 80068e2:	686c      	ldr	r4, [r5, #4]
 80068e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068e8:	b17b      	cbz	r3, 800690a <_fflush_r+0x42>
 80068ea:	4621      	mov	r1, r4
 80068ec:	4628      	mov	r0, r5
 80068ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068f2:	f7ff bf63 	b.w	80067bc <__sflush_r>
 80068f6:	4b07      	ldr	r3, [pc, #28]	; (8006914 <_fflush_r+0x4c>)
 80068f8:	429c      	cmp	r4, r3
 80068fa:	d101      	bne.n	8006900 <_fflush_r+0x38>
 80068fc:	68ac      	ldr	r4, [r5, #8]
 80068fe:	e7f1      	b.n	80068e4 <_fflush_r+0x1c>
 8006900:	4b05      	ldr	r3, [pc, #20]	; (8006918 <_fflush_r+0x50>)
 8006902:	429c      	cmp	r4, r3
 8006904:	bf08      	it	eq
 8006906:	68ec      	ldreq	r4, [r5, #12]
 8006908:	e7ec      	b.n	80068e4 <_fflush_r+0x1c>
 800690a:	2000      	movs	r0, #0
 800690c:	bd38      	pop	{r3, r4, r5, pc}
 800690e:	bf00      	nop
 8006910:	08007db4 	.word	0x08007db4
 8006914:	08007dd4 	.word	0x08007dd4
 8006918:	08007d94 	.word	0x08007d94

0800691c <_lseek_r>:
 800691c:	b538      	push	{r3, r4, r5, lr}
 800691e:	4c07      	ldr	r4, [pc, #28]	; (800693c <_lseek_r+0x20>)
 8006920:	4605      	mov	r5, r0
 8006922:	4608      	mov	r0, r1
 8006924:	4611      	mov	r1, r2
 8006926:	2200      	movs	r2, #0
 8006928:	6022      	str	r2, [r4, #0]
 800692a:	461a      	mov	r2, r3
 800692c:	f7fb f87c 	bl	8001a28 <_lseek>
 8006930:	1c43      	adds	r3, r0, #1
 8006932:	d102      	bne.n	800693a <_lseek_r+0x1e>
 8006934:	6823      	ldr	r3, [r4, #0]
 8006936:	b103      	cbz	r3, 800693a <_lseek_r+0x1e>
 8006938:	602b      	str	r3, [r5, #0]
 800693a:	bd38      	pop	{r3, r4, r5, pc}
 800693c:	200003ec 	.word	0x200003ec

08006940 <__swhatbuf_r>:
 8006940:	b570      	push	{r4, r5, r6, lr}
 8006942:	460e      	mov	r6, r1
 8006944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006948:	2900      	cmp	r1, #0
 800694a:	b096      	sub	sp, #88	; 0x58
 800694c:	4614      	mov	r4, r2
 800694e:	461d      	mov	r5, r3
 8006950:	da07      	bge.n	8006962 <__swhatbuf_r+0x22>
 8006952:	2300      	movs	r3, #0
 8006954:	602b      	str	r3, [r5, #0]
 8006956:	89b3      	ldrh	r3, [r6, #12]
 8006958:	061a      	lsls	r2, r3, #24
 800695a:	d410      	bmi.n	800697e <__swhatbuf_r+0x3e>
 800695c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006960:	e00e      	b.n	8006980 <__swhatbuf_r+0x40>
 8006962:	466a      	mov	r2, sp
 8006964:	f000 f884 	bl	8006a70 <_fstat_r>
 8006968:	2800      	cmp	r0, #0
 800696a:	dbf2      	blt.n	8006952 <__swhatbuf_r+0x12>
 800696c:	9a01      	ldr	r2, [sp, #4]
 800696e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006972:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006976:	425a      	negs	r2, r3
 8006978:	415a      	adcs	r2, r3
 800697a:	602a      	str	r2, [r5, #0]
 800697c:	e7ee      	b.n	800695c <__swhatbuf_r+0x1c>
 800697e:	2340      	movs	r3, #64	; 0x40
 8006980:	2000      	movs	r0, #0
 8006982:	6023      	str	r3, [r4, #0]
 8006984:	b016      	add	sp, #88	; 0x58
 8006986:	bd70      	pop	{r4, r5, r6, pc}

08006988 <__smakebuf_r>:
 8006988:	898b      	ldrh	r3, [r1, #12]
 800698a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800698c:	079d      	lsls	r5, r3, #30
 800698e:	4606      	mov	r6, r0
 8006990:	460c      	mov	r4, r1
 8006992:	d507      	bpl.n	80069a4 <__smakebuf_r+0x1c>
 8006994:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006998:	6023      	str	r3, [r4, #0]
 800699a:	6123      	str	r3, [r4, #16]
 800699c:	2301      	movs	r3, #1
 800699e:	6163      	str	r3, [r4, #20]
 80069a0:	b002      	add	sp, #8
 80069a2:	bd70      	pop	{r4, r5, r6, pc}
 80069a4:	ab01      	add	r3, sp, #4
 80069a6:	466a      	mov	r2, sp
 80069a8:	f7ff ffca 	bl	8006940 <__swhatbuf_r>
 80069ac:	9900      	ldr	r1, [sp, #0]
 80069ae:	4605      	mov	r5, r0
 80069b0:	4630      	mov	r0, r6
 80069b2:	f7ff fc33 	bl	800621c <_malloc_r>
 80069b6:	b948      	cbnz	r0, 80069cc <__smakebuf_r+0x44>
 80069b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069bc:	059a      	lsls	r2, r3, #22
 80069be:	d4ef      	bmi.n	80069a0 <__smakebuf_r+0x18>
 80069c0:	f023 0303 	bic.w	r3, r3, #3
 80069c4:	f043 0302 	orr.w	r3, r3, #2
 80069c8:	81a3      	strh	r3, [r4, #12]
 80069ca:	e7e3      	b.n	8006994 <__smakebuf_r+0xc>
 80069cc:	4b0d      	ldr	r3, [pc, #52]	; (8006a04 <__smakebuf_r+0x7c>)
 80069ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80069d0:	89a3      	ldrh	r3, [r4, #12]
 80069d2:	6020      	str	r0, [r4, #0]
 80069d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069d8:	81a3      	strh	r3, [r4, #12]
 80069da:	9b00      	ldr	r3, [sp, #0]
 80069dc:	6163      	str	r3, [r4, #20]
 80069de:	9b01      	ldr	r3, [sp, #4]
 80069e0:	6120      	str	r0, [r4, #16]
 80069e2:	b15b      	cbz	r3, 80069fc <__smakebuf_r+0x74>
 80069e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069e8:	4630      	mov	r0, r6
 80069ea:	f000 f853 	bl	8006a94 <_isatty_r>
 80069ee:	b128      	cbz	r0, 80069fc <__smakebuf_r+0x74>
 80069f0:	89a3      	ldrh	r3, [r4, #12]
 80069f2:	f023 0303 	bic.w	r3, r3, #3
 80069f6:	f043 0301 	orr.w	r3, r3, #1
 80069fa:	81a3      	strh	r3, [r4, #12]
 80069fc:	89a3      	ldrh	r3, [r4, #12]
 80069fe:	431d      	orrs	r5, r3
 8006a00:	81a5      	strh	r5, [r4, #12]
 8006a02:	e7cd      	b.n	80069a0 <__smakebuf_r+0x18>
 8006a04:	08005a21 	.word	0x08005a21

08006a08 <__ascii_mbtowc>:
 8006a08:	b082      	sub	sp, #8
 8006a0a:	b901      	cbnz	r1, 8006a0e <__ascii_mbtowc+0x6>
 8006a0c:	a901      	add	r1, sp, #4
 8006a0e:	b142      	cbz	r2, 8006a22 <__ascii_mbtowc+0x1a>
 8006a10:	b14b      	cbz	r3, 8006a26 <__ascii_mbtowc+0x1e>
 8006a12:	7813      	ldrb	r3, [r2, #0]
 8006a14:	600b      	str	r3, [r1, #0]
 8006a16:	7812      	ldrb	r2, [r2, #0]
 8006a18:	1c10      	adds	r0, r2, #0
 8006a1a:	bf18      	it	ne
 8006a1c:	2001      	movne	r0, #1
 8006a1e:	b002      	add	sp, #8
 8006a20:	4770      	bx	lr
 8006a22:	4610      	mov	r0, r2
 8006a24:	e7fb      	b.n	8006a1e <__ascii_mbtowc+0x16>
 8006a26:	f06f 0001 	mvn.w	r0, #1
 8006a2a:	e7f8      	b.n	8006a1e <__ascii_mbtowc+0x16>

08006a2c <__malloc_lock>:
 8006a2c:	4770      	bx	lr

08006a2e <__malloc_unlock>:
 8006a2e:	4770      	bx	lr

08006a30 <_read_r>:
 8006a30:	b538      	push	{r3, r4, r5, lr}
 8006a32:	4c07      	ldr	r4, [pc, #28]	; (8006a50 <_read_r+0x20>)
 8006a34:	4605      	mov	r5, r0
 8006a36:	4608      	mov	r0, r1
 8006a38:	4611      	mov	r1, r2
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	6022      	str	r2, [r4, #0]
 8006a3e:	461a      	mov	r2, r3
 8006a40:	f7fa ff92 	bl	8001968 <_read>
 8006a44:	1c43      	adds	r3, r0, #1
 8006a46:	d102      	bne.n	8006a4e <_read_r+0x1e>
 8006a48:	6823      	ldr	r3, [r4, #0]
 8006a4a:	b103      	cbz	r3, 8006a4e <_read_r+0x1e>
 8006a4c:	602b      	str	r3, [r5, #0]
 8006a4e:	bd38      	pop	{r3, r4, r5, pc}
 8006a50:	200003ec 	.word	0x200003ec

08006a54 <__ascii_wctomb>:
 8006a54:	b149      	cbz	r1, 8006a6a <__ascii_wctomb+0x16>
 8006a56:	2aff      	cmp	r2, #255	; 0xff
 8006a58:	bf85      	ittet	hi
 8006a5a:	238a      	movhi	r3, #138	; 0x8a
 8006a5c:	6003      	strhi	r3, [r0, #0]
 8006a5e:	700a      	strbls	r2, [r1, #0]
 8006a60:	f04f 30ff 	movhi.w	r0, #4294967295
 8006a64:	bf98      	it	ls
 8006a66:	2001      	movls	r0, #1
 8006a68:	4770      	bx	lr
 8006a6a:	4608      	mov	r0, r1
 8006a6c:	4770      	bx	lr
	...

08006a70 <_fstat_r>:
 8006a70:	b538      	push	{r3, r4, r5, lr}
 8006a72:	4c07      	ldr	r4, [pc, #28]	; (8006a90 <_fstat_r+0x20>)
 8006a74:	2300      	movs	r3, #0
 8006a76:	4605      	mov	r5, r0
 8006a78:	4608      	mov	r0, r1
 8006a7a:	4611      	mov	r1, r2
 8006a7c:	6023      	str	r3, [r4, #0]
 8006a7e:	f7fa ffb8 	bl	80019f2 <_fstat>
 8006a82:	1c43      	adds	r3, r0, #1
 8006a84:	d102      	bne.n	8006a8c <_fstat_r+0x1c>
 8006a86:	6823      	ldr	r3, [r4, #0]
 8006a88:	b103      	cbz	r3, 8006a8c <_fstat_r+0x1c>
 8006a8a:	602b      	str	r3, [r5, #0]
 8006a8c:	bd38      	pop	{r3, r4, r5, pc}
 8006a8e:	bf00      	nop
 8006a90:	200003ec 	.word	0x200003ec

08006a94 <_isatty_r>:
 8006a94:	b538      	push	{r3, r4, r5, lr}
 8006a96:	4c06      	ldr	r4, [pc, #24]	; (8006ab0 <_isatty_r+0x1c>)
 8006a98:	2300      	movs	r3, #0
 8006a9a:	4605      	mov	r5, r0
 8006a9c:	4608      	mov	r0, r1
 8006a9e:	6023      	str	r3, [r4, #0]
 8006aa0:	f7fa ffb7 	bl	8001a12 <_isatty>
 8006aa4:	1c43      	adds	r3, r0, #1
 8006aa6:	d102      	bne.n	8006aae <_isatty_r+0x1a>
 8006aa8:	6823      	ldr	r3, [r4, #0]
 8006aaa:	b103      	cbz	r3, 8006aae <_isatty_r+0x1a>
 8006aac:	602b      	str	r3, [r5, #0]
 8006aae:	bd38      	pop	{r3, r4, r5, pc}
 8006ab0:	200003ec 	.word	0x200003ec

08006ab4 <pow>:
 8006ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ab8:	ed2d 8b04 	vpush	{d8-d9}
 8006abc:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8006d90 <pow+0x2dc>
 8006ac0:	b08d      	sub	sp, #52	; 0x34
 8006ac2:	ec57 6b10 	vmov	r6, r7, d0
 8006ac6:	ec55 4b11 	vmov	r4, r5, d1
 8006aca:	f000 fa0d 	bl	8006ee8 <__ieee754_pow>
 8006ace:	f999 3000 	ldrsb.w	r3, [r9]
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	eeb0 8a40 	vmov.f32	s16, s0
 8006ada:	eef0 8a60 	vmov.f32	s17, s1
 8006ade:	46c8      	mov	r8, r9
 8006ae0:	d05f      	beq.n	8006ba2 <pow+0xee>
 8006ae2:	4622      	mov	r2, r4
 8006ae4:	462b      	mov	r3, r5
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	4629      	mov	r1, r5
 8006aea:	f7fa f837 	bl	8000b5c <__aeabi_dcmpun>
 8006aee:	4683      	mov	fp, r0
 8006af0:	2800      	cmp	r0, #0
 8006af2:	d156      	bne.n	8006ba2 <pow+0xee>
 8006af4:	4632      	mov	r2, r6
 8006af6:	463b      	mov	r3, r7
 8006af8:	4630      	mov	r0, r6
 8006afa:	4639      	mov	r1, r7
 8006afc:	f7fa f82e 	bl	8000b5c <__aeabi_dcmpun>
 8006b00:	9001      	str	r0, [sp, #4]
 8006b02:	b1e8      	cbz	r0, 8006b40 <pow+0x8c>
 8006b04:	2200      	movs	r2, #0
 8006b06:	2300      	movs	r3, #0
 8006b08:	4620      	mov	r0, r4
 8006b0a:	4629      	mov	r1, r5
 8006b0c:	f7f9 fff4 	bl	8000af8 <__aeabi_dcmpeq>
 8006b10:	2800      	cmp	r0, #0
 8006b12:	d046      	beq.n	8006ba2 <pow+0xee>
 8006b14:	2301      	movs	r3, #1
 8006b16:	9302      	str	r3, [sp, #8]
 8006b18:	4b96      	ldr	r3, [pc, #600]	; (8006d74 <pow+0x2c0>)
 8006b1a:	9303      	str	r3, [sp, #12]
 8006b1c:	4b96      	ldr	r3, [pc, #600]	; (8006d78 <pow+0x2c4>)
 8006b1e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8006b22:	2200      	movs	r2, #0
 8006b24:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006b28:	9b00      	ldr	r3, [sp, #0]
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006b30:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006b34:	d033      	beq.n	8006b9e <pow+0xea>
 8006b36:	a802      	add	r0, sp, #8
 8006b38:	f000 ffa8 	bl	8007a8c <matherr>
 8006b3c:	bb48      	cbnz	r0, 8006b92 <pow+0xde>
 8006b3e:	e05d      	b.n	8006bfc <pow+0x148>
 8006b40:	f04f 0a00 	mov.w	sl, #0
 8006b44:	f04f 0b00 	mov.w	fp, #0
 8006b48:	4652      	mov	r2, sl
 8006b4a:	465b      	mov	r3, fp
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	4639      	mov	r1, r7
 8006b50:	f7f9 ffd2 	bl	8000af8 <__aeabi_dcmpeq>
 8006b54:	ec4b ab19 	vmov	d9, sl, fp
 8006b58:	2800      	cmp	r0, #0
 8006b5a:	d054      	beq.n	8006c06 <pow+0x152>
 8006b5c:	4652      	mov	r2, sl
 8006b5e:	465b      	mov	r3, fp
 8006b60:	4620      	mov	r0, r4
 8006b62:	4629      	mov	r1, r5
 8006b64:	f7f9 ffc8 	bl	8000af8 <__aeabi_dcmpeq>
 8006b68:	4680      	mov	r8, r0
 8006b6a:	b318      	cbz	r0, 8006bb4 <pow+0x100>
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	9302      	str	r3, [sp, #8]
 8006b70:	4b80      	ldr	r3, [pc, #512]	; (8006d74 <pow+0x2c0>)
 8006b72:	9303      	str	r3, [sp, #12]
 8006b74:	9b01      	ldr	r3, [sp, #4]
 8006b76:	930a      	str	r3, [sp, #40]	; 0x28
 8006b78:	9b00      	ldr	r3, [sp, #0]
 8006b7a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006b7e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006b82:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d0d5      	beq.n	8006b36 <pow+0x82>
 8006b8a:	4b7b      	ldr	r3, [pc, #492]	; (8006d78 <pow+0x2c4>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006b92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b94:	b11b      	cbz	r3, 8006b9e <pow+0xea>
 8006b96:	f7fd fc35 	bl	8004404 <__errno>
 8006b9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b9c:	6003      	str	r3, [r0, #0]
 8006b9e:	ed9d 8b08 	vldr	d8, [sp, #32]
 8006ba2:	eeb0 0a48 	vmov.f32	s0, s16
 8006ba6:	eef0 0a68 	vmov.f32	s1, s17
 8006baa:	b00d      	add	sp, #52	; 0x34
 8006bac:	ecbd 8b04 	vpop	{d8-d9}
 8006bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bb4:	ec45 4b10 	vmov	d0, r4, r5
 8006bb8:	f000 ff60 	bl	8007a7c <finite>
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	d0f0      	beq.n	8006ba2 <pow+0xee>
 8006bc0:	4652      	mov	r2, sl
 8006bc2:	465b      	mov	r3, fp
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	4629      	mov	r1, r5
 8006bc8:	f7f9 ffa0 	bl	8000b0c <__aeabi_dcmplt>
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	d0e8      	beq.n	8006ba2 <pow+0xee>
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	9302      	str	r3, [sp, #8]
 8006bd4:	4b67      	ldr	r3, [pc, #412]	; (8006d74 <pow+0x2c0>)
 8006bd6:	9303      	str	r3, [sp, #12]
 8006bd8:	f999 3000 	ldrsb.w	r3, [r9]
 8006bdc:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8006be0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006be4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006be8:	b913      	cbnz	r3, 8006bf0 <pow+0x13c>
 8006bea:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006bee:	e7a2      	b.n	8006b36 <pow+0x82>
 8006bf0:	4962      	ldr	r1, [pc, #392]	; (8006d7c <pow+0x2c8>)
 8006bf2:	2000      	movs	r0, #0
 8006bf4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d19c      	bne.n	8006b36 <pow+0x82>
 8006bfc:	f7fd fc02 	bl	8004404 <__errno>
 8006c00:	2321      	movs	r3, #33	; 0x21
 8006c02:	6003      	str	r3, [r0, #0]
 8006c04:	e7c5      	b.n	8006b92 <pow+0xde>
 8006c06:	eeb0 0a48 	vmov.f32	s0, s16
 8006c0a:	eef0 0a68 	vmov.f32	s1, s17
 8006c0e:	f000 ff35 	bl	8007a7c <finite>
 8006c12:	9000      	str	r0, [sp, #0]
 8006c14:	2800      	cmp	r0, #0
 8006c16:	f040 8081 	bne.w	8006d1c <pow+0x268>
 8006c1a:	ec47 6b10 	vmov	d0, r6, r7
 8006c1e:	f000 ff2d 	bl	8007a7c <finite>
 8006c22:	2800      	cmp	r0, #0
 8006c24:	d07a      	beq.n	8006d1c <pow+0x268>
 8006c26:	ec45 4b10 	vmov	d0, r4, r5
 8006c2a:	f000 ff27 	bl	8007a7c <finite>
 8006c2e:	2800      	cmp	r0, #0
 8006c30:	d074      	beq.n	8006d1c <pow+0x268>
 8006c32:	ec53 2b18 	vmov	r2, r3, d8
 8006c36:	ee18 0a10 	vmov	r0, s16
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	f7f9 ff8e 	bl	8000b5c <__aeabi_dcmpun>
 8006c40:	f999 9000 	ldrsb.w	r9, [r9]
 8006c44:	4b4b      	ldr	r3, [pc, #300]	; (8006d74 <pow+0x2c0>)
 8006c46:	b1b0      	cbz	r0, 8006c76 <pow+0x1c2>
 8006c48:	2201      	movs	r2, #1
 8006c4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c4e:	9b00      	ldr	r3, [sp, #0]
 8006c50:	930a      	str	r3, [sp, #40]	; 0x28
 8006c52:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006c56:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006c5a:	f1b9 0f00 	cmp.w	r9, #0
 8006c5e:	d0c4      	beq.n	8006bea <pow+0x136>
 8006c60:	4652      	mov	r2, sl
 8006c62:	465b      	mov	r3, fp
 8006c64:	4650      	mov	r0, sl
 8006c66:	4659      	mov	r1, fp
 8006c68:	f7f9 fe08 	bl	800087c <__aeabi_ddiv>
 8006c6c:	f1b9 0f02 	cmp.w	r9, #2
 8006c70:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006c74:	e7c1      	b.n	8006bfa <pow+0x146>
 8006c76:	2203      	movs	r2, #3
 8006c78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c7c:	900a      	str	r0, [sp, #40]	; 0x28
 8006c7e:	4629      	mov	r1, r5
 8006c80:	4620      	mov	r0, r4
 8006c82:	2200      	movs	r2, #0
 8006c84:	4b3e      	ldr	r3, [pc, #248]	; (8006d80 <pow+0x2cc>)
 8006c86:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006c8a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006c8e:	f7f9 fccb 	bl	8000628 <__aeabi_dmul>
 8006c92:	4604      	mov	r4, r0
 8006c94:	460d      	mov	r5, r1
 8006c96:	f1b9 0f00 	cmp.w	r9, #0
 8006c9a:	d124      	bne.n	8006ce6 <pow+0x232>
 8006c9c:	4b39      	ldr	r3, [pc, #228]	; (8006d84 <pow+0x2d0>)
 8006c9e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006ca2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006ca6:	4630      	mov	r0, r6
 8006ca8:	4652      	mov	r2, sl
 8006caa:	465b      	mov	r3, fp
 8006cac:	4639      	mov	r1, r7
 8006cae:	f7f9 ff2d 	bl	8000b0c <__aeabi_dcmplt>
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	d056      	beq.n	8006d64 <pow+0x2b0>
 8006cb6:	ec45 4b10 	vmov	d0, r4, r5
 8006cba:	f000 fef1 	bl	8007aa0 <rint>
 8006cbe:	4622      	mov	r2, r4
 8006cc0:	462b      	mov	r3, r5
 8006cc2:	ec51 0b10 	vmov	r0, r1, d0
 8006cc6:	f7f9 ff17 	bl	8000af8 <__aeabi_dcmpeq>
 8006cca:	b920      	cbnz	r0, 8006cd6 <pow+0x222>
 8006ccc:	4b2e      	ldr	r3, [pc, #184]	; (8006d88 <pow+0x2d4>)
 8006cce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006cd2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006cd6:	f998 3000 	ldrsb.w	r3, [r8]
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d142      	bne.n	8006d64 <pow+0x2b0>
 8006cde:	f7fd fb91 	bl	8004404 <__errno>
 8006ce2:	2322      	movs	r3, #34	; 0x22
 8006ce4:	e78d      	b.n	8006c02 <pow+0x14e>
 8006ce6:	4b29      	ldr	r3, [pc, #164]	; (8006d8c <pow+0x2d8>)
 8006ce8:	2200      	movs	r2, #0
 8006cea:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006cee:	4630      	mov	r0, r6
 8006cf0:	4652      	mov	r2, sl
 8006cf2:	465b      	mov	r3, fp
 8006cf4:	4639      	mov	r1, r7
 8006cf6:	f7f9 ff09 	bl	8000b0c <__aeabi_dcmplt>
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	d0eb      	beq.n	8006cd6 <pow+0x222>
 8006cfe:	ec45 4b10 	vmov	d0, r4, r5
 8006d02:	f000 fecd 	bl	8007aa0 <rint>
 8006d06:	4622      	mov	r2, r4
 8006d08:	462b      	mov	r3, r5
 8006d0a:	ec51 0b10 	vmov	r0, r1, d0
 8006d0e:	f7f9 fef3 	bl	8000af8 <__aeabi_dcmpeq>
 8006d12:	2800      	cmp	r0, #0
 8006d14:	d1df      	bne.n	8006cd6 <pow+0x222>
 8006d16:	2200      	movs	r2, #0
 8006d18:	4b18      	ldr	r3, [pc, #96]	; (8006d7c <pow+0x2c8>)
 8006d1a:	e7da      	b.n	8006cd2 <pow+0x21e>
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	2300      	movs	r3, #0
 8006d20:	ec51 0b18 	vmov	r0, r1, d8
 8006d24:	f7f9 fee8 	bl	8000af8 <__aeabi_dcmpeq>
 8006d28:	2800      	cmp	r0, #0
 8006d2a:	f43f af3a 	beq.w	8006ba2 <pow+0xee>
 8006d2e:	ec47 6b10 	vmov	d0, r6, r7
 8006d32:	f000 fea3 	bl	8007a7c <finite>
 8006d36:	2800      	cmp	r0, #0
 8006d38:	f43f af33 	beq.w	8006ba2 <pow+0xee>
 8006d3c:	ec45 4b10 	vmov	d0, r4, r5
 8006d40:	f000 fe9c 	bl	8007a7c <finite>
 8006d44:	2800      	cmp	r0, #0
 8006d46:	f43f af2c 	beq.w	8006ba2 <pow+0xee>
 8006d4a:	2304      	movs	r3, #4
 8006d4c:	9302      	str	r3, [sp, #8]
 8006d4e:	4b09      	ldr	r3, [pc, #36]	; (8006d74 <pow+0x2c0>)
 8006d50:	9303      	str	r3, [sp, #12]
 8006d52:	2300      	movs	r3, #0
 8006d54:	930a      	str	r3, [sp, #40]	; 0x28
 8006d56:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006d5a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006d5e:	ed8d 9b08 	vstr	d9, [sp, #32]
 8006d62:	e7b8      	b.n	8006cd6 <pow+0x222>
 8006d64:	a802      	add	r0, sp, #8
 8006d66:	f000 fe91 	bl	8007a8c <matherr>
 8006d6a:	2800      	cmp	r0, #0
 8006d6c:	f47f af11 	bne.w	8006b92 <pow+0xde>
 8006d70:	e7b5      	b.n	8006cde <pow+0x22a>
 8006d72:	bf00      	nop
 8006d74:	08008010 	.word	0x08008010
 8006d78:	3ff00000 	.word	0x3ff00000
 8006d7c:	fff00000 	.word	0xfff00000
 8006d80:	3fe00000 	.word	0x3fe00000
 8006d84:	47efffff 	.word	0x47efffff
 8006d88:	c7efffff 	.word	0xc7efffff
 8006d8c:	7ff00000 	.word	0x7ff00000
 8006d90:	20000370 	.word	0x20000370

08006d94 <sqrt>:
 8006d94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d98:	ed2d 8b02 	vpush	{d8}
 8006d9c:	b08b      	sub	sp, #44	; 0x2c
 8006d9e:	ec55 4b10 	vmov	r4, r5, d0
 8006da2:	f000 fdaf 	bl	8007904 <__ieee754_sqrt>
 8006da6:	4b26      	ldr	r3, [pc, #152]	; (8006e40 <sqrt+0xac>)
 8006da8:	eeb0 8a40 	vmov.f32	s16, s0
 8006dac:	eef0 8a60 	vmov.f32	s17, s1
 8006db0:	f993 6000 	ldrsb.w	r6, [r3]
 8006db4:	1c73      	adds	r3, r6, #1
 8006db6:	d02a      	beq.n	8006e0e <sqrt+0x7a>
 8006db8:	4622      	mov	r2, r4
 8006dba:	462b      	mov	r3, r5
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	4629      	mov	r1, r5
 8006dc0:	f7f9 fecc 	bl	8000b5c <__aeabi_dcmpun>
 8006dc4:	4607      	mov	r7, r0
 8006dc6:	bb10      	cbnz	r0, 8006e0e <sqrt+0x7a>
 8006dc8:	f04f 0800 	mov.w	r8, #0
 8006dcc:	f04f 0900 	mov.w	r9, #0
 8006dd0:	4642      	mov	r2, r8
 8006dd2:	464b      	mov	r3, r9
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	4629      	mov	r1, r5
 8006dd8:	f7f9 fe98 	bl	8000b0c <__aeabi_dcmplt>
 8006ddc:	b1b8      	cbz	r0, 8006e0e <sqrt+0x7a>
 8006dde:	2301      	movs	r3, #1
 8006de0:	9300      	str	r3, [sp, #0]
 8006de2:	4b18      	ldr	r3, [pc, #96]	; (8006e44 <sqrt+0xb0>)
 8006de4:	9301      	str	r3, [sp, #4]
 8006de6:	9708      	str	r7, [sp, #32]
 8006de8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006dec:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006df0:	b9b6      	cbnz	r6, 8006e20 <sqrt+0x8c>
 8006df2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006df6:	4668      	mov	r0, sp
 8006df8:	f000 fe48 	bl	8007a8c <matherr>
 8006dfc:	b1d0      	cbz	r0, 8006e34 <sqrt+0xa0>
 8006dfe:	9b08      	ldr	r3, [sp, #32]
 8006e00:	b11b      	cbz	r3, 8006e0a <sqrt+0x76>
 8006e02:	f7fd faff 	bl	8004404 <__errno>
 8006e06:	9b08      	ldr	r3, [sp, #32]
 8006e08:	6003      	str	r3, [r0, #0]
 8006e0a:	ed9d 8b06 	vldr	d8, [sp, #24]
 8006e0e:	eeb0 0a48 	vmov.f32	s0, s16
 8006e12:	eef0 0a68 	vmov.f32	s1, s17
 8006e16:	b00b      	add	sp, #44	; 0x2c
 8006e18:	ecbd 8b02 	vpop	{d8}
 8006e1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e20:	4642      	mov	r2, r8
 8006e22:	464b      	mov	r3, r9
 8006e24:	4640      	mov	r0, r8
 8006e26:	4649      	mov	r1, r9
 8006e28:	f7f9 fd28 	bl	800087c <__aeabi_ddiv>
 8006e2c:	2e02      	cmp	r6, #2
 8006e2e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006e32:	d1e0      	bne.n	8006df6 <sqrt+0x62>
 8006e34:	f7fd fae6 	bl	8004404 <__errno>
 8006e38:	2321      	movs	r3, #33	; 0x21
 8006e3a:	6003      	str	r3, [r0, #0]
 8006e3c:	e7df      	b.n	8006dfe <sqrt+0x6a>
 8006e3e:	bf00      	nop
 8006e40:	20000370 	.word	0x20000370
 8006e44:	08008014 	.word	0x08008014

08006e48 <sqrtf>:
 8006e48:	b510      	push	{r4, lr}
 8006e4a:	ed2d 8b02 	vpush	{d8}
 8006e4e:	b08a      	sub	sp, #40	; 0x28
 8006e50:	eeb0 8a40 	vmov.f32	s16, s0
 8006e54:	f000 fe06 	bl	8007a64 <__ieee754_sqrtf>
 8006e58:	4b21      	ldr	r3, [pc, #132]	; (8006ee0 <sqrtf+0x98>)
 8006e5a:	f993 4000 	ldrsb.w	r4, [r3]
 8006e5e:	1c63      	adds	r3, r4, #1
 8006e60:	d02c      	beq.n	8006ebc <sqrtf+0x74>
 8006e62:	eeb4 8a48 	vcmp.f32	s16, s16
 8006e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e6a:	d627      	bvs.n	8006ebc <sqrtf+0x74>
 8006e6c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e74:	d522      	bpl.n	8006ebc <sqrtf+0x74>
 8006e76:	2301      	movs	r3, #1
 8006e78:	9300      	str	r3, [sp, #0]
 8006e7a:	4b1a      	ldr	r3, [pc, #104]	; (8006ee4 <sqrtf+0x9c>)
 8006e7c:	9301      	str	r3, [sp, #4]
 8006e7e:	ee18 0a10 	vmov	r0, s16
 8006e82:	2300      	movs	r3, #0
 8006e84:	9308      	str	r3, [sp, #32]
 8006e86:	f7f9 fb77 	bl	8000578 <__aeabi_f2d>
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e94:	2300      	movs	r3, #0
 8006e96:	b9ac      	cbnz	r4, 8006ec4 <sqrtf+0x7c>
 8006e98:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006e9c:	4668      	mov	r0, sp
 8006e9e:	f000 fdf5 	bl	8007a8c <matherr>
 8006ea2:	b1b8      	cbz	r0, 8006ed4 <sqrtf+0x8c>
 8006ea4:	9b08      	ldr	r3, [sp, #32]
 8006ea6:	b11b      	cbz	r3, 8006eb0 <sqrtf+0x68>
 8006ea8:	f7fd faac 	bl	8004404 <__errno>
 8006eac:	9b08      	ldr	r3, [sp, #32]
 8006eae:	6003      	str	r3, [r0, #0]
 8006eb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006eb4:	f7f9 fe90 	bl	8000bd8 <__aeabi_d2f>
 8006eb8:	ee00 0a10 	vmov	s0, r0
 8006ebc:	b00a      	add	sp, #40	; 0x28
 8006ebe:	ecbd 8b02 	vpop	{d8}
 8006ec2:	bd10      	pop	{r4, pc}
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	f7f9 fcd8 	bl	800087c <__aeabi_ddiv>
 8006ecc:	2c02      	cmp	r4, #2
 8006ece:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006ed2:	d1e3      	bne.n	8006e9c <sqrtf+0x54>
 8006ed4:	f7fd fa96 	bl	8004404 <__errno>
 8006ed8:	2321      	movs	r3, #33	; 0x21
 8006eda:	6003      	str	r3, [r0, #0]
 8006edc:	e7e2      	b.n	8006ea4 <sqrtf+0x5c>
 8006ede:	bf00      	nop
 8006ee0:	20000370 	.word	0x20000370
 8006ee4:	08008019 	.word	0x08008019

08006ee8 <__ieee754_pow>:
 8006ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eec:	b091      	sub	sp, #68	; 0x44
 8006eee:	ed8d 1b00 	vstr	d1, [sp]
 8006ef2:	e9dd 2900 	ldrd	r2, r9, [sp]
 8006ef6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8006efa:	ea58 0302 	orrs.w	r3, r8, r2
 8006efe:	ec57 6b10 	vmov	r6, r7, d0
 8006f02:	f000 84be 	beq.w	8007882 <__ieee754_pow+0x99a>
 8006f06:	4b7a      	ldr	r3, [pc, #488]	; (80070f0 <__ieee754_pow+0x208>)
 8006f08:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8006f0c:	429c      	cmp	r4, r3
 8006f0e:	463d      	mov	r5, r7
 8006f10:	ee10 aa10 	vmov	sl, s0
 8006f14:	dc09      	bgt.n	8006f2a <__ieee754_pow+0x42>
 8006f16:	d103      	bne.n	8006f20 <__ieee754_pow+0x38>
 8006f18:	b93e      	cbnz	r6, 8006f2a <__ieee754_pow+0x42>
 8006f1a:	45a0      	cmp	r8, r4
 8006f1c:	dc0d      	bgt.n	8006f3a <__ieee754_pow+0x52>
 8006f1e:	e001      	b.n	8006f24 <__ieee754_pow+0x3c>
 8006f20:	4598      	cmp	r8, r3
 8006f22:	dc02      	bgt.n	8006f2a <__ieee754_pow+0x42>
 8006f24:	4598      	cmp	r8, r3
 8006f26:	d10e      	bne.n	8006f46 <__ieee754_pow+0x5e>
 8006f28:	b16a      	cbz	r2, 8006f46 <__ieee754_pow+0x5e>
 8006f2a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006f2e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006f32:	ea54 030a 	orrs.w	r3, r4, sl
 8006f36:	f000 84a4 	beq.w	8007882 <__ieee754_pow+0x99a>
 8006f3a:	486e      	ldr	r0, [pc, #440]	; (80070f4 <__ieee754_pow+0x20c>)
 8006f3c:	b011      	add	sp, #68	; 0x44
 8006f3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f42:	f000 bda5 	b.w	8007a90 <nan>
 8006f46:	2d00      	cmp	r5, #0
 8006f48:	da53      	bge.n	8006ff2 <__ieee754_pow+0x10a>
 8006f4a:	4b6b      	ldr	r3, [pc, #428]	; (80070f8 <__ieee754_pow+0x210>)
 8006f4c:	4598      	cmp	r8, r3
 8006f4e:	dc4d      	bgt.n	8006fec <__ieee754_pow+0x104>
 8006f50:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006f54:	4598      	cmp	r8, r3
 8006f56:	dd4c      	ble.n	8006ff2 <__ieee754_pow+0x10a>
 8006f58:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006f5c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006f60:	2b14      	cmp	r3, #20
 8006f62:	dd26      	ble.n	8006fb2 <__ieee754_pow+0xca>
 8006f64:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006f68:	fa22 f103 	lsr.w	r1, r2, r3
 8006f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d13e      	bne.n	8006ff2 <__ieee754_pow+0x10a>
 8006f74:	f001 0101 	and.w	r1, r1, #1
 8006f78:	f1c1 0b02 	rsb	fp, r1, #2
 8006f7c:	2a00      	cmp	r2, #0
 8006f7e:	d15b      	bne.n	8007038 <__ieee754_pow+0x150>
 8006f80:	4b5b      	ldr	r3, [pc, #364]	; (80070f0 <__ieee754_pow+0x208>)
 8006f82:	4598      	cmp	r8, r3
 8006f84:	d124      	bne.n	8006fd0 <__ieee754_pow+0xe8>
 8006f86:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006f8a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006f8e:	ea53 030a 	orrs.w	r3, r3, sl
 8006f92:	f000 8476 	beq.w	8007882 <__ieee754_pow+0x99a>
 8006f96:	4b59      	ldr	r3, [pc, #356]	; (80070fc <__ieee754_pow+0x214>)
 8006f98:	429c      	cmp	r4, r3
 8006f9a:	dd2d      	ble.n	8006ff8 <__ieee754_pow+0x110>
 8006f9c:	f1b9 0f00 	cmp.w	r9, #0
 8006fa0:	f280 8473 	bge.w	800788a <__ieee754_pow+0x9a2>
 8006fa4:	2000      	movs	r0, #0
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	ec41 0b10 	vmov	d0, r0, r1
 8006fac:	b011      	add	sp, #68	; 0x44
 8006fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fb2:	2a00      	cmp	r2, #0
 8006fb4:	d13e      	bne.n	8007034 <__ieee754_pow+0x14c>
 8006fb6:	f1c3 0314 	rsb	r3, r3, #20
 8006fba:	fa48 f103 	asr.w	r1, r8, r3
 8006fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8006fc2:	4543      	cmp	r3, r8
 8006fc4:	f040 8469 	bne.w	800789a <__ieee754_pow+0x9b2>
 8006fc8:	f001 0101 	and.w	r1, r1, #1
 8006fcc:	f1c1 0b02 	rsb	fp, r1, #2
 8006fd0:	4b4b      	ldr	r3, [pc, #300]	; (8007100 <__ieee754_pow+0x218>)
 8006fd2:	4598      	cmp	r8, r3
 8006fd4:	d118      	bne.n	8007008 <__ieee754_pow+0x120>
 8006fd6:	f1b9 0f00 	cmp.w	r9, #0
 8006fda:	f280 845a 	bge.w	8007892 <__ieee754_pow+0x9aa>
 8006fde:	4948      	ldr	r1, [pc, #288]	; (8007100 <__ieee754_pow+0x218>)
 8006fe0:	4632      	mov	r2, r6
 8006fe2:	463b      	mov	r3, r7
 8006fe4:	2000      	movs	r0, #0
 8006fe6:	f7f9 fc49 	bl	800087c <__aeabi_ddiv>
 8006fea:	e7dd      	b.n	8006fa8 <__ieee754_pow+0xc0>
 8006fec:	f04f 0b02 	mov.w	fp, #2
 8006ff0:	e7c4      	b.n	8006f7c <__ieee754_pow+0x94>
 8006ff2:	f04f 0b00 	mov.w	fp, #0
 8006ff6:	e7c1      	b.n	8006f7c <__ieee754_pow+0x94>
 8006ff8:	f1b9 0f00 	cmp.w	r9, #0
 8006ffc:	dad2      	bge.n	8006fa4 <__ieee754_pow+0xbc>
 8006ffe:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007002:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007006:	e7cf      	b.n	8006fa8 <__ieee754_pow+0xc0>
 8007008:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800700c:	d106      	bne.n	800701c <__ieee754_pow+0x134>
 800700e:	4632      	mov	r2, r6
 8007010:	463b      	mov	r3, r7
 8007012:	4610      	mov	r0, r2
 8007014:	4619      	mov	r1, r3
 8007016:	f7f9 fb07 	bl	8000628 <__aeabi_dmul>
 800701a:	e7c5      	b.n	8006fa8 <__ieee754_pow+0xc0>
 800701c:	4b39      	ldr	r3, [pc, #228]	; (8007104 <__ieee754_pow+0x21c>)
 800701e:	4599      	cmp	r9, r3
 8007020:	d10a      	bne.n	8007038 <__ieee754_pow+0x150>
 8007022:	2d00      	cmp	r5, #0
 8007024:	db08      	blt.n	8007038 <__ieee754_pow+0x150>
 8007026:	ec47 6b10 	vmov	d0, r6, r7
 800702a:	b011      	add	sp, #68	; 0x44
 800702c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007030:	f000 bc68 	b.w	8007904 <__ieee754_sqrt>
 8007034:	f04f 0b00 	mov.w	fp, #0
 8007038:	ec47 6b10 	vmov	d0, r6, r7
 800703c:	f000 fd15 	bl	8007a6a <fabs>
 8007040:	ec51 0b10 	vmov	r0, r1, d0
 8007044:	f1ba 0f00 	cmp.w	sl, #0
 8007048:	d127      	bne.n	800709a <__ieee754_pow+0x1b2>
 800704a:	b124      	cbz	r4, 8007056 <__ieee754_pow+0x16e>
 800704c:	4b2c      	ldr	r3, [pc, #176]	; (8007100 <__ieee754_pow+0x218>)
 800704e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007052:	429a      	cmp	r2, r3
 8007054:	d121      	bne.n	800709a <__ieee754_pow+0x1b2>
 8007056:	f1b9 0f00 	cmp.w	r9, #0
 800705a:	da05      	bge.n	8007068 <__ieee754_pow+0x180>
 800705c:	4602      	mov	r2, r0
 800705e:	460b      	mov	r3, r1
 8007060:	2000      	movs	r0, #0
 8007062:	4927      	ldr	r1, [pc, #156]	; (8007100 <__ieee754_pow+0x218>)
 8007064:	f7f9 fc0a 	bl	800087c <__aeabi_ddiv>
 8007068:	2d00      	cmp	r5, #0
 800706a:	da9d      	bge.n	8006fa8 <__ieee754_pow+0xc0>
 800706c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007070:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007074:	ea54 030b 	orrs.w	r3, r4, fp
 8007078:	d108      	bne.n	800708c <__ieee754_pow+0x1a4>
 800707a:	4602      	mov	r2, r0
 800707c:	460b      	mov	r3, r1
 800707e:	4610      	mov	r0, r2
 8007080:	4619      	mov	r1, r3
 8007082:	f7f9 f919 	bl	80002b8 <__aeabi_dsub>
 8007086:	4602      	mov	r2, r0
 8007088:	460b      	mov	r3, r1
 800708a:	e7ac      	b.n	8006fe6 <__ieee754_pow+0xfe>
 800708c:	f1bb 0f01 	cmp.w	fp, #1
 8007090:	d18a      	bne.n	8006fa8 <__ieee754_pow+0xc0>
 8007092:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007096:	4619      	mov	r1, r3
 8007098:	e786      	b.n	8006fa8 <__ieee754_pow+0xc0>
 800709a:	0fed      	lsrs	r5, r5, #31
 800709c:	1e6b      	subs	r3, r5, #1
 800709e:	930d      	str	r3, [sp, #52]	; 0x34
 80070a0:	ea5b 0303 	orrs.w	r3, fp, r3
 80070a4:	d102      	bne.n	80070ac <__ieee754_pow+0x1c4>
 80070a6:	4632      	mov	r2, r6
 80070a8:	463b      	mov	r3, r7
 80070aa:	e7e8      	b.n	800707e <__ieee754_pow+0x196>
 80070ac:	4b16      	ldr	r3, [pc, #88]	; (8007108 <__ieee754_pow+0x220>)
 80070ae:	4598      	cmp	r8, r3
 80070b0:	f340 80fe 	ble.w	80072b0 <__ieee754_pow+0x3c8>
 80070b4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80070b8:	4598      	cmp	r8, r3
 80070ba:	dd0a      	ble.n	80070d2 <__ieee754_pow+0x1ea>
 80070bc:	4b0f      	ldr	r3, [pc, #60]	; (80070fc <__ieee754_pow+0x214>)
 80070be:	429c      	cmp	r4, r3
 80070c0:	dc0d      	bgt.n	80070de <__ieee754_pow+0x1f6>
 80070c2:	f1b9 0f00 	cmp.w	r9, #0
 80070c6:	f6bf af6d 	bge.w	8006fa4 <__ieee754_pow+0xbc>
 80070ca:	a307      	add	r3, pc, #28	; (adr r3, 80070e8 <__ieee754_pow+0x200>)
 80070cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d0:	e79f      	b.n	8007012 <__ieee754_pow+0x12a>
 80070d2:	4b0e      	ldr	r3, [pc, #56]	; (800710c <__ieee754_pow+0x224>)
 80070d4:	429c      	cmp	r4, r3
 80070d6:	ddf4      	ble.n	80070c2 <__ieee754_pow+0x1da>
 80070d8:	4b09      	ldr	r3, [pc, #36]	; (8007100 <__ieee754_pow+0x218>)
 80070da:	429c      	cmp	r4, r3
 80070dc:	dd18      	ble.n	8007110 <__ieee754_pow+0x228>
 80070de:	f1b9 0f00 	cmp.w	r9, #0
 80070e2:	dcf2      	bgt.n	80070ca <__ieee754_pow+0x1e2>
 80070e4:	e75e      	b.n	8006fa4 <__ieee754_pow+0xbc>
 80070e6:	bf00      	nop
 80070e8:	8800759c 	.word	0x8800759c
 80070ec:	7e37e43c 	.word	0x7e37e43c
 80070f0:	7ff00000 	.word	0x7ff00000
 80070f4:	08007ef9 	.word	0x08007ef9
 80070f8:	433fffff 	.word	0x433fffff
 80070fc:	3fefffff 	.word	0x3fefffff
 8007100:	3ff00000 	.word	0x3ff00000
 8007104:	3fe00000 	.word	0x3fe00000
 8007108:	41e00000 	.word	0x41e00000
 800710c:	3feffffe 	.word	0x3feffffe
 8007110:	2200      	movs	r2, #0
 8007112:	4b63      	ldr	r3, [pc, #396]	; (80072a0 <__ieee754_pow+0x3b8>)
 8007114:	f7f9 f8d0 	bl	80002b8 <__aeabi_dsub>
 8007118:	a355      	add	r3, pc, #340	; (adr r3, 8007270 <__ieee754_pow+0x388>)
 800711a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711e:	4604      	mov	r4, r0
 8007120:	460d      	mov	r5, r1
 8007122:	f7f9 fa81 	bl	8000628 <__aeabi_dmul>
 8007126:	a354      	add	r3, pc, #336	; (adr r3, 8007278 <__ieee754_pow+0x390>)
 8007128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712c:	4606      	mov	r6, r0
 800712e:	460f      	mov	r7, r1
 8007130:	4620      	mov	r0, r4
 8007132:	4629      	mov	r1, r5
 8007134:	f7f9 fa78 	bl	8000628 <__aeabi_dmul>
 8007138:	2200      	movs	r2, #0
 800713a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800713e:	4b59      	ldr	r3, [pc, #356]	; (80072a4 <__ieee754_pow+0x3bc>)
 8007140:	4620      	mov	r0, r4
 8007142:	4629      	mov	r1, r5
 8007144:	f7f9 fa70 	bl	8000628 <__aeabi_dmul>
 8007148:	4602      	mov	r2, r0
 800714a:	460b      	mov	r3, r1
 800714c:	a14c      	add	r1, pc, #304	; (adr r1, 8007280 <__ieee754_pow+0x398>)
 800714e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007152:	f7f9 f8b1 	bl	80002b8 <__aeabi_dsub>
 8007156:	4622      	mov	r2, r4
 8007158:	462b      	mov	r3, r5
 800715a:	f7f9 fa65 	bl	8000628 <__aeabi_dmul>
 800715e:	4602      	mov	r2, r0
 8007160:	460b      	mov	r3, r1
 8007162:	2000      	movs	r0, #0
 8007164:	4950      	ldr	r1, [pc, #320]	; (80072a8 <__ieee754_pow+0x3c0>)
 8007166:	f7f9 f8a7 	bl	80002b8 <__aeabi_dsub>
 800716a:	4622      	mov	r2, r4
 800716c:	462b      	mov	r3, r5
 800716e:	4680      	mov	r8, r0
 8007170:	4689      	mov	r9, r1
 8007172:	4620      	mov	r0, r4
 8007174:	4629      	mov	r1, r5
 8007176:	f7f9 fa57 	bl	8000628 <__aeabi_dmul>
 800717a:	4602      	mov	r2, r0
 800717c:	460b      	mov	r3, r1
 800717e:	4640      	mov	r0, r8
 8007180:	4649      	mov	r1, r9
 8007182:	f7f9 fa51 	bl	8000628 <__aeabi_dmul>
 8007186:	a340      	add	r3, pc, #256	; (adr r3, 8007288 <__ieee754_pow+0x3a0>)
 8007188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718c:	f7f9 fa4c 	bl	8000628 <__aeabi_dmul>
 8007190:	4602      	mov	r2, r0
 8007192:	460b      	mov	r3, r1
 8007194:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007198:	f7f9 f88e 	bl	80002b8 <__aeabi_dsub>
 800719c:	4602      	mov	r2, r0
 800719e:	460b      	mov	r3, r1
 80071a0:	4604      	mov	r4, r0
 80071a2:	460d      	mov	r5, r1
 80071a4:	4630      	mov	r0, r6
 80071a6:	4639      	mov	r1, r7
 80071a8:	f7f9 f888 	bl	80002bc <__adddf3>
 80071ac:	2000      	movs	r0, #0
 80071ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071b2:	4632      	mov	r2, r6
 80071b4:	463b      	mov	r3, r7
 80071b6:	f7f9 f87f 	bl	80002b8 <__aeabi_dsub>
 80071ba:	4602      	mov	r2, r0
 80071bc:	460b      	mov	r3, r1
 80071be:	4620      	mov	r0, r4
 80071c0:	4629      	mov	r1, r5
 80071c2:	f7f9 f879 	bl	80002b8 <__aeabi_dsub>
 80071c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80071c8:	f10b 33ff 	add.w	r3, fp, #4294967295
 80071cc:	4313      	orrs	r3, r2
 80071ce:	4606      	mov	r6, r0
 80071d0:	460f      	mov	r7, r1
 80071d2:	f040 81eb 	bne.w	80075ac <__ieee754_pow+0x6c4>
 80071d6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8007290 <__ieee754_pow+0x3a8>
 80071da:	e9dd 4500 	ldrd	r4, r5, [sp]
 80071de:	2400      	movs	r4, #0
 80071e0:	4622      	mov	r2, r4
 80071e2:	462b      	mov	r3, r5
 80071e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80071ec:	f7f9 f864 	bl	80002b8 <__aeabi_dsub>
 80071f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071f4:	f7f9 fa18 	bl	8000628 <__aeabi_dmul>
 80071f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071fc:	4680      	mov	r8, r0
 80071fe:	4689      	mov	r9, r1
 8007200:	4630      	mov	r0, r6
 8007202:	4639      	mov	r1, r7
 8007204:	f7f9 fa10 	bl	8000628 <__aeabi_dmul>
 8007208:	4602      	mov	r2, r0
 800720a:	460b      	mov	r3, r1
 800720c:	4640      	mov	r0, r8
 800720e:	4649      	mov	r1, r9
 8007210:	f7f9 f854 	bl	80002bc <__adddf3>
 8007214:	4622      	mov	r2, r4
 8007216:	462b      	mov	r3, r5
 8007218:	4680      	mov	r8, r0
 800721a:	4689      	mov	r9, r1
 800721c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007220:	f7f9 fa02 	bl	8000628 <__aeabi_dmul>
 8007224:	460b      	mov	r3, r1
 8007226:	4604      	mov	r4, r0
 8007228:	460d      	mov	r5, r1
 800722a:	4602      	mov	r2, r0
 800722c:	4649      	mov	r1, r9
 800722e:	4640      	mov	r0, r8
 8007230:	e9cd 4500 	strd	r4, r5, [sp]
 8007234:	f7f9 f842 	bl	80002bc <__adddf3>
 8007238:	4b1c      	ldr	r3, [pc, #112]	; (80072ac <__ieee754_pow+0x3c4>)
 800723a:	4299      	cmp	r1, r3
 800723c:	4606      	mov	r6, r0
 800723e:	460f      	mov	r7, r1
 8007240:	468b      	mov	fp, r1
 8007242:	f340 82f7 	ble.w	8007834 <__ieee754_pow+0x94c>
 8007246:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800724a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800724e:	4303      	orrs	r3, r0
 8007250:	f000 81ea 	beq.w	8007628 <__ieee754_pow+0x740>
 8007254:	a310      	add	r3, pc, #64	; (adr r3, 8007298 <__ieee754_pow+0x3b0>)
 8007256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800725e:	f7f9 f9e3 	bl	8000628 <__aeabi_dmul>
 8007262:	a30d      	add	r3, pc, #52	; (adr r3, 8007298 <__ieee754_pow+0x3b0>)
 8007264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007268:	e6d5      	b.n	8007016 <__ieee754_pow+0x12e>
 800726a:	bf00      	nop
 800726c:	f3af 8000 	nop.w
 8007270:	60000000 	.word	0x60000000
 8007274:	3ff71547 	.word	0x3ff71547
 8007278:	f85ddf44 	.word	0xf85ddf44
 800727c:	3e54ae0b 	.word	0x3e54ae0b
 8007280:	55555555 	.word	0x55555555
 8007284:	3fd55555 	.word	0x3fd55555
 8007288:	652b82fe 	.word	0x652b82fe
 800728c:	3ff71547 	.word	0x3ff71547
 8007290:	00000000 	.word	0x00000000
 8007294:	bff00000 	.word	0xbff00000
 8007298:	8800759c 	.word	0x8800759c
 800729c:	7e37e43c 	.word	0x7e37e43c
 80072a0:	3ff00000 	.word	0x3ff00000
 80072a4:	3fd00000 	.word	0x3fd00000
 80072a8:	3fe00000 	.word	0x3fe00000
 80072ac:	408fffff 	.word	0x408fffff
 80072b0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80072b4:	f04f 0200 	mov.w	r2, #0
 80072b8:	da05      	bge.n	80072c6 <__ieee754_pow+0x3de>
 80072ba:	4bd3      	ldr	r3, [pc, #844]	; (8007608 <__ieee754_pow+0x720>)
 80072bc:	f7f9 f9b4 	bl	8000628 <__aeabi_dmul>
 80072c0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80072c4:	460c      	mov	r4, r1
 80072c6:	1523      	asrs	r3, r4, #20
 80072c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80072cc:	4413      	add	r3, r2
 80072ce:	9309      	str	r3, [sp, #36]	; 0x24
 80072d0:	4bce      	ldr	r3, [pc, #824]	; (800760c <__ieee754_pow+0x724>)
 80072d2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80072d6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80072da:	429c      	cmp	r4, r3
 80072dc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80072e0:	dd08      	ble.n	80072f4 <__ieee754_pow+0x40c>
 80072e2:	4bcb      	ldr	r3, [pc, #812]	; (8007610 <__ieee754_pow+0x728>)
 80072e4:	429c      	cmp	r4, r3
 80072e6:	f340 815e 	ble.w	80075a6 <__ieee754_pow+0x6be>
 80072ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072ec:	3301      	adds	r3, #1
 80072ee:	9309      	str	r3, [sp, #36]	; 0x24
 80072f0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80072f4:	f04f 0a00 	mov.w	sl, #0
 80072f8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80072fc:	930c      	str	r3, [sp, #48]	; 0x30
 80072fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007300:	4bc4      	ldr	r3, [pc, #784]	; (8007614 <__ieee754_pow+0x72c>)
 8007302:	4413      	add	r3, r2
 8007304:	ed93 7b00 	vldr	d7, [r3]
 8007308:	4629      	mov	r1, r5
 800730a:	ec53 2b17 	vmov	r2, r3, d7
 800730e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007312:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007316:	f7f8 ffcf 	bl	80002b8 <__aeabi_dsub>
 800731a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800731e:	4606      	mov	r6, r0
 8007320:	460f      	mov	r7, r1
 8007322:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007326:	f7f8 ffc9 	bl	80002bc <__adddf3>
 800732a:	4602      	mov	r2, r0
 800732c:	460b      	mov	r3, r1
 800732e:	2000      	movs	r0, #0
 8007330:	49b9      	ldr	r1, [pc, #740]	; (8007618 <__ieee754_pow+0x730>)
 8007332:	f7f9 faa3 	bl	800087c <__aeabi_ddiv>
 8007336:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800733a:	4602      	mov	r2, r0
 800733c:	460b      	mov	r3, r1
 800733e:	4630      	mov	r0, r6
 8007340:	4639      	mov	r1, r7
 8007342:	f7f9 f971 	bl	8000628 <__aeabi_dmul>
 8007346:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800734a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800734e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007352:	2300      	movs	r3, #0
 8007354:	9302      	str	r3, [sp, #8]
 8007356:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800735a:	106d      	asrs	r5, r5, #1
 800735c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007360:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007364:	2200      	movs	r2, #0
 8007366:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800736a:	4640      	mov	r0, r8
 800736c:	4649      	mov	r1, r9
 800736e:	4614      	mov	r4, r2
 8007370:	461d      	mov	r5, r3
 8007372:	f7f9 f959 	bl	8000628 <__aeabi_dmul>
 8007376:	4602      	mov	r2, r0
 8007378:	460b      	mov	r3, r1
 800737a:	4630      	mov	r0, r6
 800737c:	4639      	mov	r1, r7
 800737e:	f7f8 ff9b 	bl	80002b8 <__aeabi_dsub>
 8007382:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007386:	4606      	mov	r6, r0
 8007388:	460f      	mov	r7, r1
 800738a:	4620      	mov	r0, r4
 800738c:	4629      	mov	r1, r5
 800738e:	f7f8 ff93 	bl	80002b8 <__aeabi_dsub>
 8007392:	4602      	mov	r2, r0
 8007394:	460b      	mov	r3, r1
 8007396:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800739a:	f7f8 ff8d 	bl	80002b8 <__aeabi_dsub>
 800739e:	4642      	mov	r2, r8
 80073a0:	464b      	mov	r3, r9
 80073a2:	f7f9 f941 	bl	8000628 <__aeabi_dmul>
 80073a6:	4602      	mov	r2, r0
 80073a8:	460b      	mov	r3, r1
 80073aa:	4630      	mov	r0, r6
 80073ac:	4639      	mov	r1, r7
 80073ae:	f7f8 ff83 	bl	80002b8 <__aeabi_dsub>
 80073b2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80073b6:	f7f9 f937 	bl	8000628 <__aeabi_dmul>
 80073ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80073c2:	4610      	mov	r0, r2
 80073c4:	4619      	mov	r1, r3
 80073c6:	f7f9 f92f 	bl	8000628 <__aeabi_dmul>
 80073ca:	a37b      	add	r3, pc, #492	; (adr r3, 80075b8 <__ieee754_pow+0x6d0>)
 80073cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d0:	4604      	mov	r4, r0
 80073d2:	460d      	mov	r5, r1
 80073d4:	f7f9 f928 	bl	8000628 <__aeabi_dmul>
 80073d8:	a379      	add	r3, pc, #484	; (adr r3, 80075c0 <__ieee754_pow+0x6d8>)
 80073da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073de:	f7f8 ff6d 	bl	80002bc <__adddf3>
 80073e2:	4622      	mov	r2, r4
 80073e4:	462b      	mov	r3, r5
 80073e6:	f7f9 f91f 	bl	8000628 <__aeabi_dmul>
 80073ea:	a377      	add	r3, pc, #476	; (adr r3, 80075c8 <__ieee754_pow+0x6e0>)
 80073ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f0:	f7f8 ff64 	bl	80002bc <__adddf3>
 80073f4:	4622      	mov	r2, r4
 80073f6:	462b      	mov	r3, r5
 80073f8:	f7f9 f916 	bl	8000628 <__aeabi_dmul>
 80073fc:	a374      	add	r3, pc, #464	; (adr r3, 80075d0 <__ieee754_pow+0x6e8>)
 80073fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007402:	f7f8 ff5b 	bl	80002bc <__adddf3>
 8007406:	4622      	mov	r2, r4
 8007408:	462b      	mov	r3, r5
 800740a:	f7f9 f90d 	bl	8000628 <__aeabi_dmul>
 800740e:	a372      	add	r3, pc, #456	; (adr r3, 80075d8 <__ieee754_pow+0x6f0>)
 8007410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007414:	f7f8 ff52 	bl	80002bc <__adddf3>
 8007418:	4622      	mov	r2, r4
 800741a:	462b      	mov	r3, r5
 800741c:	f7f9 f904 	bl	8000628 <__aeabi_dmul>
 8007420:	a36f      	add	r3, pc, #444	; (adr r3, 80075e0 <__ieee754_pow+0x6f8>)
 8007422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007426:	f7f8 ff49 	bl	80002bc <__adddf3>
 800742a:	4622      	mov	r2, r4
 800742c:	4606      	mov	r6, r0
 800742e:	460f      	mov	r7, r1
 8007430:	462b      	mov	r3, r5
 8007432:	4620      	mov	r0, r4
 8007434:	4629      	mov	r1, r5
 8007436:	f7f9 f8f7 	bl	8000628 <__aeabi_dmul>
 800743a:	4602      	mov	r2, r0
 800743c:	460b      	mov	r3, r1
 800743e:	4630      	mov	r0, r6
 8007440:	4639      	mov	r1, r7
 8007442:	f7f9 f8f1 	bl	8000628 <__aeabi_dmul>
 8007446:	4642      	mov	r2, r8
 8007448:	4604      	mov	r4, r0
 800744a:	460d      	mov	r5, r1
 800744c:	464b      	mov	r3, r9
 800744e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007452:	f7f8 ff33 	bl	80002bc <__adddf3>
 8007456:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800745a:	f7f9 f8e5 	bl	8000628 <__aeabi_dmul>
 800745e:	4622      	mov	r2, r4
 8007460:	462b      	mov	r3, r5
 8007462:	f7f8 ff2b 	bl	80002bc <__adddf3>
 8007466:	4642      	mov	r2, r8
 8007468:	4606      	mov	r6, r0
 800746a:	460f      	mov	r7, r1
 800746c:	464b      	mov	r3, r9
 800746e:	4640      	mov	r0, r8
 8007470:	4649      	mov	r1, r9
 8007472:	f7f9 f8d9 	bl	8000628 <__aeabi_dmul>
 8007476:	2200      	movs	r2, #0
 8007478:	4b68      	ldr	r3, [pc, #416]	; (800761c <__ieee754_pow+0x734>)
 800747a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800747e:	f7f8 ff1d 	bl	80002bc <__adddf3>
 8007482:	4632      	mov	r2, r6
 8007484:	463b      	mov	r3, r7
 8007486:	f7f8 ff19 	bl	80002bc <__adddf3>
 800748a:	9802      	ldr	r0, [sp, #8]
 800748c:	460d      	mov	r5, r1
 800748e:	4604      	mov	r4, r0
 8007490:	4602      	mov	r2, r0
 8007492:	460b      	mov	r3, r1
 8007494:	4640      	mov	r0, r8
 8007496:	4649      	mov	r1, r9
 8007498:	f7f9 f8c6 	bl	8000628 <__aeabi_dmul>
 800749c:	2200      	movs	r2, #0
 800749e:	4680      	mov	r8, r0
 80074a0:	4689      	mov	r9, r1
 80074a2:	4b5e      	ldr	r3, [pc, #376]	; (800761c <__ieee754_pow+0x734>)
 80074a4:	4620      	mov	r0, r4
 80074a6:	4629      	mov	r1, r5
 80074a8:	f7f8 ff06 	bl	80002b8 <__aeabi_dsub>
 80074ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80074b0:	f7f8 ff02 	bl	80002b8 <__aeabi_dsub>
 80074b4:	4602      	mov	r2, r0
 80074b6:	460b      	mov	r3, r1
 80074b8:	4630      	mov	r0, r6
 80074ba:	4639      	mov	r1, r7
 80074bc:	f7f8 fefc 	bl	80002b8 <__aeabi_dsub>
 80074c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074c4:	f7f9 f8b0 	bl	8000628 <__aeabi_dmul>
 80074c8:	4622      	mov	r2, r4
 80074ca:	4606      	mov	r6, r0
 80074cc:	460f      	mov	r7, r1
 80074ce:	462b      	mov	r3, r5
 80074d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074d4:	f7f9 f8a8 	bl	8000628 <__aeabi_dmul>
 80074d8:	4602      	mov	r2, r0
 80074da:	460b      	mov	r3, r1
 80074dc:	4630      	mov	r0, r6
 80074de:	4639      	mov	r1, r7
 80074e0:	f7f8 feec 	bl	80002bc <__adddf3>
 80074e4:	4606      	mov	r6, r0
 80074e6:	460f      	mov	r7, r1
 80074e8:	4602      	mov	r2, r0
 80074ea:	460b      	mov	r3, r1
 80074ec:	4640      	mov	r0, r8
 80074ee:	4649      	mov	r1, r9
 80074f0:	f7f8 fee4 	bl	80002bc <__adddf3>
 80074f4:	9802      	ldr	r0, [sp, #8]
 80074f6:	a33c      	add	r3, pc, #240	; (adr r3, 80075e8 <__ieee754_pow+0x700>)
 80074f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fc:	4604      	mov	r4, r0
 80074fe:	460d      	mov	r5, r1
 8007500:	f7f9 f892 	bl	8000628 <__aeabi_dmul>
 8007504:	4642      	mov	r2, r8
 8007506:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800750a:	464b      	mov	r3, r9
 800750c:	4620      	mov	r0, r4
 800750e:	4629      	mov	r1, r5
 8007510:	f7f8 fed2 	bl	80002b8 <__aeabi_dsub>
 8007514:	4602      	mov	r2, r0
 8007516:	460b      	mov	r3, r1
 8007518:	4630      	mov	r0, r6
 800751a:	4639      	mov	r1, r7
 800751c:	f7f8 fecc 	bl	80002b8 <__aeabi_dsub>
 8007520:	a333      	add	r3, pc, #204	; (adr r3, 80075f0 <__ieee754_pow+0x708>)
 8007522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007526:	f7f9 f87f 	bl	8000628 <__aeabi_dmul>
 800752a:	a333      	add	r3, pc, #204	; (adr r3, 80075f8 <__ieee754_pow+0x710>)
 800752c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007530:	4606      	mov	r6, r0
 8007532:	460f      	mov	r7, r1
 8007534:	4620      	mov	r0, r4
 8007536:	4629      	mov	r1, r5
 8007538:	f7f9 f876 	bl	8000628 <__aeabi_dmul>
 800753c:	4602      	mov	r2, r0
 800753e:	460b      	mov	r3, r1
 8007540:	4630      	mov	r0, r6
 8007542:	4639      	mov	r1, r7
 8007544:	f7f8 feba 	bl	80002bc <__adddf3>
 8007548:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800754a:	4b35      	ldr	r3, [pc, #212]	; (8007620 <__ieee754_pow+0x738>)
 800754c:	4413      	add	r3, r2
 800754e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007552:	f7f8 feb3 	bl	80002bc <__adddf3>
 8007556:	4604      	mov	r4, r0
 8007558:	9809      	ldr	r0, [sp, #36]	; 0x24
 800755a:	460d      	mov	r5, r1
 800755c:	f7f8 fffa 	bl	8000554 <__aeabi_i2d>
 8007560:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007562:	4b30      	ldr	r3, [pc, #192]	; (8007624 <__ieee754_pow+0x73c>)
 8007564:	4413      	add	r3, r2
 8007566:	e9d3 8900 	ldrd	r8, r9, [r3]
 800756a:	4606      	mov	r6, r0
 800756c:	460f      	mov	r7, r1
 800756e:	4622      	mov	r2, r4
 8007570:	462b      	mov	r3, r5
 8007572:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007576:	f7f8 fea1 	bl	80002bc <__adddf3>
 800757a:	4642      	mov	r2, r8
 800757c:	464b      	mov	r3, r9
 800757e:	f7f8 fe9d 	bl	80002bc <__adddf3>
 8007582:	4632      	mov	r2, r6
 8007584:	463b      	mov	r3, r7
 8007586:	f7f8 fe99 	bl	80002bc <__adddf3>
 800758a:	9802      	ldr	r0, [sp, #8]
 800758c:	4632      	mov	r2, r6
 800758e:	463b      	mov	r3, r7
 8007590:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007594:	f7f8 fe90 	bl	80002b8 <__aeabi_dsub>
 8007598:	4642      	mov	r2, r8
 800759a:	464b      	mov	r3, r9
 800759c:	f7f8 fe8c 	bl	80002b8 <__aeabi_dsub>
 80075a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80075a4:	e607      	b.n	80071b6 <__ieee754_pow+0x2ce>
 80075a6:	f04f 0a01 	mov.w	sl, #1
 80075aa:	e6a5      	b.n	80072f8 <__ieee754_pow+0x410>
 80075ac:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007600 <__ieee754_pow+0x718>
 80075b0:	e613      	b.n	80071da <__ieee754_pow+0x2f2>
 80075b2:	bf00      	nop
 80075b4:	f3af 8000 	nop.w
 80075b8:	4a454eef 	.word	0x4a454eef
 80075bc:	3fca7e28 	.word	0x3fca7e28
 80075c0:	93c9db65 	.word	0x93c9db65
 80075c4:	3fcd864a 	.word	0x3fcd864a
 80075c8:	a91d4101 	.word	0xa91d4101
 80075cc:	3fd17460 	.word	0x3fd17460
 80075d0:	518f264d 	.word	0x518f264d
 80075d4:	3fd55555 	.word	0x3fd55555
 80075d8:	db6fabff 	.word	0xdb6fabff
 80075dc:	3fdb6db6 	.word	0x3fdb6db6
 80075e0:	33333303 	.word	0x33333303
 80075e4:	3fe33333 	.word	0x3fe33333
 80075e8:	e0000000 	.word	0xe0000000
 80075ec:	3feec709 	.word	0x3feec709
 80075f0:	dc3a03fd 	.word	0xdc3a03fd
 80075f4:	3feec709 	.word	0x3feec709
 80075f8:	145b01f5 	.word	0x145b01f5
 80075fc:	be3e2fe0 	.word	0xbe3e2fe0
 8007600:	00000000 	.word	0x00000000
 8007604:	3ff00000 	.word	0x3ff00000
 8007608:	43400000 	.word	0x43400000
 800760c:	0003988e 	.word	0x0003988e
 8007610:	000bb679 	.word	0x000bb679
 8007614:	08008020 	.word	0x08008020
 8007618:	3ff00000 	.word	0x3ff00000
 800761c:	40080000 	.word	0x40080000
 8007620:	08008040 	.word	0x08008040
 8007624:	08008030 	.word	0x08008030
 8007628:	a3b4      	add	r3, pc, #720	; (adr r3, 80078fc <__ieee754_pow+0xa14>)
 800762a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762e:	4640      	mov	r0, r8
 8007630:	4649      	mov	r1, r9
 8007632:	f7f8 fe43 	bl	80002bc <__adddf3>
 8007636:	4622      	mov	r2, r4
 8007638:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800763c:	462b      	mov	r3, r5
 800763e:	4630      	mov	r0, r6
 8007640:	4639      	mov	r1, r7
 8007642:	f7f8 fe39 	bl	80002b8 <__aeabi_dsub>
 8007646:	4602      	mov	r2, r0
 8007648:	460b      	mov	r3, r1
 800764a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800764e:	f7f9 fa7b 	bl	8000b48 <__aeabi_dcmpgt>
 8007652:	2800      	cmp	r0, #0
 8007654:	f47f adfe 	bne.w	8007254 <__ieee754_pow+0x36c>
 8007658:	4aa3      	ldr	r2, [pc, #652]	; (80078e8 <__ieee754_pow+0xa00>)
 800765a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800765e:	4293      	cmp	r3, r2
 8007660:	f340 810a 	ble.w	8007878 <__ieee754_pow+0x990>
 8007664:	151b      	asrs	r3, r3, #20
 8007666:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800766a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800766e:	fa4a f303 	asr.w	r3, sl, r3
 8007672:	445b      	add	r3, fp
 8007674:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007678:	4e9c      	ldr	r6, [pc, #624]	; (80078ec <__ieee754_pow+0xa04>)
 800767a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800767e:	4116      	asrs	r6, r2
 8007680:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007684:	2000      	movs	r0, #0
 8007686:	ea23 0106 	bic.w	r1, r3, r6
 800768a:	f1c2 0214 	rsb	r2, r2, #20
 800768e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007692:	fa4a fa02 	asr.w	sl, sl, r2
 8007696:	f1bb 0f00 	cmp.w	fp, #0
 800769a:	4602      	mov	r2, r0
 800769c:	460b      	mov	r3, r1
 800769e:	4620      	mov	r0, r4
 80076a0:	4629      	mov	r1, r5
 80076a2:	bfb8      	it	lt
 80076a4:	f1ca 0a00 	rsblt	sl, sl, #0
 80076a8:	f7f8 fe06 	bl	80002b8 <__aeabi_dsub>
 80076ac:	e9cd 0100 	strd	r0, r1, [sp]
 80076b0:	4642      	mov	r2, r8
 80076b2:	464b      	mov	r3, r9
 80076b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80076b8:	f7f8 fe00 	bl	80002bc <__adddf3>
 80076bc:	2000      	movs	r0, #0
 80076be:	a378      	add	r3, pc, #480	; (adr r3, 80078a0 <__ieee754_pow+0x9b8>)
 80076c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c4:	4604      	mov	r4, r0
 80076c6:	460d      	mov	r5, r1
 80076c8:	f7f8 ffae 	bl	8000628 <__aeabi_dmul>
 80076cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076d0:	4606      	mov	r6, r0
 80076d2:	460f      	mov	r7, r1
 80076d4:	4620      	mov	r0, r4
 80076d6:	4629      	mov	r1, r5
 80076d8:	f7f8 fdee 	bl	80002b8 <__aeabi_dsub>
 80076dc:	4602      	mov	r2, r0
 80076de:	460b      	mov	r3, r1
 80076e0:	4640      	mov	r0, r8
 80076e2:	4649      	mov	r1, r9
 80076e4:	f7f8 fde8 	bl	80002b8 <__aeabi_dsub>
 80076e8:	a36f      	add	r3, pc, #444	; (adr r3, 80078a8 <__ieee754_pow+0x9c0>)
 80076ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ee:	f7f8 ff9b 	bl	8000628 <__aeabi_dmul>
 80076f2:	a36f      	add	r3, pc, #444	; (adr r3, 80078b0 <__ieee754_pow+0x9c8>)
 80076f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f8:	4680      	mov	r8, r0
 80076fa:	4689      	mov	r9, r1
 80076fc:	4620      	mov	r0, r4
 80076fe:	4629      	mov	r1, r5
 8007700:	f7f8 ff92 	bl	8000628 <__aeabi_dmul>
 8007704:	4602      	mov	r2, r0
 8007706:	460b      	mov	r3, r1
 8007708:	4640      	mov	r0, r8
 800770a:	4649      	mov	r1, r9
 800770c:	f7f8 fdd6 	bl	80002bc <__adddf3>
 8007710:	4604      	mov	r4, r0
 8007712:	460d      	mov	r5, r1
 8007714:	4602      	mov	r2, r0
 8007716:	460b      	mov	r3, r1
 8007718:	4630      	mov	r0, r6
 800771a:	4639      	mov	r1, r7
 800771c:	f7f8 fdce 	bl	80002bc <__adddf3>
 8007720:	4632      	mov	r2, r6
 8007722:	463b      	mov	r3, r7
 8007724:	4680      	mov	r8, r0
 8007726:	4689      	mov	r9, r1
 8007728:	f7f8 fdc6 	bl	80002b8 <__aeabi_dsub>
 800772c:	4602      	mov	r2, r0
 800772e:	460b      	mov	r3, r1
 8007730:	4620      	mov	r0, r4
 8007732:	4629      	mov	r1, r5
 8007734:	f7f8 fdc0 	bl	80002b8 <__aeabi_dsub>
 8007738:	4642      	mov	r2, r8
 800773a:	4606      	mov	r6, r0
 800773c:	460f      	mov	r7, r1
 800773e:	464b      	mov	r3, r9
 8007740:	4640      	mov	r0, r8
 8007742:	4649      	mov	r1, r9
 8007744:	f7f8 ff70 	bl	8000628 <__aeabi_dmul>
 8007748:	a35b      	add	r3, pc, #364	; (adr r3, 80078b8 <__ieee754_pow+0x9d0>)
 800774a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774e:	4604      	mov	r4, r0
 8007750:	460d      	mov	r5, r1
 8007752:	f7f8 ff69 	bl	8000628 <__aeabi_dmul>
 8007756:	a35a      	add	r3, pc, #360	; (adr r3, 80078c0 <__ieee754_pow+0x9d8>)
 8007758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775c:	f7f8 fdac 	bl	80002b8 <__aeabi_dsub>
 8007760:	4622      	mov	r2, r4
 8007762:	462b      	mov	r3, r5
 8007764:	f7f8 ff60 	bl	8000628 <__aeabi_dmul>
 8007768:	a357      	add	r3, pc, #348	; (adr r3, 80078c8 <__ieee754_pow+0x9e0>)
 800776a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776e:	f7f8 fda5 	bl	80002bc <__adddf3>
 8007772:	4622      	mov	r2, r4
 8007774:	462b      	mov	r3, r5
 8007776:	f7f8 ff57 	bl	8000628 <__aeabi_dmul>
 800777a:	a355      	add	r3, pc, #340	; (adr r3, 80078d0 <__ieee754_pow+0x9e8>)
 800777c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007780:	f7f8 fd9a 	bl	80002b8 <__aeabi_dsub>
 8007784:	4622      	mov	r2, r4
 8007786:	462b      	mov	r3, r5
 8007788:	f7f8 ff4e 	bl	8000628 <__aeabi_dmul>
 800778c:	a352      	add	r3, pc, #328	; (adr r3, 80078d8 <__ieee754_pow+0x9f0>)
 800778e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007792:	f7f8 fd93 	bl	80002bc <__adddf3>
 8007796:	4622      	mov	r2, r4
 8007798:	462b      	mov	r3, r5
 800779a:	f7f8 ff45 	bl	8000628 <__aeabi_dmul>
 800779e:	4602      	mov	r2, r0
 80077a0:	460b      	mov	r3, r1
 80077a2:	4640      	mov	r0, r8
 80077a4:	4649      	mov	r1, r9
 80077a6:	f7f8 fd87 	bl	80002b8 <__aeabi_dsub>
 80077aa:	4604      	mov	r4, r0
 80077ac:	460d      	mov	r5, r1
 80077ae:	4602      	mov	r2, r0
 80077b0:	460b      	mov	r3, r1
 80077b2:	4640      	mov	r0, r8
 80077b4:	4649      	mov	r1, r9
 80077b6:	f7f8 ff37 	bl	8000628 <__aeabi_dmul>
 80077ba:	2200      	movs	r2, #0
 80077bc:	e9cd 0100 	strd	r0, r1, [sp]
 80077c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80077c4:	4620      	mov	r0, r4
 80077c6:	4629      	mov	r1, r5
 80077c8:	f7f8 fd76 	bl	80002b8 <__aeabi_dsub>
 80077cc:	4602      	mov	r2, r0
 80077ce:	460b      	mov	r3, r1
 80077d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077d4:	f7f9 f852 	bl	800087c <__aeabi_ddiv>
 80077d8:	4632      	mov	r2, r6
 80077da:	4604      	mov	r4, r0
 80077dc:	460d      	mov	r5, r1
 80077de:	463b      	mov	r3, r7
 80077e0:	4640      	mov	r0, r8
 80077e2:	4649      	mov	r1, r9
 80077e4:	f7f8 ff20 	bl	8000628 <__aeabi_dmul>
 80077e8:	4632      	mov	r2, r6
 80077ea:	463b      	mov	r3, r7
 80077ec:	f7f8 fd66 	bl	80002bc <__adddf3>
 80077f0:	4602      	mov	r2, r0
 80077f2:	460b      	mov	r3, r1
 80077f4:	4620      	mov	r0, r4
 80077f6:	4629      	mov	r1, r5
 80077f8:	f7f8 fd5e 	bl	80002b8 <__aeabi_dsub>
 80077fc:	4642      	mov	r2, r8
 80077fe:	464b      	mov	r3, r9
 8007800:	f7f8 fd5a 	bl	80002b8 <__aeabi_dsub>
 8007804:	4602      	mov	r2, r0
 8007806:	460b      	mov	r3, r1
 8007808:	2000      	movs	r0, #0
 800780a:	4939      	ldr	r1, [pc, #228]	; (80078f0 <__ieee754_pow+0xa08>)
 800780c:	f7f8 fd54 	bl	80002b8 <__aeabi_dsub>
 8007810:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007814:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007818:	4602      	mov	r2, r0
 800781a:	460b      	mov	r3, r1
 800781c:	da2f      	bge.n	800787e <__ieee754_pow+0x996>
 800781e:	4650      	mov	r0, sl
 8007820:	ec43 2b10 	vmov	d0, r2, r3
 8007824:	f000 f9c0 	bl	8007ba8 <scalbn>
 8007828:	ec51 0b10 	vmov	r0, r1, d0
 800782c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007830:	f7ff bbf1 	b.w	8007016 <__ieee754_pow+0x12e>
 8007834:	4b2f      	ldr	r3, [pc, #188]	; (80078f4 <__ieee754_pow+0xa0c>)
 8007836:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800783a:	429e      	cmp	r6, r3
 800783c:	f77f af0c 	ble.w	8007658 <__ieee754_pow+0x770>
 8007840:	4b2d      	ldr	r3, [pc, #180]	; (80078f8 <__ieee754_pow+0xa10>)
 8007842:	440b      	add	r3, r1
 8007844:	4303      	orrs	r3, r0
 8007846:	d00b      	beq.n	8007860 <__ieee754_pow+0x978>
 8007848:	a325      	add	r3, pc, #148	; (adr r3, 80078e0 <__ieee754_pow+0x9f8>)
 800784a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007852:	f7f8 fee9 	bl	8000628 <__aeabi_dmul>
 8007856:	a322      	add	r3, pc, #136	; (adr r3, 80078e0 <__ieee754_pow+0x9f8>)
 8007858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785c:	f7ff bbdb 	b.w	8007016 <__ieee754_pow+0x12e>
 8007860:	4622      	mov	r2, r4
 8007862:	462b      	mov	r3, r5
 8007864:	f7f8 fd28 	bl	80002b8 <__aeabi_dsub>
 8007868:	4642      	mov	r2, r8
 800786a:	464b      	mov	r3, r9
 800786c:	f7f9 f962 	bl	8000b34 <__aeabi_dcmpge>
 8007870:	2800      	cmp	r0, #0
 8007872:	f43f aef1 	beq.w	8007658 <__ieee754_pow+0x770>
 8007876:	e7e7      	b.n	8007848 <__ieee754_pow+0x960>
 8007878:	f04f 0a00 	mov.w	sl, #0
 800787c:	e718      	b.n	80076b0 <__ieee754_pow+0x7c8>
 800787e:	4621      	mov	r1, r4
 8007880:	e7d4      	b.n	800782c <__ieee754_pow+0x944>
 8007882:	2000      	movs	r0, #0
 8007884:	491a      	ldr	r1, [pc, #104]	; (80078f0 <__ieee754_pow+0xa08>)
 8007886:	f7ff bb8f 	b.w	8006fa8 <__ieee754_pow+0xc0>
 800788a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800788e:	f7ff bb8b 	b.w	8006fa8 <__ieee754_pow+0xc0>
 8007892:	4630      	mov	r0, r6
 8007894:	4639      	mov	r1, r7
 8007896:	f7ff bb87 	b.w	8006fa8 <__ieee754_pow+0xc0>
 800789a:	4693      	mov	fp, r2
 800789c:	f7ff bb98 	b.w	8006fd0 <__ieee754_pow+0xe8>
 80078a0:	00000000 	.word	0x00000000
 80078a4:	3fe62e43 	.word	0x3fe62e43
 80078a8:	fefa39ef 	.word	0xfefa39ef
 80078ac:	3fe62e42 	.word	0x3fe62e42
 80078b0:	0ca86c39 	.word	0x0ca86c39
 80078b4:	be205c61 	.word	0xbe205c61
 80078b8:	72bea4d0 	.word	0x72bea4d0
 80078bc:	3e663769 	.word	0x3e663769
 80078c0:	c5d26bf1 	.word	0xc5d26bf1
 80078c4:	3ebbbd41 	.word	0x3ebbbd41
 80078c8:	af25de2c 	.word	0xaf25de2c
 80078cc:	3f11566a 	.word	0x3f11566a
 80078d0:	16bebd93 	.word	0x16bebd93
 80078d4:	3f66c16c 	.word	0x3f66c16c
 80078d8:	5555553e 	.word	0x5555553e
 80078dc:	3fc55555 	.word	0x3fc55555
 80078e0:	c2f8f359 	.word	0xc2f8f359
 80078e4:	01a56e1f 	.word	0x01a56e1f
 80078e8:	3fe00000 	.word	0x3fe00000
 80078ec:	000fffff 	.word	0x000fffff
 80078f0:	3ff00000 	.word	0x3ff00000
 80078f4:	4090cbff 	.word	0x4090cbff
 80078f8:	3f6f3400 	.word	0x3f6f3400
 80078fc:	652b82fe 	.word	0x652b82fe
 8007900:	3c971547 	.word	0x3c971547

08007904 <__ieee754_sqrt>:
 8007904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007908:	4955      	ldr	r1, [pc, #340]	; (8007a60 <__ieee754_sqrt+0x15c>)
 800790a:	ec55 4b10 	vmov	r4, r5, d0
 800790e:	43a9      	bics	r1, r5
 8007910:	462b      	mov	r3, r5
 8007912:	462a      	mov	r2, r5
 8007914:	d112      	bne.n	800793c <__ieee754_sqrt+0x38>
 8007916:	ee10 2a10 	vmov	r2, s0
 800791a:	ee10 0a10 	vmov	r0, s0
 800791e:	4629      	mov	r1, r5
 8007920:	f7f8 fe82 	bl	8000628 <__aeabi_dmul>
 8007924:	4602      	mov	r2, r0
 8007926:	460b      	mov	r3, r1
 8007928:	4620      	mov	r0, r4
 800792a:	4629      	mov	r1, r5
 800792c:	f7f8 fcc6 	bl	80002bc <__adddf3>
 8007930:	4604      	mov	r4, r0
 8007932:	460d      	mov	r5, r1
 8007934:	ec45 4b10 	vmov	d0, r4, r5
 8007938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800793c:	2d00      	cmp	r5, #0
 800793e:	ee10 0a10 	vmov	r0, s0
 8007942:	4621      	mov	r1, r4
 8007944:	dc0f      	bgt.n	8007966 <__ieee754_sqrt+0x62>
 8007946:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800794a:	4330      	orrs	r0, r6
 800794c:	d0f2      	beq.n	8007934 <__ieee754_sqrt+0x30>
 800794e:	b155      	cbz	r5, 8007966 <__ieee754_sqrt+0x62>
 8007950:	ee10 2a10 	vmov	r2, s0
 8007954:	4620      	mov	r0, r4
 8007956:	4629      	mov	r1, r5
 8007958:	f7f8 fcae 	bl	80002b8 <__aeabi_dsub>
 800795c:	4602      	mov	r2, r0
 800795e:	460b      	mov	r3, r1
 8007960:	f7f8 ff8c 	bl	800087c <__aeabi_ddiv>
 8007964:	e7e4      	b.n	8007930 <__ieee754_sqrt+0x2c>
 8007966:	151b      	asrs	r3, r3, #20
 8007968:	d073      	beq.n	8007a52 <__ieee754_sqrt+0x14e>
 800796a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800796e:	07dd      	lsls	r5, r3, #31
 8007970:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007974:	bf48      	it	mi
 8007976:	0fc8      	lsrmi	r0, r1, #31
 8007978:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800797c:	bf44      	itt	mi
 800797e:	0049      	lslmi	r1, r1, #1
 8007980:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8007984:	2500      	movs	r5, #0
 8007986:	1058      	asrs	r0, r3, #1
 8007988:	0fcb      	lsrs	r3, r1, #31
 800798a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800798e:	0049      	lsls	r1, r1, #1
 8007990:	2316      	movs	r3, #22
 8007992:	462c      	mov	r4, r5
 8007994:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8007998:	19a7      	adds	r7, r4, r6
 800799a:	4297      	cmp	r7, r2
 800799c:	bfde      	ittt	le
 800799e:	19bc      	addle	r4, r7, r6
 80079a0:	1bd2      	suble	r2, r2, r7
 80079a2:	19ad      	addle	r5, r5, r6
 80079a4:	0fcf      	lsrs	r7, r1, #31
 80079a6:	3b01      	subs	r3, #1
 80079a8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80079ac:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80079b0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80079b4:	d1f0      	bne.n	8007998 <__ieee754_sqrt+0x94>
 80079b6:	f04f 0c20 	mov.w	ip, #32
 80079ba:	469e      	mov	lr, r3
 80079bc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80079c0:	42a2      	cmp	r2, r4
 80079c2:	eb06 070e 	add.w	r7, r6, lr
 80079c6:	dc02      	bgt.n	80079ce <__ieee754_sqrt+0xca>
 80079c8:	d112      	bne.n	80079f0 <__ieee754_sqrt+0xec>
 80079ca:	428f      	cmp	r7, r1
 80079cc:	d810      	bhi.n	80079f0 <__ieee754_sqrt+0xec>
 80079ce:	2f00      	cmp	r7, #0
 80079d0:	eb07 0e06 	add.w	lr, r7, r6
 80079d4:	da42      	bge.n	8007a5c <__ieee754_sqrt+0x158>
 80079d6:	f1be 0f00 	cmp.w	lr, #0
 80079da:	db3f      	blt.n	8007a5c <__ieee754_sqrt+0x158>
 80079dc:	f104 0801 	add.w	r8, r4, #1
 80079e0:	1b12      	subs	r2, r2, r4
 80079e2:	428f      	cmp	r7, r1
 80079e4:	bf88      	it	hi
 80079e6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80079ea:	1bc9      	subs	r1, r1, r7
 80079ec:	4433      	add	r3, r6
 80079ee:	4644      	mov	r4, r8
 80079f0:	0052      	lsls	r2, r2, #1
 80079f2:	f1bc 0c01 	subs.w	ip, ip, #1
 80079f6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80079fa:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80079fe:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007a02:	d1dd      	bne.n	80079c0 <__ieee754_sqrt+0xbc>
 8007a04:	430a      	orrs	r2, r1
 8007a06:	d006      	beq.n	8007a16 <__ieee754_sqrt+0x112>
 8007a08:	1c5c      	adds	r4, r3, #1
 8007a0a:	bf13      	iteet	ne
 8007a0c:	3301      	addne	r3, #1
 8007a0e:	3501      	addeq	r5, #1
 8007a10:	4663      	moveq	r3, ip
 8007a12:	f023 0301 	bicne.w	r3, r3, #1
 8007a16:	106a      	asrs	r2, r5, #1
 8007a18:	085b      	lsrs	r3, r3, #1
 8007a1a:	07e9      	lsls	r1, r5, #31
 8007a1c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007a20:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007a24:	bf48      	it	mi
 8007a26:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8007a2a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8007a2e:	461c      	mov	r4, r3
 8007a30:	e780      	b.n	8007934 <__ieee754_sqrt+0x30>
 8007a32:	0aca      	lsrs	r2, r1, #11
 8007a34:	3815      	subs	r0, #21
 8007a36:	0549      	lsls	r1, r1, #21
 8007a38:	2a00      	cmp	r2, #0
 8007a3a:	d0fa      	beq.n	8007a32 <__ieee754_sqrt+0x12e>
 8007a3c:	02d6      	lsls	r6, r2, #11
 8007a3e:	d50a      	bpl.n	8007a56 <__ieee754_sqrt+0x152>
 8007a40:	f1c3 0420 	rsb	r4, r3, #32
 8007a44:	fa21 f404 	lsr.w	r4, r1, r4
 8007a48:	1e5d      	subs	r5, r3, #1
 8007a4a:	4099      	lsls	r1, r3
 8007a4c:	4322      	orrs	r2, r4
 8007a4e:	1b43      	subs	r3, r0, r5
 8007a50:	e78b      	b.n	800796a <__ieee754_sqrt+0x66>
 8007a52:	4618      	mov	r0, r3
 8007a54:	e7f0      	b.n	8007a38 <__ieee754_sqrt+0x134>
 8007a56:	0052      	lsls	r2, r2, #1
 8007a58:	3301      	adds	r3, #1
 8007a5a:	e7ef      	b.n	8007a3c <__ieee754_sqrt+0x138>
 8007a5c:	46a0      	mov	r8, r4
 8007a5e:	e7bf      	b.n	80079e0 <__ieee754_sqrt+0xdc>
 8007a60:	7ff00000 	.word	0x7ff00000

08007a64 <__ieee754_sqrtf>:
 8007a64:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007a68:	4770      	bx	lr

08007a6a <fabs>:
 8007a6a:	ec51 0b10 	vmov	r0, r1, d0
 8007a6e:	ee10 2a10 	vmov	r2, s0
 8007a72:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007a76:	ec43 2b10 	vmov	d0, r2, r3
 8007a7a:	4770      	bx	lr

08007a7c <finite>:
 8007a7c:	ee10 3a90 	vmov	r3, s1
 8007a80:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8007a84:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007a88:	0fc0      	lsrs	r0, r0, #31
 8007a8a:	4770      	bx	lr

08007a8c <matherr>:
 8007a8c:	2000      	movs	r0, #0
 8007a8e:	4770      	bx	lr

08007a90 <nan>:
 8007a90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007a98 <nan+0x8>
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop
 8007a98:	00000000 	.word	0x00000000
 8007a9c:	7ff80000 	.word	0x7ff80000

08007aa0 <rint>:
 8007aa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007aa2:	ec51 0b10 	vmov	r0, r1, d0
 8007aa6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007aaa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007aae:	2e13      	cmp	r6, #19
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	ee10 4a10 	vmov	r4, s0
 8007ab6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8007aba:	dc56      	bgt.n	8007b6a <rint+0xca>
 8007abc:	2e00      	cmp	r6, #0
 8007abe:	da2b      	bge.n	8007b18 <rint+0x78>
 8007ac0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007ac4:	4302      	orrs	r2, r0
 8007ac6:	d023      	beq.n	8007b10 <rint+0x70>
 8007ac8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007acc:	4302      	orrs	r2, r0
 8007ace:	4254      	negs	r4, r2
 8007ad0:	4314      	orrs	r4, r2
 8007ad2:	0c4b      	lsrs	r3, r1, #17
 8007ad4:	0b24      	lsrs	r4, r4, #12
 8007ad6:	045b      	lsls	r3, r3, #17
 8007ad8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8007adc:	ea44 0103 	orr.w	r1, r4, r3
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	492f      	ldr	r1, [pc, #188]	; (8007ba0 <rint+0x100>)
 8007ae4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8007ae8:	e9d1 6700 	ldrd	r6, r7, [r1]
 8007aec:	4602      	mov	r2, r0
 8007aee:	4639      	mov	r1, r7
 8007af0:	4630      	mov	r0, r6
 8007af2:	f7f8 fbe3 	bl	80002bc <__adddf3>
 8007af6:	e9cd 0100 	strd	r0, r1, [sp]
 8007afa:	463b      	mov	r3, r7
 8007afc:	4632      	mov	r2, r6
 8007afe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b02:	f7f8 fbd9 	bl	80002b8 <__aeabi_dsub>
 8007b06:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007b0a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8007b0e:	4639      	mov	r1, r7
 8007b10:	ec41 0b10 	vmov	d0, r0, r1
 8007b14:	b003      	add	sp, #12
 8007b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b18:	4a22      	ldr	r2, [pc, #136]	; (8007ba4 <rint+0x104>)
 8007b1a:	4132      	asrs	r2, r6
 8007b1c:	ea01 0702 	and.w	r7, r1, r2
 8007b20:	4307      	orrs	r7, r0
 8007b22:	d0f5      	beq.n	8007b10 <rint+0x70>
 8007b24:	0852      	lsrs	r2, r2, #1
 8007b26:	4011      	ands	r1, r2
 8007b28:	430c      	orrs	r4, r1
 8007b2a:	d00b      	beq.n	8007b44 <rint+0xa4>
 8007b2c:	ea23 0202 	bic.w	r2, r3, r2
 8007b30:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007b34:	2e13      	cmp	r6, #19
 8007b36:	fa43 f306 	asr.w	r3, r3, r6
 8007b3a:	bf0c      	ite	eq
 8007b3c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8007b40:	2400      	movne	r4, #0
 8007b42:	4313      	orrs	r3, r2
 8007b44:	4916      	ldr	r1, [pc, #88]	; (8007ba0 <rint+0x100>)
 8007b46:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8007b4a:	4622      	mov	r2, r4
 8007b4c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007b50:	4620      	mov	r0, r4
 8007b52:	4629      	mov	r1, r5
 8007b54:	f7f8 fbb2 	bl	80002bc <__adddf3>
 8007b58:	e9cd 0100 	strd	r0, r1, [sp]
 8007b5c:	4622      	mov	r2, r4
 8007b5e:	462b      	mov	r3, r5
 8007b60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b64:	f7f8 fba8 	bl	80002b8 <__aeabi_dsub>
 8007b68:	e7d2      	b.n	8007b10 <rint+0x70>
 8007b6a:	2e33      	cmp	r6, #51	; 0x33
 8007b6c:	dd07      	ble.n	8007b7e <rint+0xde>
 8007b6e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007b72:	d1cd      	bne.n	8007b10 <rint+0x70>
 8007b74:	ee10 2a10 	vmov	r2, s0
 8007b78:	f7f8 fba0 	bl	80002bc <__adddf3>
 8007b7c:	e7c8      	b.n	8007b10 <rint+0x70>
 8007b7e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8007b82:	f04f 32ff 	mov.w	r2, #4294967295
 8007b86:	40f2      	lsrs	r2, r6
 8007b88:	4210      	tst	r0, r2
 8007b8a:	d0c1      	beq.n	8007b10 <rint+0x70>
 8007b8c:	0852      	lsrs	r2, r2, #1
 8007b8e:	4210      	tst	r0, r2
 8007b90:	bf1f      	itttt	ne
 8007b92:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8007b96:	ea20 0202 	bicne.w	r2, r0, r2
 8007b9a:	4134      	asrne	r4, r6
 8007b9c:	4314      	orrne	r4, r2
 8007b9e:	e7d1      	b.n	8007b44 <rint+0xa4>
 8007ba0:	08008050 	.word	0x08008050
 8007ba4:	000fffff 	.word	0x000fffff

08007ba8 <scalbn>:
 8007ba8:	b570      	push	{r4, r5, r6, lr}
 8007baa:	ec55 4b10 	vmov	r4, r5, d0
 8007bae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007bb2:	4606      	mov	r6, r0
 8007bb4:	462b      	mov	r3, r5
 8007bb6:	b9aa      	cbnz	r2, 8007be4 <scalbn+0x3c>
 8007bb8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007bbc:	4323      	orrs	r3, r4
 8007bbe:	d03b      	beq.n	8007c38 <scalbn+0x90>
 8007bc0:	4b31      	ldr	r3, [pc, #196]	; (8007c88 <scalbn+0xe0>)
 8007bc2:	4629      	mov	r1, r5
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	ee10 0a10 	vmov	r0, s0
 8007bca:	f7f8 fd2d 	bl	8000628 <__aeabi_dmul>
 8007bce:	4b2f      	ldr	r3, [pc, #188]	; (8007c8c <scalbn+0xe4>)
 8007bd0:	429e      	cmp	r6, r3
 8007bd2:	4604      	mov	r4, r0
 8007bd4:	460d      	mov	r5, r1
 8007bd6:	da12      	bge.n	8007bfe <scalbn+0x56>
 8007bd8:	a327      	add	r3, pc, #156	; (adr r3, 8007c78 <scalbn+0xd0>)
 8007bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bde:	f7f8 fd23 	bl	8000628 <__aeabi_dmul>
 8007be2:	e009      	b.n	8007bf8 <scalbn+0x50>
 8007be4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007be8:	428a      	cmp	r2, r1
 8007bea:	d10c      	bne.n	8007c06 <scalbn+0x5e>
 8007bec:	ee10 2a10 	vmov	r2, s0
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	4629      	mov	r1, r5
 8007bf4:	f7f8 fb62 	bl	80002bc <__adddf3>
 8007bf8:	4604      	mov	r4, r0
 8007bfa:	460d      	mov	r5, r1
 8007bfc:	e01c      	b.n	8007c38 <scalbn+0x90>
 8007bfe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007c02:	460b      	mov	r3, r1
 8007c04:	3a36      	subs	r2, #54	; 0x36
 8007c06:	4432      	add	r2, r6
 8007c08:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007c0c:	428a      	cmp	r2, r1
 8007c0e:	dd0b      	ble.n	8007c28 <scalbn+0x80>
 8007c10:	ec45 4b11 	vmov	d1, r4, r5
 8007c14:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8007c80 <scalbn+0xd8>
 8007c18:	f000 f83c 	bl	8007c94 <copysign>
 8007c1c:	a318      	add	r3, pc, #96	; (adr r3, 8007c80 <scalbn+0xd8>)
 8007c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c22:	ec51 0b10 	vmov	r0, r1, d0
 8007c26:	e7da      	b.n	8007bde <scalbn+0x36>
 8007c28:	2a00      	cmp	r2, #0
 8007c2a:	dd08      	ble.n	8007c3e <scalbn+0x96>
 8007c2c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007c30:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007c34:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007c38:	ec45 4b10 	vmov	d0, r4, r5
 8007c3c:	bd70      	pop	{r4, r5, r6, pc}
 8007c3e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007c42:	da0d      	bge.n	8007c60 <scalbn+0xb8>
 8007c44:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007c48:	429e      	cmp	r6, r3
 8007c4a:	ec45 4b11 	vmov	d1, r4, r5
 8007c4e:	dce1      	bgt.n	8007c14 <scalbn+0x6c>
 8007c50:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8007c78 <scalbn+0xd0>
 8007c54:	f000 f81e 	bl	8007c94 <copysign>
 8007c58:	a307      	add	r3, pc, #28	; (adr r3, 8007c78 <scalbn+0xd0>)
 8007c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5e:	e7e0      	b.n	8007c22 <scalbn+0x7a>
 8007c60:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007c64:	3236      	adds	r2, #54	; 0x36
 8007c66:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007c6a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007c6e:	4620      	mov	r0, r4
 8007c70:	4629      	mov	r1, r5
 8007c72:	2200      	movs	r2, #0
 8007c74:	4b06      	ldr	r3, [pc, #24]	; (8007c90 <scalbn+0xe8>)
 8007c76:	e7b2      	b.n	8007bde <scalbn+0x36>
 8007c78:	c2f8f359 	.word	0xc2f8f359
 8007c7c:	01a56e1f 	.word	0x01a56e1f
 8007c80:	8800759c 	.word	0x8800759c
 8007c84:	7e37e43c 	.word	0x7e37e43c
 8007c88:	43500000 	.word	0x43500000
 8007c8c:	ffff3cb0 	.word	0xffff3cb0
 8007c90:	3c900000 	.word	0x3c900000

08007c94 <copysign>:
 8007c94:	ec51 0b10 	vmov	r0, r1, d0
 8007c98:	ee11 0a90 	vmov	r0, s3
 8007c9c:	ee10 2a10 	vmov	r2, s0
 8007ca0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007ca4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007ca8:	ea41 0300 	orr.w	r3, r1, r0
 8007cac:	ec43 2b10 	vmov	d0, r2, r3
 8007cb0:	4770      	bx	lr
	...

08007cb4 <_init>:
 8007cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cb6:	bf00      	nop
 8007cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cba:	bc08      	pop	{r3}
 8007cbc:	469e      	mov	lr, r3
 8007cbe:	4770      	bx	lr

08007cc0 <_fini>:
 8007cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc2:	bf00      	nop
 8007cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cc6:	bc08      	pop	{r3}
 8007cc8:	469e      	mov	lr, r3
 8007cca:	4770      	bx	lr
