
Lab-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018d4  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001a90  08001a90  00011a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ad0  08001ad0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001ad0  08001ad0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ad0  08001ad0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ad0  08001ad0  00011ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ad4  08001ad4  00011ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001ad8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001ae4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001ae4  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005869  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001006  00000000  00000000  000258a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005a8  00000000  00000000  000268b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000510  00000000  00000000  00026e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000281f8  00000000  00000000  00027368  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004e62  00000000  00000000  0004f560  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f61bc  00000000  00000000  000543c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014a57e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000014d0  00000000  00000000  0014a5fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08001a78 	.word	0x08001a78

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08001a78 	.word	0x08001a78

080001fc <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000202:	f000 f974 	bl	80004ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000206:	f000 f81f 	bl	8000248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020a:	f000 f86f 	bl	80002ec <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int changeState = 0;
 800020e:	2300      	movs	r3, #0
 8000210:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */
	  if(!HAL_GPIO_ReadPin(BUTTON_BLUE_GPIO_Port, BUTTON_BLUE_Pin)){
 8000212:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000216:	480a      	ldr	r0, [pc, #40]	; (8000240 <main+0x44>)
 8000218:	f000 fc56 	bl	8000ac8 <HAL_GPIO_ReadPin>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d10a      	bne.n	8000238 <main+0x3c>
		  if(!changeState){ //prevents toggling if button is on hold
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2b00      	cmp	r3, #0
 8000226:	d1f4      	bne.n	8000212 <main+0x16>
			  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000228:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800022c:	4805      	ldr	r0, [pc, #20]	; (8000244 <main+0x48>)
 800022e:	f000 fc7b 	bl	8000b28 <HAL_GPIO_TogglePin>
			  changeState = 1;
 8000232:	2301      	movs	r3, #1
 8000234:	607b      	str	r3, [r7, #4]
 8000236:	e7ec      	b.n	8000212 <main+0x16>
		  }

//		  HAL_Delay(500); //Alow for the button to take an effect when button is pressed rather than toggling it again and again
	  } else {
		  changeState = 0;
 8000238:	2300      	movs	r3, #0
 800023a:	607b      	str	r3, [r7, #4]
	  if(!HAL_GPIO_ReadPin(BUTTON_BLUE_GPIO_Port, BUTTON_BLUE_Pin)){
 800023c:	e7e9      	b.n	8000212 <main+0x16>
 800023e:	bf00      	nop
 8000240:	48000800 	.word	0x48000800
 8000244:	48000400 	.word	0x48000400

08000248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b096      	sub	sp, #88	; 0x58
 800024c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	f107 0314 	add.w	r3, r7, #20
 8000252:	2244      	movs	r2, #68	; 0x44
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f001 fc06 	bl	8001a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025c:	463b      	mov	r3, r7
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
 8000268:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800026a:	2000      	movs	r0, #0
 800026c:	f000 fc96 	bl	8000b9c <HAL_PWREx_ControlVoltageScaling>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000276:	f000 f889 	bl	800038c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800027a:	2310      	movs	r3, #16
 800027c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800027e:	2301      	movs	r3, #1
 8000280:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000282:	2300      	movs	r3, #0
 8000284:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000286:	2360      	movs	r3, #96	; 0x60
 8000288:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028a:	2302      	movs	r3, #2
 800028c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800028e:	2301      	movs	r3, #1
 8000290:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000292:	2301      	movs	r3, #1
 8000294:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000296:	233c      	movs	r3, #60	; 0x3c
 8000298:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800029a:	2302      	movs	r3, #2
 800029c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800029e:	2302      	movs	r3, #2
 80002a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002a2:	2302      	movs	r3, #2
 80002a4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a6:	f107 0314 	add.w	r3, r7, #20
 80002aa:	4618      	mov	r0, r3
 80002ac:	f000 fd1a 	bl	8000ce4 <HAL_RCC_OscConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x72>
  {
    Error_Handler();
 80002b6:	f000 f869 	bl	800038c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ba:	230f      	movs	r3, #15
 80002bc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002be:	2303      	movs	r3, #3
 80002c0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80002ce:	463b      	mov	r3, r7
 80002d0:	2105      	movs	r1, #5
 80002d2:	4618      	mov	r0, r3
 80002d4:	f001 f92c 	bl	8001530 <HAL_RCC_ClockConfig>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002de:	f000 f855 	bl	800038c <Error_Handler>
  }
}
 80002e2:	bf00      	nop
 80002e4:	3758      	adds	r7, #88	; 0x58
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
	...

080002ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b088      	sub	sp, #32
 80002f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f2:	f107 030c 	add.w	r3, r7, #12
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]
 8000300:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000302:	4b1f      	ldr	r3, [pc, #124]	; (8000380 <MX_GPIO_Init+0x94>)
 8000304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000306:	4a1e      	ldr	r2, [pc, #120]	; (8000380 <MX_GPIO_Init+0x94>)
 8000308:	f043 0304 	orr.w	r3, r3, #4
 800030c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800030e:	4b1c      	ldr	r3, [pc, #112]	; (8000380 <MX_GPIO_Init+0x94>)
 8000310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000312:	f003 0304 	and.w	r3, r3, #4
 8000316:	60bb      	str	r3, [r7, #8]
 8000318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800031a:	4b19      	ldr	r3, [pc, #100]	; (8000380 <MX_GPIO_Init+0x94>)
 800031c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800031e:	4a18      	ldr	r2, [pc, #96]	; (8000380 <MX_GPIO_Init+0x94>)
 8000320:	f043 0302 	orr.w	r3, r3, #2
 8000324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000326:	4b16      	ldr	r3, [pc, #88]	; (8000380 <MX_GPIO_Init+0x94>)
 8000328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800032a:	f003 0302 	and.w	r3, r3, #2
 800032e:	607b      	str	r3, [r7, #4]
 8000330:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000332:	2200      	movs	r2, #0
 8000334:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000338:	4812      	ldr	r0, [pc, #72]	; (8000384 <MX_GPIO_Init+0x98>)
 800033a:	f000 fbdd 	bl	8000af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_BLUE_Pin */
  GPIO_InitStruct.Pin = BUTTON_BLUE_Pin;
 800033e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000342:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000344:	2300      	movs	r3, #0
 8000346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000348:	2300      	movs	r3, #0
 800034a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_BLUE_GPIO_Port, &GPIO_InitStruct);
 800034c:	f107 030c 	add.w	r3, r7, #12
 8000350:	4619      	mov	r1, r3
 8000352:	480d      	ldr	r0, [pc, #52]	; (8000388 <MX_GPIO_Init+0x9c>)
 8000354:	f000 fa26 	bl	80007a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000358:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800035c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800035e:	2301      	movs	r3, #1
 8000360:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000362:	2300      	movs	r3, #0
 8000364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000366:	2300      	movs	r3, #0
 8000368:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800036a:	f107 030c 	add.w	r3, r7, #12
 800036e:	4619      	mov	r1, r3
 8000370:	4804      	ldr	r0, [pc, #16]	; (8000384 <MX_GPIO_Init+0x98>)
 8000372:	f000 fa17 	bl	80007a4 <HAL_GPIO_Init>

}
 8000376:	bf00      	nop
 8000378:	3720      	adds	r7, #32
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	40021000 	.word	0x40021000
 8000384:	48000400 	.word	0x48000400
 8000388:	48000800 	.word	0x48000800

0800038c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000390:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000392:	e7fe      	b.n	8000392 <Error_Handler+0x6>

08000394 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800039a:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <HAL_MspInit+0x44>)
 800039c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800039e:	4a0e      	ldr	r2, [pc, #56]	; (80003d8 <HAL_MspInit+0x44>)
 80003a0:	f043 0301 	orr.w	r3, r3, #1
 80003a4:	6613      	str	r3, [r2, #96]	; 0x60
 80003a6:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <HAL_MspInit+0x44>)
 80003a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003aa:	f003 0301 	and.w	r3, r3, #1
 80003ae:	607b      	str	r3, [r7, #4]
 80003b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003b2:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <HAL_MspInit+0x44>)
 80003b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003b6:	4a08      	ldr	r2, [pc, #32]	; (80003d8 <HAL_MspInit+0x44>)
 80003b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003bc:	6593      	str	r3, [r2, #88]	; 0x58
 80003be:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <HAL_MspInit+0x44>)
 80003c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003c6:	603b      	str	r3, [r7, #0]
 80003c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ca:	bf00      	nop
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	40021000 	.word	0x40021000

080003dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003e0:	e7fe      	b.n	80003e0 <NMI_Handler+0x4>

080003e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003e2:	b480      	push	{r7}
 80003e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003e6:	e7fe      	b.n	80003e6 <HardFault_Handler+0x4>

080003e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003ec:	e7fe      	b.n	80003ec <MemManage_Handler+0x4>

080003ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003ee:	b480      	push	{r7}
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003f2:	e7fe      	b.n	80003f2 <BusFault_Handler+0x4>

080003f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003f8:	e7fe      	b.n	80003f8 <UsageFault_Handler+0x4>

080003fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003fa:	b480      	push	{r7}
 80003fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003fe:	bf00      	nop
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr

08000408 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800040c:	bf00      	nop
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr

08000416 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000416:	b480      	push	{r7}
 8000418:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800041a:	bf00      	nop
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr

08000424 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000428:	f000 f8b6 	bl	8000598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800042c:	bf00      	nop
 800042e:	bd80      	pop	{r7, pc}

08000430 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000434:	4b17      	ldr	r3, [pc, #92]	; (8000494 <SystemInit+0x64>)
 8000436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800043a:	4a16      	ldr	r2, [pc, #88]	; (8000494 <SystemInit+0x64>)
 800043c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000440:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000444:	4b14      	ldr	r3, [pc, #80]	; (8000498 <SystemInit+0x68>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a13      	ldr	r2, [pc, #76]	; (8000498 <SystemInit+0x68>)
 800044a:	f043 0301 	orr.w	r3, r3, #1
 800044e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000450:	4b11      	ldr	r3, [pc, #68]	; (8000498 <SystemInit+0x68>)
 8000452:	2200      	movs	r2, #0
 8000454:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000456:	4b10      	ldr	r3, [pc, #64]	; (8000498 <SystemInit+0x68>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a0f      	ldr	r2, [pc, #60]	; (8000498 <SystemInit+0x68>)
 800045c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000460:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000464:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000466:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <SystemInit+0x68>)
 8000468:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800046c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800046e:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <SystemInit+0x68>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a09      	ldr	r2, [pc, #36]	; (8000498 <SystemInit+0x68>)
 8000474:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000478:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800047a:	4b07      	ldr	r3, [pc, #28]	; (8000498 <SystemInit+0x68>)
 800047c:	2200      	movs	r2, #0
 800047e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000480:	4b04      	ldr	r3, [pc, #16]	; (8000494 <SystemInit+0x64>)
 8000482:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000486:	609a      	str	r2, [r3, #8]
#endif
}
 8000488:	bf00      	nop
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	e000ed00 	.word	0xe000ed00
 8000498:	40021000 	.word	0x40021000

0800049c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800049c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004a0:	f7ff ffc6 	bl	8000430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80004a4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80004a6:	e003      	b.n	80004b0 <LoopCopyDataInit>

080004a8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80004a8:	4b0b      	ldr	r3, [pc, #44]	; (80004d8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80004aa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80004ac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80004ae:	3104      	adds	r1, #4

080004b0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80004b0:	480a      	ldr	r0, [pc, #40]	; (80004dc <LoopForever+0xa>)
	ldr	r3, =_edata
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80004b4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80004b6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80004b8:	d3f6      	bcc.n	80004a8 <CopyDataInit>
	ldr	r2, =_sbss
 80004ba:	4a0a      	ldr	r2, [pc, #40]	; (80004e4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80004bc:	e002      	b.n	80004c4 <LoopFillZerobss>

080004be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80004be:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80004c0:	f842 3b04 	str.w	r3, [r2], #4

080004c4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80004c4:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <LoopForever+0x16>)
	cmp	r2, r3
 80004c6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80004c8:	d3f9      	bcc.n	80004be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004ca:	f001 faa9 	bl	8001a20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80004ce:	f7ff fe95 	bl	80001fc <main>

080004d2 <LoopForever>:

LoopForever:
    b LoopForever
 80004d2:	e7fe      	b.n	80004d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80004d4:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80004d8:	08001ad8 	.word	0x08001ad8
	ldr	r0, =_sdata
 80004dc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80004e0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80004e4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80004e8:	2000002c 	.word	0x2000002c

080004ec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80004ec:	e7fe      	b.n	80004ec <ADC1_IRQHandler>

080004ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004ee:	b580      	push	{r7, lr}
 80004f0:	b082      	sub	sp, #8
 80004f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004f4:	2300      	movs	r3, #0
 80004f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f8:	2003      	movs	r0, #3
 80004fa:	f000 f91f 	bl	800073c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004fe:	2000      	movs	r0, #0
 8000500:	f000 f80e 	bl	8000520 <HAL_InitTick>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d002      	beq.n	8000510 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800050a:	2301      	movs	r3, #1
 800050c:	71fb      	strb	r3, [r7, #7]
 800050e:	e001      	b.n	8000514 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000510:	f7ff ff40 	bl	8000394 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000514:	79fb      	ldrb	r3, [r7, #7]
}
 8000516:	4618      	mov	r0, r3
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
	...

08000520 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000528:	2300      	movs	r3, #0
 800052a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800052c:	4b17      	ldr	r3, [pc, #92]	; (800058c <HAL_InitTick+0x6c>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d023      	beq.n	800057c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000534:	4b16      	ldr	r3, [pc, #88]	; (8000590 <HAL_InitTick+0x70>)
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	4b14      	ldr	r3, [pc, #80]	; (800058c <HAL_InitTick+0x6c>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	4619      	mov	r1, r3
 800053e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000542:	fbb3 f3f1 	udiv	r3, r3, r1
 8000546:	fbb2 f3f3 	udiv	r3, r2, r3
 800054a:	4618      	mov	r0, r3
 800054c:	f000 f91d 	bl	800078a <HAL_SYSTICK_Config>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d10f      	bne.n	8000576 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2b0f      	cmp	r3, #15
 800055a:	d809      	bhi.n	8000570 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800055c:	2200      	movs	r2, #0
 800055e:	6879      	ldr	r1, [r7, #4]
 8000560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000564:	f000 f8f5 	bl	8000752 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000568:	4a0a      	ldr	r2, [pc, #40]	; (8000594 <HAL_InitTick+0x74>)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	6013      	str	r3, [r2, #0]
 800056e:	e007      	b.n	8000580 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000570:	2301      	movs	r3, #1
 8000572:	73fb      	strb	r3, [r7, #15]
 8000574:	e004      	b.n	8000580 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000576:	2301      	movs	r3, #1
 8000578:	73fb      	strb	r3, [r7, #15]
 800057a:	e001      	b.n	8000580 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800057c:	2301      	movs	r3, #1
 800057e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000580:	7bfb      	ldrb	r3, [r7, #15]
}
 8000582:	4618      	mov	r0, r3
 8000584:	3710      	adds	r7, #16
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	20000008 	.word	0x20000008
 8000590:	20000000 	.word	0x20000000
 8000594:	20000004 	.word	0x20000004

08000598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <HAL_IncTick+0x20>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	461a      	mov	r2, r3
 80005a2:	4b06      	ldr	r3, [pc, #24]	; (80005bc <HAL_IncTick+0x24>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4413      	add	r3, r2
 80005a8:	4a04      	ldr	r2, [pc, #16]	; (80005bc <HAL_IncTick+0x24>)
 80005aa:	6013      	str	r3, [r2, #0]
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000008 	.word	0x20000008
 80005bc:	20000028 	.word	0x20000028

080005c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  return uwTick;
 80005c4:	4b03      	ldr	r3, [pc, #12]	; (80005d4 <HAL_GetTick+0x14>)
 80005c6:	681b      	ldr	r3, [r3, #0]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000028 	.word	0x20000028

080005d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f003 0307 	and.w	r3, r3, #7
 80005e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <__NVIC_SetPriorityGrouping+0x44>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ee:	68ba      	ldr	r2, [r7, #8]
 80005f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005f4:	4013      	ands	r3, r2
 80005f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000600:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800060a:	4a04      	ldr	r2, [pc, #16]	; (800061c <__NVIC_SetPriorityGrouping+0x44>)
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	60d3      	str	r3, [r2, #12]
}
 8000610:	bf00      	nop
 8000612:	3714      	adds	r7, #20
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000624:	4b04      	ldr	r3, [pc, #16]	; (8000638 <__NVIC_GetPriorityGrouping+0x18>)
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	0a1b      	lsrs	r3, r3, #8
 800062a:	f003 0307 	and.w	r3, r3, #7
}
 800062e:	4618      	mov	r0, r3
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	6039      	str	r1, [r7, #0]
 8000646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064c:	2b00      	cmp	r3, #0
 800064e:	db0a      	blt.n	8000666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	b2da      	uxtb	r2, r3
 8000654:	490c      	ldr	r1, [pc, #48]	; (8000688 <__NVIC_SetPriority+0x4c>)
 8000656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065a:	0112      	lsls	r2, r2, #4
 800065c:	b2d2      	uxtb	r2, r2
 800065e:	440b      	add	r3, r1
 8000660:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000664:	e00a      	b.n	800067c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	b2da      	uxtb	r2, r3
 800066a:	4908      	ldr	r1, [pc, #32]	; (800068c <__NVIC_SetPriority+0x50>)
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	f003 030f 	and.w	r3, r3, #15
 8000672:	3b04      	subs	r3, #4
 8000674:	0112      	lsls	r2, r2, #4
 8000676:	b2d2      	uxtb	r2, r2
 8000678:	440b      	add	r3, r1
 800067a:	761a      	strb	r2, [r3, #24]
}
 800067c:	bf00      	nop
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	e000e100 	.word	0xe000e100
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000690:	b480      	push	{r7}
 8000692:	b089      	sub	sp, #36	; 0x24
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	f003 0307 	and.w	r3, r3, #7
 80006a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a4:	69fb      	ldr	r3, [r7, #28]
 80006a6:	f1c3 0307 	rsb	r3, r3, #7
 80006aa:	2b04      	cmp	r3, #4
 80006ac:	bf28      	it	cs
 80006ae:	2304      	movcs	r3, #4
 80006b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b2:	69fb      	ldr	r3, [r7, #28]
 80006b4:	3304      	adds	r3, #4
 80006b6:	2b06      	cmp	r3, #6
 80006b8:	d902      	bls.n	80006c0 <NVIC_EncodePriority+0x30>
 80006ba:	69fb      	ldr	r3, [r7, #28]
 80006bc:	3b03      	subs	r3, #3
 80006be:	e000      	b.n	80006c2 <NVIC_EncodePriority+0x32>
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006c8:	69bb      	ldr	r3, [r7, #24]
 80006ca:	fa02 f303 	lsl.w	r3, r2, r3
 80006ce:	43da      	mvns	r2, r3
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	401a      	ands	r2, r3
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	fa01 f303 	lsl.w	r3, r1, r3
 80006e2:	43d9      	mvns	r1, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e8:	4313      	orrs	r3, r2
         );
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3724      	adds	r7, #36	; 0x24
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
	...

080006f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3b01      	subs	r3, #1
 8000704:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000708:	d301      	bcc.n	800070e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800070a:	2301      	movs	r3, #1
 800070c:	e00f      	b.n	800072e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800070e:	4a0a      	ldr	r2, [pc, #40]	; (8000738 <SysTick_Config+0x40>)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	3b01      	subs	r3, #1
 8000714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000716:	210f      	movs	r1, #15
 8000718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800071c:	f7ff ff8e 	bl	800063c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <SysTick_Config+0x40>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000726:	4b04      	ldr	r3, [pc, #16]	; (8000738 <SysTick_Config+0x40>)
 8000728:	2207      	movs	r2, #7
 800072a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800072c:	2300      	movs	r3, #0
}
 800072e:	4618      	mov	r0, r3
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	e000e010 	.word	0xe000e010

0800073c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f7ff ff47 	bl	80005d8 <__NVIC_SetPriorityGrouping>
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b086      	sub	sp, #24
 8000756:	af00      	add	r7, sp, #0
 8000758:	4603      	mov	r3, r0
 800075a:	60b9      	str	r1, [r7, #8]
 800075c:	607a      	str	r2, [r7, #4]
 800075e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000764:	f7ff ff5c 	bl	8000620 <__NVIC_GetPriorityGrouping>
 8000768:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	68b9      	ldr	r1, [r7, #8]
 800076e:	6978      	ldr	r0, [r7, #20]
 8000770:	f7ff ff8e 	bl	8000690 <NVIC_EncodePriority>
 8000774:	4602      	mov	r2, r0
 8000776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800077a:	4611      	mov	r1, r2
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ff5d 	bl	800063c <__NVIC_SetPriority>
}
 8000782:	bf00      	nop
 8000784:	3718      	adds	r7, #24
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	b082      	sub	sp, #8
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f7ff ffb0 	bl	80006f8 <SysTick_Config>
 8000798:	4603      	mov	r3, r0
}
 800079a:	4618      	mov	r0, r3
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
	...

080007a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b087      	sub	sp, #28
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007b2:	e166      	b.n	8000a82 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	2101      	movs	r1, #1
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	fa01 f303 	lsl.w	r3, r1, r3
 80007c0:	4013      	ands	r3, r2
 80007c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	f000 8158 	beq.w	8000a7c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d00b      	beq.n	80007ec <HAL_GPIO_Init+0x48>
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	2b02      	cmp	r3, #2
 80007da:	d007      	beq.n	80007ec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007e0:	2b11      	cmp	r3, #17
 80007e2:	d003      	beq.n	80007ec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	2b12      	cmp	r3, #18
 80007ea:	d130      	bne.n	800084e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	2203      	movs	r2, #3
 80007f8:	fa02 f303 	lsl.w	r3, r2, r3
 80007fc:	43db      	mvns	r3, r3
 80007fe:	693a      	ldr	r2, [r7, #16]
 8000800:	4013      	ands	r3, r2
 8000802:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	68da      	ldr	r2, [r3, #12]
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	fa02 f303 	lsl.w	r3, r2, r3
 8000810:	693a      	ldr	r2, [r7, #16]
 8000812:	4313      	orrs	r3, r2
 8000814:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	693a      	ldr	r2, [r7, #16]
 800081a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000822:	2201      	movs	r2, #1
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	43db      	mvns	r3, r3
 800082c:	693a      	ldr	r2, [r7, #16]
 800082e:	4013      	ands	r3, r2
 8000830:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	091b      	lsrs	r3, r3, #4
 8000838:	f003 0201 	and.w	r2, r3, #1
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	fa02 f303 	lsl.w	r3, r2, r3
 8000842:	693a      	ldr	r2, [r7, #16]
 8000844:	4313      	orrs	r3, r2
 8000846:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	693a      	ldr	r2, [r7, #16]
 800084c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	68db      	ldr	r3, [r3, #12]
 8000852:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	2203      	movs	r2, #3
 800085a:	fa02 f303 	lsl.w	r3, r2, r3
 800085e:	43db      	mvns	r3, r3
 8000860:	693a      	ldr	r2, [r7, #16]
 8000862:	4013      	ands	r3, r2
 8000864:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	689a      	ldr	r2, [r3, #8]
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	fa02 f303 	lsl.w	r3, r2, r3
 8000872:	693a      	ldr	r2, [r7, #16]
 8000874:	4313      	orrs	r3, r2
 8000876:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	693a      	ldr	r2, [r7, #16]
 800087c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	2b02      	cmp	r3, #2
 8000884:	d003      	beq.n	800088e <HAL_GPIO_Init+0xea>
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	2b12      	cmp	r3, #18
 800088c:	d123      	bne.n	80008d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	08da      	lsrs	r2, r3, #3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	3208      	adds	r2, #8
 8000896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800089a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	f003 0307 	and.w	r3, r3, #7
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	220f      	movs	r2, #15
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	43db      	mvns	r3, r3
 80008ac:	693a      	ldr	r2, [r7, #16]
 80008ae:	4013      	ands	r3, r2
 80008b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	691a      	ldr	r2, [r3, #16]
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	f003 0307 	and.w	r3, r3, #7
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	fa02 f303 	lsl.w	r3, r2, r3
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	08da      	lsrs	r2, r3, #3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3208      	adds	r2, #8
 80008d0:	6939      	ldr	r1, [r7, #16]
 80008d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	2203      	movs	r2, #3
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	43db      	mvns	r3, r3
 80008e8:	693a      	ldr	r2, [r7, #16]
 80008ea:	4013      	ands	r3, r2
 80008ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	f003 0203 	and.w	r2, r3, #3
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	4313      	orrs	r3, r2
 8000902:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000912:	2b00      	cmp	r3, #0
 8000914:	f000 80b2 	beq.w	8000a7c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000918:	4b61      	ldr	r3, [pc, #388]	; (8000aa0 <HAL_GPIO_Init+0x2fc>)
 800091a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800091c:	4a60      	ldr	r2, [pc, #384]	; (8000aa0 <HAL_GPIO_Init+0x2fc>)
 800091e:	f043 0301 	orr.w	r3, r3, #1
 8000922:	6613      	str	r3, [r2, #96]	; 0x60
 8000924:	4b5e      	ldr	r3, [pc, #376]	; (8000aa0 <HAL_GPIO_Init+0x2fc>)
 8000926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000928:	f003 0301 	and.w	r3, r3, #1
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000930:	4a5c      	ldr	r2, [pc, #368]	; (8000aa4 <HAL_GPIO_Init+0x300>)
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	089b      	lsrs	r3, r3, #2
 8000936:	3302      	adds	r3, #2
 8000938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800093c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	f003 0303 	and.w	r3, r3, #3
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	220f      	movs	r2, #15
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	43db      	mvns	r3, r3
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	4013      	ands	r3, r2
 8000952:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800095a:	d02b      	beq.n	80009b4 <HAL_GPIO_Init+0x210>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a52      	ldr	r2, [pc, #328]	; (8000aa8 <HAL_GPIO_Init+0x304>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d025      	beq.n	80009b0 <HAL_GPIO_Init+0x20c>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4a51      	ldr	r2, [pc, #324]	; (8000aac <HAL_GPIO_Init+0x308>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d01f      	beq.n	80009ac <HAL_GPIO_Init+0x208>
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a50      	ldr	r2, [pc, #320]	; (8000ab0 <HAL_GPIO_Init+0x30c>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d019      	beq.n	80009a8 <HAL_GPIO_Init+0x204>
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4a4f      	ldr	r2, [pc, #316]	; (8000ab4 <HAL_GPIO_Init+0x310>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d013      	beq.n	80009a4 <HAL_GPIO_Init+0x200>
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4a4e      	ldr	r2, [pc, #312]	; (8000ab8 <HAL_GPIO_Init+0x314>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d00d      	beq.n	80009a0 <HAL_GPIO_Init+0x1fc>
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4a4d      	ldr	r2, [pc, #308]	; (8000abc <HAL_GPIO_Init+0x318>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d007      	beq.n	800099c <HAL_GPIO_Init+0x1f8>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4a4c      	ldr	r2, [pc, #304]	; (8000ac0 <HAL_GPIO_Init+0x31c>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d101      	bne.n	8000998 <HAL_GPIO_Init+0x1f4>
 8000994:	2307      	movs	r3, #7
 8000996:	e00e      	b.n	80009b6 <HAL_GPIO_Init+0x212>
 8000998:	2308      	movs	r3, #8
 800099a:	e00c      	b.n	80009b6 <HAL_GPIO_Init+0x212>
 800099c:	2306      	movs	r3, #6
 800099e:	e00a      	b.n	80009b6 <HAL_GPIO_Init+0x212>
 80009a0:	2305      	movs	r3, #5
 80009a2:	e008      	b.n	80009b6 <HAL_GPIO_Init+0x212>
 80009a4:	2304      	movs	r3, #4
 80009a6:	e006      	b.n	80009b6 <HAL_GPIO_Init+0x212>
 80009a8:	2303      	movs	r3, #3
 80009aa:	e004      	b.n	80009b6 <HAL_GPIO_Init+0x212>
 80009ac:	2302      	movs	r3, #2
 80009ae:	e002      	b.n	80009b6 <HAL_GPIO_Init+0x212>
 80009b0:	2301      	movs	r3, #1
 80009b2:	e000      	b.n	80009b6 <HAL_GPIO_Init+0x212>
 80009b4:	2300      	movs	r3, #0
 80009b6:	697a      	ldr	r2, [r7, #20]
 80009b8:	f002 0203 	and.w	r2, r2, #3
 80009bc:	0092      	lsls	r2, r2, #2
 80009be:	4093      	lsls	r3, r2
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	4313      	orrs	r3, r2
 80009c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009c6:	4937      	ldr	r1, [pc, #220]	; (8000aa4 <HAL_GPIO_Init+0x300>)
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	089b      	lsrs	r3, r3, #2
 80009cc:	3302      	adds	r3, #2
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80009d4:	4b3b      	ldr	r3, [pc, #236]	; (8000ac4 <HAL_GPIO_Init+0x320>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	43db      	mvns	r3, r3
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	4013      	ands	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d003      	beq.n	80009f8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80009f8:	4a32      	ldr	r2, [pc, #200]	; (8000ac4 <HAL_GPIO_Init+0x320>)
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80009fe:	4b31      	ldr	r3, [pc, #196]	; (8000ac4 <HAL_GPIO_Init+0x320>)
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	43db      	mvns	r3, r3
 8000a08:	693a      	ldr	r2, [r7, #16]
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d003      	beq.n	8000a22 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a22:	4a28      	ldr	r2, [pc, #160]	; (8000ac4 <HAL_GPIO_Init+0x320>)
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a28:	4b26      	ldr	r3, [pc, #152]	; (8000ac4 <HAL_GPIO_Init+0x320>)
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	43db      	mvns	r3, r3
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	4013      	ands	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d003      	beq.n	8000a4c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a4c:	4a1d      	ldr	r2, [pc, #116]	; (8000ac4 <HAL_GPIO_Init+0x320>)
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a52:	4b1c      	ldr	r3, [pc, #112]	; (8000ac4 <HAL_GPIO_Init+0x320>)
 8000a54:	68db      	ldr	r3, [r3, #12]
 8000a56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d003      	beq.n	8000a76 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a76:	4a13      	ldr	r2, [pc, #76]	; (8000ac4 <HAL_GPIO_Init+0x320>)
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	fa22 f303 	lsr.w	r3, r2, r3
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	f47f ae91 	bne.w	80007b4 <HAL_GPIO_Init+0x10>
  }
}
 8000a92:	bf00      	nop
 8000a94:	371c      	adds	r7, #28
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40010000 	.word	0x40010000
 8000aa8:	48000400 	.word	0x48000400
 8000aac:	48000800 	.word	0x48000800
 8000ab0:	48000c00 	.word	0x48000c00
 8000ab4:	48001000 	.word	0x48001000
 8000ab8:	48001400 	.word	0x48001400
 8000abc:	48001800 	.word	0x48001800
 8000ac0:	48001c00 	.word	0x48001c00
 8000ac4:	40010400 	.word	0x40010400

08000ac8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	691a      	ldr	r2, [r3, #16]
 8000ad8:	887b      	ldrh	r3, [r7, #2]
 8000ada:	4013      	ands	r3, r2
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d002      	beq.n	8000ae6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	73fb      	strb	r3, [r7, #15]
 8000ae4:	e001      	b.n	8000aea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	460b      	mov	r3, r1
 8000b02:	807b      	strh	r3, [r7, #2]
 8000b04:	4613      	mov	r3, r2
 8000b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b08:	787b      	ldrb	r3, [r7, #1]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d003      	beq.n	8000b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b0e:	887a      	ldrh	r2, [r7, #2]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b14:	e002      	b.n	8000b1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b16:	887a      	ldrh	r2, [r7, #2]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	460b      	mov	r3, r1
 8000b32:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	695b      	ldr	r3, [r3, #20]
 8000b38:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b3a:	887a      	ldrh	r2, [r7, #2]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	041a      	lsls	r2, r3, #16
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	43d9      	mvns	r1, r3
 8000b46:	887b      	ldrh	r3, [r7, #2]
 8000b48:	400b      	ands	r3, r1
 8000b4a:	431a      	orrs	r2, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	619a      	str	r2, [r3, #24]
}
 8000b50:	bf00      	nop
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000b60:	4b0d      	ldr	r3, [pc, #52]	; (8000b98 <HAL_PWREx_GetVoltageRange+0x3c>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b6c:	d102      	bne.n	8000b74 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8000b6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b72:	e00b      	b.n	8000b8c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <HAL_PWREx_GetVoltageRange+0x3c>)
 8000b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b82:	d102      	bne.n	8000b8a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8000b84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b88:	e000      	b.n	8000b8c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8000b8a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	40007000 	.word	0x40007000

08000b9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d141      	bne.n	8000c2e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000baa:	4b4b      	ldr	r3, [pc, #300]	; (8000cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bb6:	d131      	bne.n	8000c1c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000bb8:	4b47      	ldr	r3, [pc, #284]	; (8000cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000bbe:	4a46      	ldr	r2, [pc, #280]	; (8000cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000bc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc8:	4b43      	ldr	r3, [pc, #268]	; (8000cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000bd0:	4a41      	ldr	r2, [pc, #260]	; (8000cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bd6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000bd8:	4b40      	ldr	r3, [pc, #256]	; (8000cdc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2232      	movs	r2, #50	; 0x32
 8000bde:	fb02 f303 	mul.w	r3, r2, r3
 8000be2:	4a3f      	ldr	r2, [pc, #252]	; (8000ce0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000be4:	fba2 2303 	umull	r2, r3, r2, r3
 8000be8:	0c9b      	lsrs	r3, r3, #18
 8000bea:	3301      	adds	r3, #1
 8000bec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bee:	e002      	b.n	8000bf6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bf6:	4b38      	ldr	r3, [pc, #224]	; (8000cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c02:	d102      	bne.n	8000c0a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d1f2      	bne.n	8000bf0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c0a:	4b33      	ldr	r3, [pc, #204]	; (8000cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c0c:	695b      	ldr	r3, [r3, #20]
 8000c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c16:	d158      	bne.n	8000cca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	e057      	b.n	8000ccc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c1c:	4b2e      	ldr	r3, [pc, #184]	; (8000cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c22:	4a2d      	ldr	r2, [pc, #180]	; (8000cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000c2c:	e04d      	b.n	8000cca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c34:	d141      	bne.n	8000cba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c36:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c42:	d131      	bne.n	8000ca8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c44:	4b24      	ldr	r3, [pc, #144]	; (8000cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c4a:	4a23      	ldr	r2, [pc, #140]	; (8000cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c54:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c5c:	4a1e      	ldr	r2, [pc, #120]	; (8000cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000c64:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2232      	movs	r2, #50	; 0x32
 8000c6a:	fb02 f303 	mul.w	r3, r2, r3
 8000c6e:	4a1c      	ldr	r2, [pc, #112]	; (8000ce0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000c70:	fba2 2303 	umull	r2, r3, r2, r3
 8000c74:	0c9b      	lsrs	r3, r3, #18
 8000c76:	3301      	adds	r3, #1
 8000c78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c7a:	e002      	b.n	8000c82 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c8e:	d102      	bne.n	8000c96 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d1f2      	bne.n	8000c7c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ca2:	d112      	bne.n	8000cca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	e011      	b.n	8000ccc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000cae:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000cb8:	e007      	b.n	8000cca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cba:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cc2:	4a05      	ldr	r2, [pc, #20]	; (8000cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cc8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000cca:	2300      	movs	r3, #0
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	40007000 	.word	0x40007000
 8000cdc:	20000000 	.word	0x20000000
 8000ce0:	431bde83 	.word	0x431bde83

08000ce4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d102      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	f000 bc16 	b.w	8001524 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cf8:	4ba0      	ldr	r3, [pc, #640]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	f003 030c 	and.w	r3, r3, #12
 8000d00:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d02:	4b9e      	ldr	r3, [pc, #632]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	f003 0303 	and.w	r3, r3, #3
 8000d0a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f003 0310 	and.w	r3, r3, #16
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	f000 80e4 	beq.w	8000ee2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d007      	beq.n	8000d30 <HAL_RCC_OscConfig+0x4c>
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	2b0c      	cmp	r3, #12
 8000d24:	f040 808b 	bne.w	8000e3e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	f040 8087 	bne.w	8000e3e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d30:	4b92      	ldr	r3, [pc, #584]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f003 0302 	and.w	r3, r3, #2
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d005      	beq.n	8000d48 <HAL_RCC_OscConfig+0x64>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d101      	bne.n	8000d48 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	e3ed      	b.n	8001524 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6a1a      	ldr	r2, [r3, #32]
 8000d4c:	4b8b      	ldr	r3, [pc, #556]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f003 0308 	and.w	r3, r3, #8
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d004      	beq.n	8000d62 <HAL_RCC_OscConfig+0x7e>
 8000d58:	4b88      	ldr	r3, [pc, #544]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d60:	e005      	b.n	8000d6e <HAL_RCC_OscConfig+0x8a>
 8000d62:	4b86      	ldr	r3, [pc, #536]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d68:	091b      	lsrs	r3, r3, #4
 8000d6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d223      	bcs.n	8000dba <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6a1b      	ldr	r3, [r3, #32]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 fd90 	bl	800189c <RCC_SetFlashLatencyFromMSIRange>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e3ce      	b.n	8001524 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d86:	4b7d      	ldr	r3, [pc, #500]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a7c      	ldr	r2, [pc, #496]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000d8c:	f043 0308 	orr.w	r3, r3, #8
 8000d90:	6013      	str	r3, [r2, #0]
 8000d92:	4b7a      	ldr	r3, [pc, #488]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6a1b      	ldr	r3, [r3, #32]
 8000d9e:	4977      	ldr	r1, [pc, #476]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000da0:	4313      	orrs	r3, r2
 8000da2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000da4:	4b75      	ldr	r3, [pc, #468]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	69db      	ldr	r3, [r3, #28]
 8000db0:	021b      	lsls	r3, r3, #8
 8000db2:	4972      	ldr	r1, [pc, #456]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000db4:	4313      	orrs	r3, r2
 8000db6:	604b      	str	r3, [r1, #4]
 8000db8:	e025      	b.n	8000e06 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dba:	4b70      	ldr	r3, [pc, #448]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a6f      	ldr	r2, [pc, #444]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000dc0:	f043 0308 	orr.w	r3, r3, #8
 8000dc4:	6013      	str	r3, [r2, #0]
 8000dc6:	4b6d      	ldr	r3, [pc, #436]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6a1b      	ldr	r3, [r3, #32]
 8000dd2:	496a      	ldr	r1, [pc, #424]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dd8:	4b68      	ldr	r3, [pc, #416]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	69db      	ldr	r3, [r3, #28]
 8000de4:	021b      	lsls	r3, r3, #8
 8000de6:	4965      	ldr	r1, [pc, #404]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000de8:	4313      	orrs	r3, r2
 8000dea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d109      	bne.n	8000e06 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6a1b      	ldr	r3, [r3, #32]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 fd50 	bl	800189c <RCC_SetFlashLatencyFromMSIRange>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e38e      	b.n	8001524 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e06:	f000 fcbf 	bl	8001788 <HAL_RCC_GetSysClockFreq>
 8000e0a:	4601      	mov	r1, r0
 8000e0c:	4b5b      	ldr	r3, [pc, #364]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	091b      	lsrs	r3, r3, #4
 8000e12:	f003 030f 	and.w	r3, r3, #15
 8000e16:	4a5a      	ldr	r2, [pc, #360]	; (8000f80 <HAL_RCC_OscConfig+0x29c>)
 8000e18:	5cd3      	ldrb	r3, [r2, r3]
 8000e1a:	f003 031f 	and.w	r3, r3, #31
 8000e1e:	fa21 f303 	lsr.w	r3, r1, r3
 8000e22:	4a58      	ldr	r2, [pc, #352]	; (8000f84 <HAL_RCC_OscConfig+0x2a0>)
 8000e24:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e26:	4b58      	ldr	r3, [pc, #352]	; (8000f88 <HAL_RCC_OscConfig+0x2a4>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff fb78 	bl	8000520 <HAL_InitTick>
 8000e30:	4603      	mov	r3, r0
 8000e32:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d052      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
 8000e3c:	e372      	b.n	8001524 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d032      	beq.n	8000eac <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e46:	4b4d      	ldr	r3, [pc, #308]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a4c      	ldr	r2, [pc, #304]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e52:	f7ff fbb5 	bl	80005c0 <HAL_GetTick>
 8000e56:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e58:	e008      	b.n	8000e6c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e5a:	f7ff fbb1 	bl	80005c0 <HAL_GetTick>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d901      	bls.n	8000e6c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	e35b      	b.n	8001524 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e6c:	4b43      	ldr	r3, [pc, #268]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f003 0302 	and.w	r3, r3, #2
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d0f0      	beq.n	8000e5a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e78:	4b40      	ldr	r3, [pc, #256]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a3f      	ldr	r2, [pc, #252]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000e7e:	f043 0308 	orr.w	r3, r3, #8
 8000e82:	6013      	str	r3, [r2, #0]
 8000e84:	4b3d      	ldr	r3, [pc, #244]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6a1b      	ldr	r3, [r3, #32]
 8000e90:	493a      	ldr	r1, [pc, #232]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000e92:	4313      	orrs	r3, r2
 8000e94:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e96:	4b39      	ldr	r3, [pc, #228]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	021b      	lsls	r3, r3, #8
 8000ea4:	4935      	ldr	r1, [pc, #212]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	604b      	str	r3, [r1, #4]
 8000eaa:	e01a      	b.n	8000ee2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000eac:	4b33      	ldr	r3, [pc, #204]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a32      	ldr	r2, [pc, #200]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000eb2:	f023 0301 	bic.w	r3, r3, #1
 8000eb6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000eb8:	f7ff fb82 	bl	80005c0 <HAL_GetTick>
 8000ebc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000ebe:	e008      	b.n	8000ed2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ec0:	f7ff fb7e 	bl	80005c0 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d901      	bls.n	8000ed2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e328      	b.n	8001524 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000ed2:	4b2a      	ldr	r3, [pc, #168]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f003 0302 	and.w	r3, r3, #2
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1f0      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x1dc>
 8000ede:	e000      	b.n	8000ee2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ee0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d073      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	2b08      	cmp	r3, #8
 8000ef2:	d005      	beq.n	8000f00 <HAL_RCC_OscConfig+0x21c>
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	2b0c      	cmp	r3, #12
 8000ef8:	d10e      	bne.n	8000f18 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	2b03      	cmp	r3, #3
 8000efe:	d10b      	bne.n	8000f18 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f00:	4b1e      	ldr	r3, [pc, #120]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d063      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x2f0>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d15f      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e305      	b.n	8001524 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f20:	d106      	bne.n	8000f30 <HAL_RCC_OscConfig+0x24c>
 8000f22:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a15      	ldr	r2, [pc, #84]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f2c:	6013      	str	r3, [r2, #0]
 8000f2e:	e01d      	b.n	8000f6c <HAL_RCC_OscConfig+0x288>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f38:	d10c      	bne.n	8000f54 <HAL_RCC_OscConfig+0x270>
 8000f3a:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a0f      	ldr	r2, [pc, #60]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f44:	6013      	str	r3, [r2, #0]
 8000f46:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a0c      	ldr	r2, [pc, #48]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	e00b      	b.n	8000f6c <HAL_RCC_OscConfig+0x288>
 8000f54:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a08      	ldr	r2, [pc, #32]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a05      	ldr	r2, [pc, #20]	; (8000f7c <HAL_RCC_OscConfig+0x298>)
 8000f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d01b      	beq.n	8000fac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f74:	f7ff fb24 	bl	80005c0 <HAL_GetTick>
 8000f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f7a:	e010      	b.n	8000f9e <HAL_RCC_OscConfig+0x2ba>
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	08001a90 	.word	0x08001a90
 8000f84:	20000000 	.word	0x20000000
 8000f88:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f8c:	f7ff fb18 	bl	80005c0 <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	2b64      	cmp	r3, #100	; 0x64
 8000f98:	d901      	bls.n	8000f9e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e2c2      	b.n	8001524 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f9e:	4baf      	ldr	r3, [pc, #700]	; (800125c <HAL_RCC_OscConfig+0x578>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d0f0      	beq.n	8000f8c <HAL_RCC_OscConfig+0x2a8>
 8000faa:	e014      	b.n	8000fd6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fac:	f7ff fb08 	bl	80005c0 <HAL_GetTick>
 8000fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fb2:	e008      	b.n	8000fc6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fb4:	f7ff fb04 	bl	80005c0 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b64      	cmp	r3, #100	; 0x64
 8000fc0:	d901      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e2ae      	b.n	8001524 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fc6:	4ba5      	ldr	r3, [pc, #660]	; (800125c <HAL_RCC_OscConfig+0x578>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1f0      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x2d0>
 8000fd2:	e000      	b.n	8000fd6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d060      	beq.n	80010a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	2b04      	cmp	r3, #4
 8000fe6:	d005      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x310>
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	2b0c      	cmp	r3, #12
 8000fec:	d119      	bne.n	8001022 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d116      	bne.n	8001022 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ff4:	4b99      	ldr	r3, [pc, #612]	; (800125c <HAL_RCC_OscConfig+0x578>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d005      	beq.n	800100c <HAL_RCC_OscConfig+0x328>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d101      	bne.n	800100c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e28b      	b.n	8001524 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800100c:	4b93      	ldr	r3, [pc, #588]	; (800125c <HAL_RCC_OscConfig+0x578>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	061b      	lsls	r3, r3, #24
 800101a:	4990      	ldr	r1, [pc, #576]	; (800125c <HAL_RCC_OscConfig+0x578>)
 800101c:	4313      	orrs	r3, r2
 800101e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001020:	e040      	b.n	80010a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d023      	beq.n	8001072 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800102a:	4b8c      	ldr	r3, [pc, #560]	; (800125c <HAL_RCC_OscConfig+0x578>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a8b      	ldr	r2, [pc, #556]	; (800125c <HAL_RCC_OscConfig+0x578>)
 8001030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001034:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001036:	f7ff fac3 	bl	80005c0 <HAL_GetTick>
 800103a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800103c:	e008      	b.n	8001050 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800103e:	f7ff fabf 	bl	80005c0 <HAL_GetTick>
 8001042:	4602      	mov	r2, r0
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d901      	bls.n	8001050 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800104c:	2303      	movs	r3, #3
 800104e:	e269      	b.n	8001524 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001050:	4b82      	ldr	r3, [pc, #520]	; (800125c <HAL_RCC_OscConfig+0x578>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001058:	2b00      	cmp	r3, #0
 800105a:	d0f0      	beq.n	800103e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800105c:	4b7f      	ldr	r3, [pc, #508]	; (800125c <HAL_RCC_OscConfig+0x578>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	691b      	ldr	r3, [r3, #16]
 8001068:	061b      	lsls	r3, r3, #24
 800106a:	497c      	ldr	r1, [pc, #496]	; (800125c <HAL_RCC_OscConfig+0x578>)
 800106c:	4313      	orrs	r3, r2
 800106e:	604b      	str	r3, [r1, #4]
 8001070:	e018      	b.n	80010a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001072:	4b7a      	ldr	r3, [pc, #488]	; (800125c <HAL_RCC_OscConfig+0x578>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a79      	ldr	r2, [pc, #484]	; (800125c <HAL_RCC_OscConfig+0x578>)
 8001078:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800107c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800107e:	f7ff fa9f 	bl	80005c0 <HAL_GetTick>
 8001082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001084:	e008      	b.n	8001098 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001086:	f7ff fa9b 	bl	80005c0 <HAL_GetTick>
 800108a:	4602      	mov	r2, r0
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b02      	cmp	r3, #2
 8001092:	d901      	bls.n	8001098 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e245      	b.n	8001524 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001098:	4b70      	ldr	r3, [pc, #448]	; (800125c <HAL_RCC_OscConfig+0x578>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1f0      	bne.n	8001086 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0308 	and.w	r3, r3, #8
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d03c      	beq.n	800112a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d01c      	beq.n	80010f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010b8:	4b68      	ldr	r3, [pc, #416]	; (800125c <HAL_RCC_OscConfig+0x578>)
 80010ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010be:	4a67      	ldr	r2, [pc, #412]	; (800125c <HAL_RCC_OscConfig+0x578>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010c8:	f7ff fa7a 	bl	80005c0 <HAL_GetTick>
 80010cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010ce:	e008      	b.n	80010e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010d0:	f7ff fa76 	bl	80005c0 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e220      	b.n	8001524 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010e2:	4b5e      	ldr	r3, [pc, #376]	; (800125c <HAL_RCC_OscConfig+0x578>)
 80010e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d0ef      	beq.n	80010d0 <HAL_RCC_OscConfig+0x3ec>
 80010f0:	e01b      	b.n	800112a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010f2:	4b5a      	ldr	r3, [pc, #360]	; (800125c <HAL_RCC_OscConfig+0x578>)
 80010f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010f8:	4a58      	ldr	r2, [pc, #352]	; (800125c <HAL_RCC_OscConfig+0x578>)
 80010fa:	f023 0301 	bic.w	r3, r3, #1
 80010fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001102:	f7ff fa5d 	bl	80005c0 <HAL_GetTick>
 8001106:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001108:	e008      	b.n	800111c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800110a:	f7ff fa59 	bl	80005c0 <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d901      	bls.n	800111c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e203      	b.n	8001524 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800111c:	4b4f      	ldr	r3, [pc, #316]	; (800125c <HAL_RCC_OscConfig+0x578>)
 800111e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1ef      	bne.n	800110a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0304 	and.w	r3, r3, #4
 8001132:	2b00      	cmp	r3, #0
 8001134:	f000 80a6 	beq.w	8001284 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001138:	2300      	movs	r3, #0
 800113a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800113c:	4b47      	ldr	r3, [pc, #284]	; (800125c <HAL_RCC_OscConfig+0x578>)
 800113e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d10d      	bne.n	8001164 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001148:	4b44      	ldr	r3, [pc, #272]	; (800125c <HAL_RCC_OscConfig+0x578>)
 800114a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114c:	4a43      	ldr	r2, [pc, #268]	; (800125c <HAL_RCC_OscConfig+0x578>)
 800114e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001152:	6593      	str	r3, [r2, #88]	; 0x58
 8001154:	4b41      	ldr	r3, [pc, #260]	; (800125c <HAL_RCC_OscConfig+0x578>)
 8001156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001160:	2301      	movs	r3, #1
 8001162:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001164:	4b3e      	ldr	r3, [pc, #248]	; (8001260 <HAL_RCC_OscConfig+0x57c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800116c:	2b00      	cmp	r3, #0
 800116e:	d118      	bne.n	80011a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001170:	4b3b      	ldr	r3, [pc, #236]	; (8001260 <HAL_RCC_OscConfig+0x57c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a3a      	ldr	r2, [pc, #232]	; (8001260 <HAL_RCC_OscConfig+0x57c>)
 8001176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800117a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800117c:	f7ff fa20 	bl	80005c0 <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001184:	f7ff fa1c 	bl	80005c0 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b02      	cmp	r3, #2
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e1c6      	b.n	8001524 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001196:	4b32      	ldr	r3, [pc, #200]	; (8001260 <HAL_RCC_OscConfig+0x57c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0f0      	beq.n	8001184 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d108      	bne.n	80011bc <HAL_RCC_OscConfig+0x4d8>
 80011aa:	4b2c      	ldr	r3, [pc, #176]	; (800125c <HAL_RCC_OscConfig+0x578>)
 80011ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011b0:	4a2a      	ldr	r2, [pc, #168]	; (800125c <HAL_RCC_OscConfig+0x578>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011ba:	e024      	b.n	8001206 <HAL_RCC_OscConfig+0x522>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	2b05      	cmp	r3, #5
 80011c2:	d110      	bne.n	80011e6 <HAL_RCC_OscConfig+0x502>
 80011c4:	4b25      	ldr	r3, [pc, #148]	; (800125c <HAL_RCC_OscConfig+0x578>)
 80011c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011ca:	4a24      	ldr	r2, [pc, #144]	; (800125c <HAL_RCC_OscConfig+0x578>)
 80011cc:	f043 0304 	orr.w	r3, r3, #4
 80011d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011d4:	4b21      	ldr	r3, [pc, #132]	; (800125c <HAL_RCC_OscConfig+0x578>)
 80011d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011da:	4a20      	ldr	r2, [pc, #128]	; (800125c <HAL_RCC_OscConfig+0x578>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011e4:	e00f      	b.n	8001206 <HAL_RCC_OscConfig+0x522>
 80011e6:	4b1d      	ldr	r3, [pc, #116]	; (800125c <HAL_RCC_OscConfig+0x578>)
 80011e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011ec:	4a1b      	ldr	r2, [pc, #108]	; (800125c <HAL_RCC_OscConfig+0x578>)
 80011ee:	f023 0301 	bic.w	r3, r3, #1
 80011f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011f6:	4b19      	ldr	r3, [pc, #100]	; (800125c <HAL_RCC_OscConfig+0x578>)
 80011f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011fc:	4a17      	ldr	r2, [pc, #92]	; (800125c <HAL_RCC_OscConfig+0x578>)
 80011fe:	f023 0304 	bic.w	r3, r3, #4
 8001202:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d016      	beq.n	800123c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800120e:	f7ff f9d7 	bl	80005c0 <HAL_GetTick>
 8001212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001214:	e00a      	b.n	800122c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001216:	f7ff f9d3 	bl	80005c0 <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	f241 3288 	movw	r2, #5000	; 0x1388
 8001224:	4293      	cmp	r3, r2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e17b      	b.n	8001524 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <HAL_RCC_OscConfig+0x578>)
 800122e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d0ed      	beq.n	8001216 <HAL_RCC_OscConfig+0x532>
 800123a:	e01a      	b.n	8001272 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800123c:	f7ff f9c0 	bl	80005c0 <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001242:	e00f      	b.n	8001264 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001244:	f7ff f9bc 	bl	80005c0 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001252:	4293      	cmp	r3, r2
 8001254:	d906      	bls.n	8001264 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e164      	b.n	8001524 <HAL_RCC_OscConfig+0x840>
 800125a:	bf00      	nop
 800125c:	40021000 	.word	0x40021000
 8001260:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001264:	4ba8      	ldr	r3, [pc, #672]	; (8001508 <HAL_RCC_OscConfig+0x824>)
 8001266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1e8      	bne.n	8001244 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001272:	7ffb      	ldrb	r3, [r7, #31]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d105      	bne.n	8001284 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001278:	4ba3      	ldr	r3, [pc, #652]	; (8001508 <HAL_RCC_OscConfig+0x824>)
 800127a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127c:	4aa2      	ldr	r2, [pc, #648]	; (8001508 <HAL_RCC_OscConfig+0x824>)
 800127e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001282:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0320 	and.w	r3, r3, #32
 800128c:	2b00      	cmp	r3, #0
 800128e:	d03c      	beq.n	800130a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001294:	2b00      	cmp	r3, #0
 8001296:	d01c      	beq.n	80012d2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001298:	4b9b      	ldr	r3, [pc, #620]	; (8001508 <HAL_RCC_OscConfig+0x824>)
 800129a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800129e:	4a9a      	ldr	r2, [pc, #616]	; (8001508 <HAL_RCC_OscConfig+0x824>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a8:	f7ff f98a 	bl	80005c0 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012b0:	f7ff f986 	bl	80005c0 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e130      	b.n	8001524 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012c2:	4b91      	ldr	r3, [pc, #580]	; (8001508 <HAL_RCC_OscConfig+0x824>)
 80012c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d0ef      	beq.n	80012b0 <HAL_RCC_OscConfig+0x5cc>
 80012d0:	e01b      	b.n	800130a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80012d2:	4b8d      	ldr	r3, [pc, #564]	; (8001508 <HAL_RCC_OscConfig+0x824>)
 80012d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012d8:	4a8b      	ldr	r2, [pc, #556]	; (8001508 <HAL_RCC_OscConfig+0x824>)
 80012da:	f023 0301 	bic.w	r3, r3, #1
 80012de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e2:	f7ff f96d 	bl	80005c0 <HAL_GetTick>
 80012e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80012e8:	e008      	b.n	80012fc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012ea:	f7ff f969 	bl	80005c0 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e113      	b.n	8001524 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80012fc:	4b82      	ldr	r3, [pc, #520]	; (8001508 <HAL_RCC_OscConfig+0x824>)
 80012fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1ef      	bne.n	80012ea <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130e:	2b00      	cmp	r3, #0
 8001310:	f000 8107 	beq.w	8001522 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001318:	2b02      	cmp	r3, #2
 800131a:	f040 80cb 	bne.w	80014b4 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800131e:	4b7a      	ldr	r3, [pc, #488]	; (8001508 <HAL_RCC_OscConfig+0x824>)
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	f003 0203 	and.w	r2, r3, #3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132e:	429a      	cmp	r2, r3
 8001330:	d12c      	bne.n	800138c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133c:	3b01      	subs	r3, #1
 800133e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001340:	429a      	cmp	r2, r3
 8001342:	d123      	bne.n	800138c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800134e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001350:	429a      	cmp	r2, r3
 8001352:	d11b      	bne.n	800138c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800135e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001360:	429a      	cmp	r2, r3
 8001362:	d113      	bne.n	800138c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800136e:	085b      	lsrs	r3, r3, #1
 8001370:	3b01      	subs	r3, #1
 8001372:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001374:	429a      	cmp	r2, r3
 8001376:	d109      	bne.n	800138c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	085b      	lsrs	r3, r3, #1
 8001384:	3b01      	subs	r3, #1
 8001386:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001388:	429a      	cmp	r2, r3
 800138a:	d06d      	beq.n	8001468 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	2b0c      	cmp	r3, #12
 8001390:	d068      	beq.n	8001464 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001392:	4b5d      	ldr	r3, [pc, #372]	; (8001508 <HAL_RCC_OscConfig+0x824>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d105      	bne.n	80013aa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800139e:	4b5a      	ldr	r3, [pc, #360]	; (8001508 <HAL_RCC_OscConfig+0x824>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e0ba      	b.n	8001524 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80013ae:	4b56      	ldr	r3, [pc, #344]	; (8001508 <HAL_RCC_OscConfig+0x824>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a55      	ldr	r2, [pc, #340]	; (8001508 <HAL_RCC_OscConfig+0x824>)
 80013b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013b8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013ba:	f7ff f901 	bl	80005c0 <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c2:	f7ff f8fd 	bl	80005c0 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e0a7      	b.n	8001524 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013d4:	4b4c      	ldr	r3, [pc, #304]	; (8001508 <HAL_RCC_OscConfig+0x824>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1f0      	bne.n	80013c2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013e0:	4b49      	ldr	r3, [pc, #292]	; (8001508 <HAL_RCC_OscConfig+0x824>)
 80013e2:	68da      	ldr	r2, [r3, #12]
 80013e4:	4b49      	ldr	r3, [pc, #292]	; (800150c <HAL_RCC_OscConfig+0x828>)
 80013e6:	4013      	ands	r3, r2
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80013f0:	3a01      	subs	r2, #1
 80013f2:	0112      	lsls	r2, r2, #4
 80013f4:	4311      	orrs	r1, r2
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80013fa:	0212      	lsls	r2, r2, #8
 80013fc:	4311      	orrs	r1, r2
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001402:	0852      	lsrs	r2, r2, #1
 8001404:	3a01      	subs	r2, #1
 8001406:	0552      	lsls	r2, r2, #21
 8001408:	4311      	orrs	r1, r2
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800140e:	0852      	lsrs	r2, r2, #1
 8001410:	3a01      	subs	r2, #1
 8001412:	0652      	lsls	r2, r2, #25
 8001414:	4311      	orrs	r1, r2
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800141a:	06d2      	lsls	r2, r2, #27
 800141c:	430a      	orrs	r2, r1
 800141e:	493a      	ldr	r1, [pc, #232]	; (8001508 <HAL_RCC_OscConfig+0x824>)
 8001420:	4313      	orrs	r3, r2
 8001422:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001424:	4b38      	ldr	r3, [pc, #224]	; (8001508 <HAL_RCC_OscConfig+0x824>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a37      	ldr	r2, [pc, #220]	; (8001508 <HAL_RCC_OscConfig+0x824>)
 800142a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800142e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001430:	4b35      	ldr	r3, [pc, #212]	; (8001508 <HAL_RCC_OscConfig+0x824>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	4a34      	ldr	r2, [pc, #208]	; (8001508 <HAL_RCC_OscConfig+0x824>)
 8001436:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800143a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800143c:	f7ff f8c0 	bl	80005c0 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001444:	f7ff f8bc 	bl	80005c0 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e066      	b.n	8001524 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001456:	4b2c      	ldr	r3, [pc, #176]	; (8001508 <HAL_RCC_OscConfig+0x824>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f0      	beq.n	8001444 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001462:	e05e      	b.n	8001522 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e05d      	b.n	8001524 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001468:	4b27      	ldr	r3, [pc, #156]	; (8001508 <HAL_RCC_OscConfig+0x824>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d156      	bne.n	8001522 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001474:	4b24      	ldr	r3, [pc, #144]	; (8001508 <HAL_RCC_OscConfig+0x824>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a23      	ldr	r2, [pc, #140]	; (8001508 <HAL_RCC_OscConfig+0x824>)
 800147a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800147e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001480:	4b21      	ldr	r3, [pc, #132]	; (8001508 <HAL_RCC_OscConfig+0x824>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	4a20      	ldr	r2, [pc, #128]	; (8001508 <HAL_RCC_OscConfig+0x824>)
 8001486:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800148a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800148c:	f7ff f898 	bl	80005c0 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001494:	f7ff f894 	bl	80005c0 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e03e      	b.n	8001524 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014a6:	4b18      	ldr	r3, [pc, #96]	; (8001508 <HAL_RCC_OscConfig+0x824>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0f0      	beq.n	8001494 <HAL_RCC_OscConfig+0x7b0>
 80014b2:	e036      	b.n	8001522 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	2b0c      	cmp	r3, #12
 80014b8:	d031      	beq.n	800151e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ba:	4b13      	ldr	r3, [pc, #76]	; (8001508 <HAL_RCC_OscConfig+0x824>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a12      	ldr	r2, [pc, #72]	; (8001508 <HAL_RCC_OscConfig+0x824>)
 80014c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014c4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <HAL_RCC_OscConfig+0x824>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d105      	bne.n	80014de <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80014d2:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <HAL_RCC_OscConfig+0x824>)
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	4a0c      	ldr	r2, [pc, #48]	; (8001508 <HAL_RCC_OscConfig+0x824>)
 80014d8:	f023 0303 	bic.w	r3, r3, #3
 80014dc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80014de:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <HAL_RCC_OscConfig+0x824>)
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	4a09      	ldr	r2, [pc, #36]	; (8001508 <HAL_RCC_OscConfig+0x824>)
 80014e4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80014e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ec:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ee:	f7ff f867 	bl	80005c0 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014f4:	e00c      	b.n	8001510 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f6:	f7ff f863 	bl	80005c0 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d905      	bls.n	8001510 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e00d      	b.n	8001524 <HAL_RCC_OscConfig+0x840>
 8001508:	40021000 	.word	0x40021000
 800150c:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_RCC_OscConfig+0x848>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1ec      	bne.n	80014f6 <HAL_RCC_OscConfig+0x812>
 800151c:	e001      	b.n	8001522 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e000      	b.n	8001524 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3720      	adds	r7, #32
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40021000 	.word	0x40021000

08001530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d101      	bne.n	8001548 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e10f      	b.n	8001768 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001548:	4b89      	ldr	r3, [pc, #548]	; (8001770 <HAL_RCC_ClockConfig+0x240>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 030f 	and.w	r3, r3, #15
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	429a      	cmp	r2, r3
 8001554:	d910      	bls.n	8001578 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001556:	4b86      	ldr	r3, [pc, #536]	; (8001770 <HAL_RCC_ClockConfig+0x240>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f023 020f 	bic.w	r2, r3, #15
 800155e:	4984      	ldr	r1, [pc, #528]	; (8001770 <HAL_RCC_ClockConfig+0x240>)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	4313      	orrs	r3, r2
 8001564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001566:	4b82      	ldr	r3, [pc, #520]	; (8001770 <HAL_RCC_ClockConfig+0x240>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	429a      	cmp	r2, r3
 8001572:	d001      	beq.n	8001578 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e0f7      	b.n	8001768 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	2b00      	cmp	r3, #0
 8001582:	f000 8089 	beq.w	8001698 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	2b03      	cmp	r3, #3
 800158c:	d133      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800158e:	4b79      	ldr	r3, [pc, #484]	; (8001774 <HAL_RCC_ClockConfig+0x244>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e0e4      	b.n	8001768 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800159e:	f000 f9d7 	bl	8001950 <RCC_GetSysClockFreqFromPLLSource>
 80015a2:	4602      	mov	r2, r0
 80015a4:	4b74      	ldr	r3, [pc, #464]	; (8001778 <HAL_RCC_ClockConfig+0x248>)
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d955      	bls.n	8001656 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80015aa:	4b72      	ldr	r3, [pc, #456]	; (8001774 <HAL_RCC_ClockConfig+0x244>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d10a      	bne.n	80015cc <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80015b6:	4b6f      	ldr	r3, [pc, #444]	; (8001774 <HAL_RCC_ClockConfig+0x244>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015be:	4a6d      	ldr	r2, [pc, #436]	; (8001774 <HAL_RCC_ClockConfig+0x244>)
 80015c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015c4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80015c6:	2380      	movs	r3, #128	; 0x80
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	e044      	b.n	8001656 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d03e      	beq.n	8001656 <HAL_RCC_ClockConfig+0x126>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d13a      	bne.n	8001656 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80015e0:	4b64      	ldr	r3, [pc, #400]	; (8001774 <HAL_RCC_ClockConfig+0x244>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015e8:	4a62      	ldr	r2, [pc, #392]	; (8001774 <HAL_RCC_ClockConfig+0x244>)
 80015ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015ee:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	e02f      	b.n	8001656 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d107      	bne.n	800160e <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015fe:	4b5d      	ldr	r3, [pc, #372]	; (8001774 <HAL_RCC_ClockConfig+0x244>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d115      	bne.n	8001636 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e0ac      	b.n	8001768 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d107      	bne.n	8001626 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001616:	4b57      	ldr	r3, [pc, #348]	; (8001774 <HAL_RCC_ClockConfig+0x244>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d109      	bne.n	8001636 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e0a0      	b.n	8001768 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001626:	4b53      	ldr	r3, [pc, #332]	; (8001774 <HAL_RCC_ClockConfig+0x244>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e098      	b.n	8001768 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001636:	f000 f8a7 	bl	8001788 <HAL_RCC_GetSysClockFreq>
 800163a:	4602      	mov	r2, r0
 800163c:	4b4e      	ldr	r3, [pc, #312]	; (8001778 <HAL_RCC_ClockConfig+0x248>)
 800163e:	429a      	cmp	r2, r3
 8001640:	d909      	bls.n	8001656 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001642:	4b4c      	ldr	r3, [pc, #304]	; (8001774 <HAL_RCC_ClockConfig+0x244>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800164a:	4a4a      	ldr	r2, [pc, #296]	; (8001774 <HAL_RCC_ClockConfig+0x244>)
 800164c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001650:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001652:	2380      	movs	r3, #128	; 0x80
 8001654:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001656:	4b47      	ldr	r3, [pc, #284]	; (8001774 <HAL_RCC_ClockConfig+0x244>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f023 0203 	bic.w	r2, r3, #3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	4944      	ldr	r1, [pc, #272]	; (8001774 <HAL_RCC_ClockConfig+0x244>)
 8001664:	4313      	orrs	r3, r2
 8001666:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001668:	f7fe ffaa 	bl	80005c0 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166e:	e00a      	b.n	8001686 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001670:	f7fe ffa6 	bl	80005c0 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	f241 3288 	movw	r2, #5000	; 0x1388
 800167e:	4293      	cmp	r3, r2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e070      	b.n	8001768 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001686:	4b3b      	ldr	r3, [pc, #236]	; (8001774 <HAL_RCC_ClockConfig+0x244>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 020c 	and.w	r2, r3, #12
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	429a      	cmp	r2, r3
 8001696:	d1eb      	bne.n	8001670 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d009      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016a4:	4b33      	ldr	r3, [pc, #204]	; (8001774 <HAL_RCC_ClockConfig+0x244>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	4930      	ldr	r1, [pc, #192]	; (8001774 <HAL_RCC_ClockConfig+0x244>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	608b      	str	r3, [r1, #8]
 80016b6:	e008      	b.n	80016ca <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	2b80      	cmp	r3, #128	; 0x80
 80016bc:	d105      	bne.n	80016ca <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80016be:	4b2d      	ldr	r3, [pc, #180]	; (8001774 <HAL_RCC_ClockConfig+0x244>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	4a2c      	ldr	r2, [pc, #176]	; (8001774 <HAL_RCC_ClockConfig+0x244>)
 80016c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016c8:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016ca:	4b29      	ldr	r3, [pc, #164]	; (8001770 <HAL_RCC_ClockConfig+0x240>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d210      	bcs.n	80016fa <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d8:	4b25      	ldr	r3, [pc, #148]	; (8001770 <HAL_RCC_ClockConfig+0x240>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f023 020f 	bic.w	r2, r3, #15
 80016e0:	4923      	ldr	r1, [pc, #140]	; (8001770 <HAL_RCC_ClockConfig+0x240>)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e8:	4b21      	ldr	r3, [pc, #132]	; (8001770 <HAL_RCC_ClockConfig+0x240>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 030f 	and.w	r3, r3, #15
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d001      	beq.n	80016fa <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e036      	b.n	8001768 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	2b00      	cmp	r3, #0
 8001704:	d008      	beq.n	8001718 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001706:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <HAL_RCC_ClockConfig+0x244>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	4918      	ldr	r1, [pc, #96]	; (8001774 <HAL_RCC_ClockConfig+0x244>)
 8001714:	4313      	orrs	r3, r2
 8001716:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0308 	and.w	r3, r3, #8
 8001720:	2b00      	cmp	r3, #0
 8001722:	d009      	beq.n	8001738 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001724:	4b13      	ldr	r3, [pc, #76]	; (8001774 <HAL_RCC_ClockConfig+0x244>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	4910      	ldr	r1, [pc, #64]	; (8001774 <HAL_RCC_ClockConfig+0x244>)
 8001734:	4313      	orrs	r3, r2
 8001736:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001738:	f000 f826 	bl	8001788 <HAL_RCC_GetSysClockFreq>
 800173c:	4601      	mov	r1, r0
 800173e:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <HAL_RCC_ClockConfig+0x244>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	091b      	lsrs	r3, r3, #4
 8001744:	f003 030f 	and.w	r3, r3, #15
 8001748:	4a0c      	ldr	r2, [pc, #48]	; (800177c <HAL_RCC_ClockConfig+0x24c>)
 800174a:	5cd3      	ldrb	r3, [r2, r3]
 800174c:	f003 031f 	and.w	r3, r3, #31
 8001750:	fa21 f303 	lsr.w	r3, r1, r3
 8001754:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <HAL_RCC_ClockConfig+0x250>)
 8001756:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001758:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <HAL_RCC_ClockConfig+0x254>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f7fe fedf 	bl	8000520 <HAL_InitTick>
 8001762:	4603      	mov	r3, r0
 8001764:	73fb      	strb	r3, [r7, #15]

  return status;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40022000 	.word	0x40022000
 8001774:	40021000 	.word	0x40021000
 8001778:	04c4b400 	.word	0x04c4b400
 800177c:	08001a90 	.word	0x08001a90
 8001780:	20000000 	.word	0x20000000
 8001784:	20000004 	.word	0x20000004

08001788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001788:	b480      	push	{r7}
 800178a:	b089      	sub	sp, #36	; 0x24
 800178c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
 8001792:	2300      	movs	r3, #0
 8001794:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001796:	4b3d      	ldr	r3, [pc, #244]	; (800188c <HAL_RCC_GetSysClockFreq+0x104>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 030c 	and.w	r3, r3, #12
 800179e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017a0:	4b3a      	ldr	r3, [pc, #232]	; (800188c <HAL_RCC_GetSysClockFreq+0x104>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	f003 0303 	and.w	r3, r3, #3
 80017a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <HAL_RCC_GetSysClockFreq+0x34>
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	2b0c      	cmp	r3, #12
 80017b4:	d121      	bne.n	80017fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d11e      	bne.n	80017fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80017bc:	4b33      	ldr	r3, [pc, #204]	; (800188c <HAL_RCC_GetSysClockFreq+0x104>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0308 	and.w	r3, r3, #8
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d107      	bne.n	80017d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80017c8:	4b30      	ldr	r3, [pc, #192]	; (800188c <HAL_RCC_GetSysClockFreq+0x104>)
 80017ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ce:	0a1b      	lsrs	r3, r3, #8
 80017d0:	f003 030f 	and.w	r3, r3, #15
 80017d4:	61fb      	str	r3, [r7, #28]
 80017d6:	e005      	b.n	80017e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80017d8:	4b2c      	ldr	r3, [pc, #176]	; (800188c <HAL_RCC_GetSysClockFreq+0x104>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	091b      	lsrs	r3, r3, #4
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80017e4:	4a2a      	ldr	r2, [pc, #168]	; (8001890 <HAL_RCC_GetSysClockFreq+0x108>)
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d10d      	bne.n	8001810 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017f8:	e00a      	b.n	8001810 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	d102      	bne.n	8001806 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001800:	4b24      	ldr	r3, [pc, #144]	; (8001894 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001802:	61bb      	str	r3, [r7, #24]
 8001804:	e004      	b.n	8001810 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	2b08      	cmp	r3, #8
 800180a:	d101      	bne.n	8001810 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800180c:	4b22      	ldr	r3, [pc, #136]	; (8001898 <HAL_RCC_GetSysClockFreq+0x110>)
 800180e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	2b0c      	cmp	r3, #12
 8001814:	d133      	bne.n	800187e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001816:	4b1d      	ldr	r3, [pc, #116]	; (800188c <HAL_RCC_GetSysClockFreq+0x104>)
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	2b02      	cmp	r3, #2
 8001824:	d002      	beq.n	800182c <HAL_RCC_GetSysClockFreq+0xa4>
 8001826:	2b03      	cmp	r3, #3
 8001828:	d003      	beq.n	8001832 <HAL_RCC_GetSysClockFreq+0xaa>
 800182a:	e005      	b.n	8001838 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800182c:	4b19      	ldr	r3, [pc, #100]	; (8001894 <HAL_RCC_GetSysClockFreq+0x10c>)
 800182e:	617b      	str	r3, [r7, #20]
      break;
 8001830:	e005      	b.n	800183e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001832:	4b19      	ldr	r3, [pc, #100]	; (8001898 <HAL_RCC_GetSysClockFreq+0x110>)
 8001834:	617b      	str	r3, [r7, #20]
      break;
 8001836:	e002      	b.n	800183e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	617b      	str	r3, [r7, #20]
      break;
 800183c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800183e:	4b13      	ldr	r3, [pc, #76]	; (800188c <HAL_RCC_GetSysClockFreq+0x104>)
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	091b      	lsrs	r3, r3, #4
 8001844:	f003 030f 	and.w	r3, r3, #15
 8001848:	3301      	adds	r3, #1
 800184a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800184c:	4b0f      	ldr	r3, [pc, #60]	; (800188c <HAL_RCC_GetSysClockFreq+0x104>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	0a1b      	lsrs	r3, r3, #8
 8001852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	fb02 f203 	mul.w	r2, r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001862:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001864:	4b09      	ldr	r3, [pc, #36]	; (800188c <HAL_RCC_GetSysClockFreq+0x104>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	0e5b      	lsrs	r3, r3, #25
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	3301      	adds	r3, #1
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001874:	697a      	ldr	r2, [r7, #20]
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	fbb2 f3f3 	udiv	r3, r2, r3
 800187c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800187e:	69bb      	ldr	r3, [r7, #24]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3724      	adds	r7, #36	; 0x24
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	40021000 	.word	0x40021000
 8001890:	08001aa0 	.word	0x08001aa0
 8001894:	00f42400 	.word	0x00f42400
 8001898:	007a1200 	.word	0x007a1200

0800189c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80018a4:	2300      	movs	r3, #0
 80018a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80018a8:	4b27      	ldr	r3, [pc, #156]	; (8001948 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80018aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80018b4:	f7ff f952 	bl	8000b5c <HAL_PWREx_GetVoltageRange>
 80018b8:	6178      	str	r0, [r7, #20]
 80018ba:	e014      	b.n	80018e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80018bc:	4b22      	ldr	r3, [pc, #136]	; (8001948 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80018be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c0:	4a21      	ldr	r2, [pc, #132]	; (8001948 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80018c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c6:	6593      	str	r3, [r2, #88]	; 0x58
 80018c8:	4b1f      	ldr	r3, [pc, #124]	; (8001948 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80018ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80018d4:	f7ff f942 	bl	8000b5c <HAL_PWREx_GetVoltageRange>
 80018d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80018da:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80018dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018de:	4a1a      	ldr	r2, [pc, #104]	; (8001948 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80018e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018ec:	d10b      	bne.n	8001906 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b80      	cmp	r3, #128	; 0x80
 80018f2:	d913      	bls.n	800191c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2ba0      	cmp	r3, #160	; 0xa0
 80018f8:	d902      	bls.n	8001900 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018fa:	2302      	movs	r3, #2
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	e00d      	b.n	800191c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001900:	2301      	movs	r3, #1
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	e00a      	b.n	800191c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b7f      	cmp	r3, #127	; 0x7f
 800190a:	d902      	bls.n	8001912 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800190c:	2302      	movs	r3, #2
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	e004      	b.n	800191c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b70      	cmp	r3, #112	; 0x70
 8001916:	d101      	bne.n	800191c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001918:	2301      	movs	r3, #1
 800191a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800191c:	4b0b      	ldr	r3, [pc, #44]	; (800194c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f023 020f 	bic.w	r2, r3, #15
 8001924:	4909      	ldr	r1, [pc, #36]	; (800194c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	4313      	orrs	r3, r2
 800192a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800192c:	4b07      	ldr	r3, [pc, #28]	; (800194c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 030f 	and.w	r3, r3, #15
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	429a      	cmp	r2, r3
 8001938:	d001      	beq.n	800193e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e000      	b.n	8001940 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40021000 	.word	0x40021000
 800194c:	40022000 	.word	0x40022000

08001950 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001950:	b480      	push	{r7}
 8001952:	b087      	sub	sp, #28
 8001954:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800195a:	4b2d      	ldr	r3, [pc, #180]	; (8001a10 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	f003 0303 	and.w	r3, r3, #3
 8001962:	2b01      	cmp	r3, #1
 8001964:	d118      	bne.n	8001998 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001966:	4b2a      	ldr	r3, [pc, #168]	; (8001a10 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	2b00      	cmp	r3, #0
 8001970:	d107      	bne.n	8001982 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001972:	4b27      	ldr	r3, [pc, #156]	; (8001a10 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001974:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001978:	0a1b      	lsrs	r3, r3, #8
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	e005      	b.n	800198e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001982:	4b23      	ldr	r3, [pc, #140]	; (8001a10 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	091b      	lsrs	r3, r3, #4
 8001988:	f003 030f 	and.w	r3, r3, #15
 800198c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800198e:	4a21      	ldr	r2, [pc, #132]	; (8001a14 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001996:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001998:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d002      	beq.n	80019ae <RCC_GetSysClockFreqFromPLLSource+0x5e>
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	d003      	beq.n	80019b4 <RCC_GetSysClockFreqFromPLLSource+0x64>
 80019ac:	e005      	b.n	80019ba <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80019ae:	4b1a      	ldr	r3, [pc, #104]	; (8001a18 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80019b0:	613b      	str	r3, [r7, #16]
    break;
 80019b2:	e005      	b.n	80019c0 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80019b4:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80019b6:	613b      	str	r3, [r7, #16]
    break;
 80019b8:	e002      	b.n	80019c0 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	613b      	str	r3, [r7, #16]
    break;
 80019be:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019c0:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	091b      	lsrs	r3, r3, #4
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	3301      	adds	r3, #1
 80019cc:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80019ce:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	0a1b      	lsrs	r3, r3, #8
 80019d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	fb02 f203 	mul.w	r2, r2, r3
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e4:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80019e6:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	0e5b      	lsrs	r3, r3, #25
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	3301      	adds	r3, #1
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fe:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001a00:	683b      	ldr	r3, [r7, #0]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	371c      	adds	r7, #28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	40021000 	.word	0x40021000
 8001a14:	08001aa0 	.word	0x08001aa0
 8001a18:	00f42400 	.word	0x00f42400
 8001a1c:	007a1200 	.word	0x007a1200

08001a20 <__libc_init_array>:
 8001a20:	b570      	push	{r4, r5, r6, lr}
 8001a22:	4e0d      	ldr	r6, [pc, #52]	; (8001a58 <__libc_init_array+0x38>)
 8001a24:	4c0d      	ldr	r4, [pc, #52]	; (8001a5c <__libc_init_array+0x3c>)
 8001a26:	1ba4      	subs	r4, r4, r6
 8001a28:	10a4      	asrs	r4, r4, #2
 8001a2a:	2500      	movs	r5, #0
 8001a2c:	42a5      	cmp	r5, r4
 8001a2e:	d109      	bne.n	8001a44 <__libc_init_array+0x24>
 8001a30:	4e0b      	ldr	r6, [pc, #44]	; (8001a60 <__libc_init_array+0x40>)
 8001a32:	4c0c      	ldr	r4, [pc, #48]	; (8001a64 <__libc_init_array+0x44>)
 8001a34:	f000 f820 	bl	8001a78 <_init>
 8001a38:	1ba4      	subs	r4, r4, r6
 8001a3a:	10a4      	asrs	r4, r4, #2
 8001a3c:	2500      	movs	r5, #0
 8001a3e:	42a5      	cmp	r5, r4
 8001a40:	d105      	bne.n	8001a4e <__libc_init_array+0x2e>
 8001a42:	bd70      	pop	{r4, r5, r6, pc}
 8001a44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a48:	4798      	blx	r3
 8001a4a:	3501      	adds	r5, #1
 8001a4c:	e7ee      	b.n	8001a2c <__libc_init_array+0xc>
 8001a4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a52:	4798      	blx	r3
 8001a54:	3501      	adds	r5, #1
 8001a56:	e7f2      	b.n	8001a3e <__libc_init_array+0x1e>
 8001a58:	08001ad0 	.word	0x08001ad0
 8001a5c:	08001ad0 	.word	0x08001ad0
 8001a60:	08001ad0 	.word	0x08001ad0
 8001a64:	08001ad4 	.word	0x08001ad4

08001a68 <memset>:
 8001a68:	4402      	add	r2, r0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d100      	bne.n	8001a72 <memset+0xa>
 8001a70:	4770      	bx	lr
 8001a72:	f803 1b01 	strb.w	r1, [r3], #1
 8001a76:	e7f9      	b.n	8001a6c <memset+0x4>

08001a78 <_init>:
 8001a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a7a:	bf00      	nop
 8001a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a7e:	bc08      	pop	{r3}
 8001a80:	469e      	mov	lr, r3
 8001a82:	4770      	bx	lr

08001a84 <_fini>:
 8001a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a86:	bf00      	nop
 8001a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a8a:	bc08      	pop	{r3}
 8001a8c:	469e      	mov	lr, r3
 8001a8e:	4770      	bx	lr
